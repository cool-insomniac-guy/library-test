

(nil)(nil, "\n")
function Drag(a, b)
  a = a
  b.InputBegan:Connect(function(a)
    a = a
    if a.UserInputType == Enum.UserInputType.MouseButton1 then
      repeat
        wait()
        vc:Create(vb, TweenInfo.new(0,05, Enum.EasingStyle.Linear), {
          Position = UDim2.new(0, va.X - Vector2.new(va.X - vb.AbsolutePosition.X, va.Y - vb.AbsolutePosition.Y).X, 0, va.Y - Vector2.new(va.X - vb.AbsolutePosition.X, va.Y - vb.AbsolutePosition.Y).Y)
        }):Play()
      until not vd:IsMouseButtonPressed(Enum.UserInputType.MouseButton1)
    end
  end)
end
function CreateWaveRipple(a, b, c)
  a = a
  coroutine.wrap(function()
    Instance.new("ImageLabel").Name = "Ripple"
    Instance.new("ImageLabel").Parent = va
    Instance.new("ImageLabel").BackgroundColor3 = vb
    Instance.new("ImageLabel").BackgroundTransparency = 1
    Instance.new("ImageLabel").Position = UDim2.new(0,5, 0, 0, 0)
    Instance.new("ImageLabel").Size = UDim2.new(0, 0, 1, 0)
    Instance.new("ImageLabel").Image = "http://www.roblox.com/asset/?id=6814674798"
    Instance.new("ImageLabel").ImageTransparency = vc
    Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("ImageLabel"), UDim.new(0, 5)
    vd:Create(Instance.new("ImageLabel"), TweenInfo.new(0,5), {
      Size = UDim2.new(1, 0, 1, 0),
      Position = UDim2.new(0, 0, 0, 0),
      ImageTransparency = 1
    }):Play()
    wait(0,5)
    Instance.new("ImageLabel"):Destroy()
  end)()
end
function CreateCircularRipple(a, b, c)
  a = a
  coroutine.wrap(function()
    Instance.new("Frame").BackgroundColor3 = va
    Instance.new("Frame").BackgroundTransparency = 0
    Instance.new("Frame").Position = UDim2.new(0,5, 0, 0,5, 0)
    Instance.new("Frame").Parent = vb
    Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
    if vc then
      vd.ColourObjects[Instance.new("Frame")] = "BackgroundColor3"
    end
    ve:Create(Instance.new("Frame"), TweenInfo.new(0,2), {
      Size = UDim2.new(1, 0, 1, 0),
      Position = UDim2.new(0, 0, 0, 0)
    }):Play()
    wait(0,2)
    if vd.ColourObjects[Instance.new("Frame")] then
      vd.ColourObjects[Instance.new("Frame")] = nil
    end
    Instance.new("Frame"):Destroy()
    vb.BackgroundColor3 = va
  end)()
end
function AddToolTip(a, b, c)
  a = a
  a.Holder.MouseEnter:Connect(function()
    va = true
    coroutine.wrap(function()
      repeat
        wait()
        vb:Create(va().Holder, TweenInfo.new(0,05), {
          Position = UDim2.new(0, vc.X + 22, 0, vc.Y)
        }):Play()
      until not vd
      va().Holder:Destroy()
    end)()
  end)
  a.Holder.MouseLeave:Connect(function()
    va = false
  end)
end
coroutine.wrap(function()
  while wait() do
    if #va.NotifsQueue > 0 and not vb then
      va:Notify(va.NotifsQueue[1][1], va.NotifsQueue[1][2])
      table.remove(va.NotifsQueue, 1)
    end
  end
end)()
return {
  Settings = {
    TopColor = Color3.fromRGB(25, 25, 25),
    MainColor = Color3.fromRGB(20, 20, 20),
    TabButtonColor = Color3.fromRGB(25, 25, 25),
    TabButtonIndicatorColors = {
      Hover = Color3.fromRGB(55, 55, 55),
      Disabled = Color3.fromRGB(35, 35, 35),
      Enabled = Color3.fromRGB(255, 255, 255)
    },
    TabColor = Color3.fromRGB(20, 20, 20),
    CategoryColor = Color3.fromRGB(15, 15, 15),
    ItemHolderColor = Color3.fromRGB(20, 20, 20),
    DefaultItemColor = Color3.fromRGB(25, 25, 25),
    ToolTipHolderColor = Color3.fromRGB(10, 10, 10),
    ToolTipMainColor = Color3.fromRGB(15, 15, 15),
    NotificationHolderColor = Color3.fromRGB(10, 10, 10),
    NotificationMainColor = Color3.fromRGB(15, 15, 15),
    NotificationTopColor = Color3.fromRGB(20, 20, 20),
    TextColor = Color3.fromRGB(255, 255, 255),
    Font = Enum.Font.SourceSans,
    CategoryFont = Enum.Font.SourceSansBold,
    ToolTipTitleFont = Enum.Font.SourceSansBold,
    NotificationFont = Enum.Font.SourceSansBold,
    DropdownIndicatorFont = Enum.Font.Highway,
    TextSize = 14,
    TitleTextSize = 20,
    DropdownIndicatorTextSize = 18
  },
  ColourObjects = {},
  Notifications = {},
  NotifsQueue = {},
  MaxNotificationStacking = 5,
  AddGui = function(a, b)
    a = a
    vc.Name = b.Title[1] .. " " .. b.Title[2]
    vc.Parent = game.CoreGui
    vc.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    Instance.new("Frame").Name = "TopBar"
    Instance.new("Frame").Parent = vc
    Instance.new("Frame").BackgroundColor3 = vb.Settings.TopColor
    Instance.new("Frame").Position = UDim2.new(1, -460, 1, -417)
    Instance.new("Frame").Size = UDim2.new(0, 440, 0, 40)
    Drag(Instance.new("Frame"), (Instance.new("Frame")))
    Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "Main_Holder"
    Instance.new("Frame").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    Instance.new("Frame").BackgroundTransparency = 1
    Instance.new("Frame").Position = UDim2.new(0, 0, 1, 2)
    Instance.new("Frame").Size = UDim2.new(1, 0, 0, 350)
    Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "Main_Rounding"
    Instance.new("Frame").BackgroundColor3 = vb.Settings.MainColor
    Instance.new("Frame").Position = UDim2.new(0, 0, 1, -5)
    Instance.new("Frame").Size = UDim2.new(1, 0, 0, 10)
    Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
    Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "Main"
    Instance.new("Frame").BackgroundColor3 = vb.Settings.MainColor
    Instance.new("Frame").ClipsDescendants = true
    Instance.new("Frame").BorderSizePixel = 0
    Instance.new("Frame").Size = UDim2.new(1, 0, 1, 0)
    Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "Buttons_Holder"
    Instance.new("Frame").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    Instance.new("Frame").BackgroundTransparency = 1
    Instance.new("Frame").Size = UDim2.new(0, 120, 1, 0)
    Instance.new("ScrollingFrame").Parent, Instance.new("ScrollingFrame").Name = Instance.new("Frame"), "Buttons_List"
    Instance.new("ScrollingFrame").Active = true
    Instance.new("ScrollingFrame").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    Instance.new("ScrollingFrame").BackgroundTransparency = 1
    Instance.new("ScrollingFrame").BorderSizePixel = 0
    Instance.new("ScrollingFrame").Position = UDim2.new(0, 0, 0, 5)
    Instance.new("ScrollingFrame").Size = UDim2.new(1, 0, 1, -5)
    Instance.new("ScrollingFrame").CanvasSize = UDim2.new(0, 0, 0, -5)
    Instance.new("ScrollingFrame").ScrollBarImageColor3 = Color3.fromRGB(0, 0, 0)
    Instance.new("ScrollingFrame").ScrollBarThickness = 5
    Instance.new("ScrollingFrame").ChildAdded:Connect(function(a)
      a = a
      if not a.ClassName:find("UI") then
        va.CanvasSize = va.CanvasSize + UDim2.new(0, 0, 0, a.AbsoluteSize.Y + 5)
      end
    end)
    Instance.new("UIPadding").Parent = Instance.new("ScrollingFrame")
    Instance.new("UIListLayout").Parent, Instance.new("UIPadding").PaddingLeft = Instance.new("ScrollingFrame"), UDim.new(0, 5)
    Instance.new("UIListLayout").SortOrder = Enum.SortOrder.LayoutOrder
    Instance.new("UIListLayout").Padding = UDim.new(0, 5)
    Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "Tabs_Holder"
    Instance.new("Frame").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    Instance.new("Frame").BackgroundTransparency = 1
    Instance.new("Frame").Position = UDim2.new(0, 120, 0, 0)
    Instance.new("UIListLayout").Parent, Instance.new("Frame").Size = Instance.new("Frame"), UDim2.new(0, 320, 1, 0)
    Instance.new("UIListLayout").SortOrder = Enum.SortOrder.LayoutOrder
    Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "Top_Filling"
    Instance.new("Frame").BackgroundColor3 = vb.Settings.TopColor
    Instance.new("Frame").BorderSizePixel = 0
    Instance.new("Frame").Position = UDim2.new(0, 0, 0,5, 0)
    Instance.new("Frame").Size = UDim2.new(1, 0, 0,5, 0)
    Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
    Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "Title_Holder"
    Instance.new("Frame").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    Instance.new("Frame").BackgroundTransparency = 1
    Instance.new("Frame").Position = UDim2.new(0,5, -66, 0,5, -10)
    Instance.new("Frame").Size = UDim2.new(0, 133, 0, 20)
    Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Title1"
    Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    Instance.new("TextLabel").BackgroundTransparency = 1
    Instance.new("TextLabel").Size = UDim2.new(0, 66, 0, 20)
    Instance.new("TextLabel").Font = vb.Settings.Font
    Instance.new("TextLabel").Text = b.Title[1] .. " -"
    Instance.new("TextLabel").TextColor3 = vb.Settings.TextColor
    Instance.new("TextLabel").TextSize = vb.Settings.TitleTextSize
    Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Title2"
    Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    Instance.new("TextLabel").BackgroundTransparency = 1
    Instance.new("TextLabel").Position = UDim2.new(0, 69, 0, 0)
    Instance.new("TextLabel").Size = UDim2.new(0, 64, 0, 20)
    Instance.new("TextLabel").Font = vb.Settings.Font
    Instance.new("TextLabel").Text = b.Title[2]
    Instance.new("TextLabel").TextColor3 = {
      Tabs = {},
      Toggle = function(a, b)
        a = a
        if b then
        end
        va:Create(vb, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
          Size = UDim2.new(0, 440 or vc.TextBounds.X + 3 + vd.TextBounds.X + 20, 0, 40)
        }):Play()
        if b then
        end
        va:Create(ve, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
          Size = UDim2.new(1, 0, 0, 350 or 0)
        }):Play()
        if b then
        end
        va:Create(vg, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
          Position = UDim2.new(0, 0, 1, -5 or -10)
        }):Play()
      end,
      SetTheme = function(a, b)
        a = a
        va.ThemeColor, vb.ThemeColor = b, b
        for fg, fh in next, va.ColourObjects, nil do
          fg[fh] = b
        end
      end,
      SetStartupTab = function(a, b)
        a = a
        for fg, fh in next, va.Tabs, nil do
          if fh == b then
            fh:Show()
          end
        end
      end,
      ThemeColor = b.ThemeColor,
      Toggled = true,
      ToggleKey = b.ToggleKey,
      Gui = vc,
      AddTab = function(a, b)
        a = a
        Instance.new("ScrollingFrame").Name = "Tab"
        Instance.new("ScrollingFrame").Parent = vd
        Instance.new("ScrollingFrame").Active = true
        Instance.new("ScrollingFrame").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        Instance.new("ScrollingFrame").BackgroundTransparency = 1
        Instance.new("ScrollingFrame").BorderSizePixel = 0
        Instance.new("ScrollingFrame").Size = UDim2.new(1, 0, 1, 0)
        Instance.new("ScrollingFrame").CanvasSize = UDim2.new(0, 0, 0, 0)
        Instance.new("ScrollingFrame").ScrollBarImageColor3 = Color3.fromRGB(0, 0, 0)
        Instance.new("ScrollingFrame").ScrollBarThickness = 5
        Instance.new("ScrollingFrame").Visible = false
        Instance.new("ScrollingFrame").ChildAdded:Connect(function(a)
          a = a
          if not a.ClassName:find("UI") then
            va.CanvasSize = va.CanvasSize + UDim2.new(0, 0, 0, a.AbsoluteSize.Y + 5)
          end
        end)
        Instance.new("UIListLayout").Parent = Instance.new("ScrollingFrame")
        Instance.new("UIListLayout").SortOrder = Enum.SortOrder.LayoutOrder
        Instance.new("UIListLayout").Padding = UDim.new(0, 5)
        Instance.new("UIPadding").Parent, Instance.new("UIPadding").Archivable = Instance.new("ScrollingFrame"), false
        Instance.new("UIPadding").PaddingBottom = UDim.new(0, 5)
        Instance.new("UIPadding").PaddingLeft = UDim.new(0, 5)
        Instance.new("UIPadding").PaddingRight = UDim.new(0, 5)
        Instance.new("UIPadding").PaddingTop = UDim.new(0, 5)
        Instance.new("Frame").Name = "Button_Holder"
        Instance.new("Frame").BackgroundColor3 = vc.Settings.TabButtonColor
        Instance.new("Frame").Size = UDim2.new(1, -10, 0, 30)
        Instance.new("Frame").Parent = ve
        Instance.new("Frame").MouseEnter:Connect(function()
          if not va:IsShown() then
            vb:Create(vc, TweenInfo.new(0,2), {
              BackgroundColor3 = vd.Settings.TabButtonIndicatorColors.Hover
            }):Play()
          end
        end)
        Instance.new("Frame").MouseLeave:Connect(function()
          if not va:IsShown() then
            vb:Create(vc, TweenInfo.new(0,2), {
              BackgroundColor3 = vd.Settings.TabButtonIndicatorColors.Disabled
            }):Play()
          end
        end)
        Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
        Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "Indicator"
        Instance.new("Frame").BackgroundColor3 = vc.Settings.TabButtonIndicatorColors.Disabled
        Instance.new("Frame").Position = UDim2.new(0, 4, 0, 8)
        Instance.new("Frame").Size = UDim2.new(0, 2, 1, -16)
        Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
        Instance.new("TextButton").Parent, Instance.new("TextButton").Name = Instance.new("Frame"), "Button"
        Instance.new("TextButton").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        Instance.new("TextButton").BackgroundTransparency = 1
        Instance.new("TextButton").Position = UDim2.new(0, 10, 0, 0)
        Instance.new("TextButton").Size = UDim2.new(1, -10, 1, 0)
        Instance.new("TextButton").Font = vc.Settings.Font
        Instance.new("TextButton").Text = b
        Instance.new("TextButton").TextColor3 = vc.Settings.TextColor
        Instance.new("TextButton").TextSize = vc.Settings.TextSize
        Instance.new("TextButton").MouseButton1Click:Connect(function()
          va:Show()
        end)
        table.insert(va.Tabs, {
          Toggles = {},
          BindToggles = {},
          SliderToggles = {},
          Show = function(a)
            a = a
            for fe, fg in next, va.Tabs, nil do
              fg.Tab.Visible = fg.Tab == vb
              vc:Create(fg.Indicator, TweenInfo.new(0,2), {
                BackgroundColor3 = vd.Settings.TabButtonIndicatorColors["Enabled" or "Disabled"]
              }):Play()
            end
          end,
          Hide = function(a)
            a = a
            va.Visible = false
          end,
          IsShown = function(a)
            a = a
            return va.Visible
          end,
          Indicator = Instance.new("Frame"),
          Tab = Instance.new("ScrollingFrame"),
          Holder = vd,
          AddCategory = function(a, b)
            a = a
            Instance.new("Frame").Name = "Category_Frame"
            Instance.new("Frame").BackgroundColor3 = vb.Settings.CategoryColor
            Instance.new("Frame").Position = UDim2.new(0, 5, 0, 5)
            Instance.new("Frame").Size = UDim2.new(1, 0, 0, 35)
            Instance.new("Frame").Parent = va
            Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
            Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Category_Title"
            Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            Instance.new("TextLabel").BackgroundTransparency = 1
            Instance.new("TextLabel").Position = UDim2.new(0, 2, 0, 8)
            Instance.new("TextLabel").Size = UDim2.new(1, -4, 0, 14)
            Instance.new("TextLabel").Font = vb.Settings.CategoryFont
            Instance.new("TextLabel").Text = b
            Instance.new("TextLabel").TextColor3 = vb.Settings.TextColor
            Instance.new("TextLabel").TextSize = vb.Settings.TextSize
            Instance.new("TextLabel").TextWrapped = true
            Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "Category_List"
            Instance.new("Frame").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            Instance.new("Frame").BackgroundTransparency = 1
            Instance.new("Frame").Position = UDim2.new(0, 0, 0, 30)
            Instance.new("Frame").Size = UDim2.new(1, 0, 1, -30)
            Instance.new("Frame").ChildAdded:Connect(function(a)
              a = a
              if not a.ClassName:find("UI") then
                va.Size = va.Size + UDim2.new(0, 0, 0, a.AbsoluteSize.Y + 5)
                vb.CanvasSize = vb.CanvasSize + UDim2.new(0, 0, 0, a.AbsoluteSize.Y + 5)
              end
            end)
            Instance.new("UIListLayout").Parent = Instance.new("Frame")
            Instance.new("UIListLayout").SortOrder = Enum.SortOrder.LayoutOrder
            Instance.new("UIPadding").Parent, Instance.new("UIListLayout").Padding = Instance.new("Frame"), UDim.new(0, 5)
            Instance.new("UIPadding").PaddingBottom = UDim.new(0, 5)
            Instance.new("UIPadding").PaddingLeft = UDim.new(0, 5)
            Instance.new("UIPadding").PaddingRight = UDim.new(0, 5)
            Instance.new("UIPadding").PaddingTop = UDim.new(0, 5)
            return {
              Frame = Instance.new("Frame"),
              Holder = va,
              AddButton = function(a, b, c)
                a = a
                Instance.new("Frame").Name = "Button_Holder"
                Instance.new("Frame").BackgroundColor3 = va.Settings.ItemHolderColor
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 30)
                Instance.new("Frame").Parent = vb
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("TextButton").Parent, Instance.new("TextButton").Name = Instance.new("Frame"), "Button"
                Instance.new("TextButton").AutoButtonColor = false
                Instance.new("TextButton").BackgroundColor3 = va.Settings.DefaultItemColor
                Instance.new("TextButton").Position = UDim2.new(0, 2, 0, 2)
                Instance.new("TextButton").Size = UDim2.new(1, -4, 1, -4)
                Instance.new("TextButton").Font = va.Settings.Font
                Instance.new("TextButton").Text = b
                Instance.new("TextButton").TextColor3 = va.Settings.TextColor
                Instance.new("TextButton").TextSize = va.Settings.TextSize
                Instance.new("TextButton").TextWrapped = true
                Instance.new("TextButton").MouseButton1Down:Connect(function()
                  va.TextSize = vb.Settings.TextSize - 1
                end)
                Instance.new("TextButton").MouseLeave:Connect(function()
                  va.TextSize = vb.Settings.TextSize
                end)
                Instance.new("TextButton").MouseButton1Up:Connect(function()
                  pcall(va.Function)
                  vb.TextSize = vc.Settings.TextSize
                  CreateWaveRipple(vb, 0,8, Color3.fromRGB(255, 255, 255))
                end)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("TextButton"), UDim.new(0, 5)
                return {
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = c,
                  Button = Instance.new("TextButton"),
                  Holder = Instance.new("Frame")
                }
              end,
              AddToggle = function(a, b, c, d)
                a = a
                vc.Toggles[b] = c
                Instance.new("Frame").Name = b
                Instance.new("Frame").BackgroundColor3 = Color3.fromRGB(20, 20, 20)
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 30)
                Instance.new("Frame").Parent = vd
                Instance.new("Frame").InputBegan:Connect(function(a, b)
                  a = a
                  if not b and a.UserInputType == Enum.UserInputType.MouseButton1 then
                    va.Size = UDim2.new(0, 24, 0, 24)
                    va.Position = UDim2.new(1, -27, 0, 3)
                  end
                end)
                Instance.new("Frame").InputEnded:Connect(function(a, b)
                  a = a
                  if not b and a.UserInputType == Enum.UserInputType.MouseButton1 then
                    va.Toggles[vb] = not va.Toggles[vb]
                    vc:Set(va.Toggles[vb])
                    vd.Size = UDim2.new(0, 26, 0, 26)
                    vd.Position = UDim2.new(1, -28, 0, 2)
                  end
                end)
                Instance.new("Frame").MouseLeave:Connect(function()
                  va.Size = UDim2.new(0, 26, 0, 26)
                  va.Position = UDim2.new(1, -28, 0, 2)
                end)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(0, 5, 0,5, -7)
                Instance.new("TextLabel").Size = UDim2.new(1, -38, 0, 14)
                Instance.new("TextLabel").Font = Enum.Font.SourceSans
                Instance.new("TextLabel").Text = b
                Instance.new("TextLabel").TextColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").TextSize = 14
                Instance.new("TextLabel").TextWrapped = true
                Instance.new("TextLabel").TextXAlignment = Enum.TextXAlignment.Left
                Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "Toggle_Indicator"
                Instance.new("Frame").BackgroundColor3 = vb.Settings.DefaultItemColor
                Instance.new("Frame").Position = UDim2.new(1, -28, 0, 2)
                Instance.new("Frame").Size = UDim2.new(0, 26, 0, 26)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                {
                  Set = function(a, b)
                    a = a
                    if b then
                    end
                    CreateCircularRipple(va, vb.ThemeColor or vc.Settings.DefaultItemColor, b)
                    if b then
                      vc.ColourObjects[va] = "BackgroundColor3"
                    elseif vc.ColourObjects[va] then
                      vc.ColourObjects[va] = nil
                    end
                    vd.Toggled = b
                    pcall(vd.Function, b)
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = d,
                  Toggled = c,
                  Holder = Instance.new("Frame")
                }:Set(c)
                return {
                  Set = function(a, b)
                    a = a
                    if b then
                    end
                    CreateCircularRipple(va, vb.ThemeColor or vc.Settings.DefaultItemColor, b)
                    if b then
                      vc.ColourObjects[va] = "BackgroundColor3"
                    elseif vc.ColourObjects[va] then
                      vc.ColourObjects[va] = nil
                    end
                    vd.Toggled = b
                    pcall(vd.Function, b)
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = d,
                  Toggled = c,
                  Holder = Instance.new("Frame")
                }
              end,
              AddBox = function(a, b, c)
                a = a
                Instance.new("Frame").Name = "Box_Holder"
                Instance.new("Frame").BackgroundColor3 = Color3.fromRGB(20, 20, 20)
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 30)
                Instance.new("Frame").Parent = va
                Instance.new("Frame").MouseEnter:Connect(function()
                  ve:Create(vg, TweenInfo.new(0,2), {
                    Size = UDim2.new(1, -(vc or vd), 1, -4),
                    Position = UDim2.new(0, vc or vd, 0, 2)
                  }):Play()
                end)
                Instance.new("Frame").MouseLeave:Connect(function()
                  if va:IsFocused() then
                    va.FocusLost:Wait()
                  end
                  vb:Create(va, TweenInfo.new(0,2), {
                    Size = UDim2.new(0, vc, 1, -4),
                    Position = UDim2.new(1, -vc - 2, 0, 2)
                  }):Play()
                end)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(0, 5, 0,5, -7)
                Instance.new("TextLabel").Size = UDim2.new(1, -112, 0, 14)
                Instance.new("TextLabel").Font = vc.Settings.Font
                Instance.new("TextLabel").Text = b
                Instance.new("TextLabel").TextColor3 = vc.Settings.TextColor
                Instance.new("TextLabel").TextSize = vc.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                Instance.new("TextLabel").TextXAlignment = Enum.TextXAlignment.Left
                Instance.new("TextLabel").Size = UDim2.new(0, Instance.new("TextLabel").TextBounds.X + 2, 0, 14)
                Instance.new("TextBox").Parent, Instance.new("TextBox").Name = Instance.new("Frame"), "Box"
                Instance.new("TextBox").BackgroundColor3 = vc.Settings.DefaultItemColor
                Instance.new("TextBox").Position = UDim2.new(1, -102, 0, 2)
                Instance.new("TextBox").Size = UDim2.new(0, 100, 1, -4)
                Instance.new("TextBox").Font = vc.Settings.Font
                Instance.new("TextBox").Text = ""
                Instance.new("TextBox").TextColor3 = vc.Settings.TextColor
                Instance.new("TextBox").TextSize = vc.Settings.TextSize
                Instance.new("TextBox").TextWrapped = true
                Instance.new("TextBox").FocusLost:Connect(function()
                  pcall(va.Function, vb.Text)
                end)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("TextBox"), UDim.new(0, 5)
                return {
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = c,
                  Box = Instance.new("TextBox"),
                  Holder = Instance.new("Frame")
                }
              end,
              AddLabel = function(a, b)
                a = a
                Instance.new("Frame").Name = "Label_Holder"
                Instance.new("Frame").BackgroundColor3 = va.Settings.ItemHolderColor
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 18)
                Instance.new("Frame").Parent = vb
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(0, 5, 0,5, -7)
                Instance.new("TextLabel").Size = UDim2.new(1, -10, 0, 14)
                Instance.new("TextLabel").Font = va.Settings.Font
                Instance.new("TextLabel").Text = b
                Instance.new("TextLabel").TextColor3 = va.Settings.TextColor
                Instance.new("TextLabel").TextSize = va.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                return {
                  Label = Instance.new("TextLabel"),
                  Holder = Instance.new("Frame")
                }
              end,
              AddDualLabel = function(a, b)
                a = a
                Instance.new("Frame").Name = "DualLabel_Holder"
                Instance.new("Frame").BackgroundColor3 = va.Settings.ItemHolderColor
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 18)
                Instance.new("Frame").Parent = vb
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label1"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(0, 5, 0,5, -7)
                Instance.new("TextLabel").Size = UDim2.new(0,5, -5, 0, 14)
                Instance.new("TextLabel").Font = va.Settings.Font
                Instance.new("TextLabel").Text = b[1]
                Instance.new("TextLabel").TextColor3 = va.Settings.TextColor
                Instance.new("TextLabel").TextSize = va.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                Instance.new("TextLabel").TextXAlignment = Enum.TextXAlignment.Left
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label2"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(0,5, 0, 0,5, -7)
                Instance.new("TextLabel").Size = UDim2.new(0,5, -5, 0, 14)
                Instance.new("TextLabel").Font = va.Settings.Font
                Instance.new("TextLabel").Text = b[2]
                Instance.new("TextLabel").TextColor3 = va.Settings.TextColor
                Instance.new("TextLabel").TextSize = va.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                Instance.new("TextLabel").TextXAlignment = Enum.TextXAlignment.Right
                return {
                  Label2 = Instance.new("TextLabel"),
                  Label1 = Instance.new("TextLabel"),
                  Holder = Instance.new("Frame")
                }
              end,
              AddSlider = function(a, b, c, d, e, g, h)
                a = a
                Instance.new("Frame").Name = "Slider_Holder"
                Instance.new("Frame").BackgroundColor3 = vb.Settings.ItemHolderColor
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 30)
                Instance.new("Frame").Parent = vc
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "Slider_Background"
                Instance.new("Frame").BackgroundColor3 = vb.Settings.DefaultItemColor
                Instance.new("Frame").ClipsDescendants = true
                Instance.new("Frame").Position = UDim2.new(0, 5, 0, 18)
                Instance.new("Frame").Size = UDim2.new(1, -10, 1, -20)
                Instance.new("Frame").InputBegan:Connect(function(a, b)
                  a = a
                  repeat
                    if not b and a.UserInputType == Enum.UserInputType.MouseButton1 then
                      wait()
                      vc:Set(math.floor((vd + math.clamp((va.X - vb.AbsolutePosition.X) / vb.AbsoluteSize.X, 0, 1) * (ve - vd)) * 10) / 10)
                    end
                  until not vg:IsMouseButtonPressed(Enum.UserInputType.MouseButton1)
                end)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "Slider"
                Instance.new("Frame").BackgroundColor3 = vg.ThemeColor
                Instance.new("Frame").Size = UDim2.new(0,75, 0, 1, 0)
                vb.ColourObjects[Instance.new("Frame")] = "BackgroundColor3"
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(0, 5, 0, 2)
                Instance.new("TextLabel").Size = UDim2.new(1, -10, 0, 14)
                Instance.new("TextLabel").Font = vb.Settings.Font
                Instance.new("TextLabel").Text = ""
                Instance.new("TextLabel").TextColor3 = vb.Settings.TextColor
                Instance.new("TextLabel").TextSize = vb.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                {
                  Set = function(a, b)
                    a = a
                    b = va or vb
                    b = vb or vb
                    vd.Text = ve .. " - " .. tostring(vg.Value)
                    vh:Create(vj, TweenInfo.new(0,2, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                      Size = UDim2.new(1 - (va - b) / (va - vb), 0, 1, 0)
                    }):Play()
                    vg.Value = b
                    pcall(vg.Function, b)
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = h,
                  Value = e,
                  Holder = Instance.new("Frame")
                }:Set(e)
                return {
                  Set = function(a, b)
                    a = a
                    b = va or vb
                    b = vb or vb
                    vd.Text = ve .. " - " .. tostring(vg.Value)
                    vh:Create(vj, TweenInfo.new(0,2, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                      Size = UDim2.new(1 - (va - b) / (va - vb), 0, 1, 0)
                    }):Play()
                    vg.Value = b
                    pcall(vg.Function, b)
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = h,
                  Value = e,
                  Holder = Instance.new("Frame")
                }
              end,
              AddToggleSlider = function(a, b, c, d, e, g, h, j)
                a = a
                Instance.new("Frame").Name = "ToggleSlider_Holder"
                Instance.new("Frame").BackgroundColor3 = vc.Settings.ItemHolderColor
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 30)
                Instance.new("Frame").Parent = vd
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "Slider_Background"
                Instance.new("Frame").BackgroundColor3 = vc.Settings.DefaultItemColor
                Instance.new("Frame").ClipsDescendants = true
                Instance.new("Frame").Position = UDim2.new(0, 30, 0, 18)
                Instance.new("Frame").Size = UDim2.new(1, -35, 1, -20)
                Instance.new("Frame").InputBegan:Connect(function(a, b)
                  a = a
                  repeat
                    if not b and a.UserInputType == Enum.UserInputType.MouseButton1 then
                      wait()
                      vc:Set(math.floor((vd + math.clamp((va.X - vb.AbsolutePosition.X) / vb.AbsoluteSize.X, 0, 1) * (ve - vd)) * 10) / 10)
                    end
                  until not vg:IsMouseButtonPressed(Enum.UserInputType.MouseButton1)
                end)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "Slider"
                Instance.new("Frame").BackgroundColor3 = vb.ThemeColor
                Instance.new("Frame").Size = UDim2.new(0,75, 0, 1, 0)
                vc.ColourObjects[Instance.new("Frame")] = "BackgroundColor3"
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(0, 30, 0, 2)
                Instance.new("TextLabel").Size = UDim2.new(1, -35, 0, 14)
                Instance.new("TextLabel").Font = vc.Settings.Font
                Instance.new("TextLabel").Text = ""
                Instance.new("TextLabel").TextColor3 = vc.Settings.TextColor
                Instance.new("TextLabel").TextSize = vc.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                Instance.new("TextButton").Parent, Instance.new("TextButton").Name = Instance.new("Frame"), "ToggleSlider_Indicator"
                Instance.new("TextButton").BackgroundColor3 = vc.Settings.DefaultItemColor
                Instance.new("TextButton").Position = UDim2.new(0, 2, 0, 2)
                Instance.new("TextButton").Size = UDim2.new(0, 26, 0, 26)
                Instance.new("TextButton").AutoButtonColor = false
                Instance.new("TextButton").Font = vc.Settings.Font
                Instance.new("TextButton").Text = ""
                Instance.new("TextButton").MouseButton1Down:Connect(function()
                  va.Size = UDim2.new(0, 24, 0, 24)
                  va.Position = UDim2.new(0, 3, 0, 3)
                end)
                Instance.new("TextButton").MouseButton1Up:Connect(function()
                  va.Toggled = not va.Toggled
                  va:Toggle(va.Toggled)
                  vb.Size = UDim2.new(0, 26, 0, 26)
                  vb.Position = UDim2.new(0, 2, 0, 2)
                end)
                Instance.new("Frame").MouseLeave:Connect(function()
                  va.Size = UDim2.new(0, 26, 0, 26)
                  va.Position = UDim2.new(0, 2, 0, 2)
                end)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("TextButton"), UDim.new(0, 5)
                {
                  Set = function(a, b)
                    a = a
                    b = va or vb
                    b = vb or vb
                    if b == ve then
                      vg.Text = vh .. " - " .. tostring(vd.Value)
                      vj:Create(vk, TweenInfo.new(0,2, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                        Size = UDim2.new(1 - (va - b) / (va - vb), 0, 1, 0)
                      }):Play()
                      vd.Value = b
                      pcall(vd.Function, b)
                    end
                  end,
                  Toggle = function(a, b)
                    a = a
                    if b then
                    end
                    CreateCircularRipple(va, vb.ThemeColor or vc.Settings.DefaultItemColor, b)
                    if b then
                      vc.ColourObjects[va] = "BackgroundColor3"
                    elseif vc.ColourObjects[va] then
                      vc.ColourObjects[va] = nil
                    end
                    vd.Toggled = b
                    vd:Set(vd.Value)
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = j,
                  Toggled = h,
                  Value = e,
                  Holder = Instance.new("Frame")
                }:Set(e)
                return {
                  Set = function(a, b)
                    a = a
                    b = va or vb
                    b = vb or vb
                    if b == ve then
                      vg.Text = vh .. " - " .. tostring(vd.Value)
                      vj:Create(vk, TweenInfo.new(0,2, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                        Size = UDim2.new(1 - (va - b) / (va - vb), 0, 1, 0)
                      }):Play()
                      vd.Value = b
                      pcall(vd.Function, b)
                    end
                  end,
                  Toggle = function(a, b)
                    a = a
                    if b then
                    end
                    CreateCircularRipple(va, vb.ThemeColor or vc.Settings.DefaultItemColor, b)
                    if b then
                      vc.ColourObjects[va] = "BackgroundColor3"
                    elseif vc.ColourObjects[va] then
                      vc.ColourObjects[va] = nil
                    end
                    vd.Toggled = b
                    vd:Set(vd.Value)
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = j,
                  Toggled = h,
                  Value = e,
                  Holder = Instance.new("Frame")
                }
              end,
              AddDropdown = function(a, b, c, d)
                a = a
                Instance.new("Frame").Name = "Dropdown_Holder"
                Instance.new("Frame").BackgroundColor3 = vd.Settings.ItemHolderColor
                Instance.new("Frame").ClipsDescendants = true
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 30)
                Instance.new("Frame").Parent = ve
                Instance.new("Frame").InputBegan:Connect(function(a, b)
                  a = a
                  if not b and a.UserInputType == Enum.UserInputType.MouseButton1 and not va then
                    vb = not vb
                    vc:Toggle(vb)
                  end
                end)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "Labels_Holder"
                Instance.new("Frame").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("Frame").BackgroundTransparency = 1
                Instance.new("Frame").Position = UDim2.new(0, 2, 0, 0)
                Instance.new("Frame").Size = UDim2.new(1, -30, 0, 30)
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").BorderColor3 = Color3.fromRGB(27, 42, 53)
                Instance.new("TextLabel").Position = UDim2.new(0, 5, 0,5, -7)
                Instance.new("TextLabel").Size = UDim2.new(0,5, -2, 0, 14)
                Instance.new("TextLabel").Font = vd.Settings.Font
                Instance.new("TextLabel").Text = b
                Instance.new("TextLabel").TextColor3 = vd.Settings.TextColor
                Instance.new("TextLabel").TextSize = vd.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                Instance.new("TextLabel").TextXAlignment = Enum.TextXAlignment.Left
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Selected_Display"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").BorderColor3 = Color3.fromRGB(27, 42, 53)
                Instance.new("TextLabel").Position = UDim2.new(0,5, 3, 0, 8)
                Instance.new("TextLabel").Size = UDim2.new(0,5, -5, 0, 14)
                Instance.new("TextLabel").Font = vd.Settings.Font
                Instance.new("TextLabel").Text = ""
                Instance.new("TextLabel").TextColor3 = vd.Settings.TextColor
                Instance.new("TextLabel").TextSize = vd.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                Instance.new("TextLabel").TextXAlignment = Enum.TextXAlignment.Right
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Dropdown_Indicator"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(1, -28, 0, 2)
                Instance.new("TextLabel").Rotation = -90
                Instance.new("TextLabel").Size = UDim2.new(0, 26, 0, 26)
                Instance.new("TextLabel").Font = vd.Settings.DropdownIndicatorFont
                Instance.new("TextLabel").Text = "<"
                Instance.new("TextLabel").TextColor3 = vd.Settings.TextColor
                Instance.new("TextLabel").TextSize = vd.Settings.DropdownIndicatorTextSize
                Instance.new("ScrollingFrame").Parent, Instance.new("ScrollingFrame").Name = Instance.new("Frame"), "Dropdown_List"
                Instance.new("ScrollingFrame").Active = true
                Instance.new("ScrollingFrame").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("ScrollingFrame").BackgroundTransparency = 1
                Instance.new("ScrollingFrame").BorderSizePixel = 0
                Instance.new("ScrollingFrame").Position = UDim2.new(0, 0, 0, 30)
                Instance.new("ScrollingFrame").Size = UDim2.new(1, 0, 1, -30)
                Instance.new("ScrollingFrame").CanvasSize = UDim2.new(0, 0, 0, 2)
                Instance.new("ScrollingFrame").ScrollBarImageColor3 = Color3.fromRGB(0, 0, 0)
                Instance.new("ScrollingFrame").ScrollBarThickness = 5
                Instance.new("ScrollingFrame").ChildAdded:Connect(function(a)
                  a = a
                  if not a.ClassName:find("UI") then
                    va(UDim2.new(0, 0, 0, a.AbsoluteSize.Y + 2))
                  end
                end)
                Instance.new("ScrollingFrame").ChildRemoved:Connect(function(a)
                  a = a
                  if not a.ClassName:find("UI") then
                    va(UDim2.new(0, 0, 0, -a.AbsoluteSize.Y - 2))
                  end
                end)
                Instance.new("UIPadding").Parent = Instance.new("ScrollingFrame")
                Instance.new("UIPadding").PaddingBottom = UDim.new(0, 2)
                Instance.new("UIPadding").PaddingLeft = UDim.new(0, 2)
                Instance.new("UIPadding").PaddingRight = UDim.new(0, 2)
                Instance.new("UIListLayout").Parent, Instance.new("UIPadding").PaddingTop = Instance.new("ScrollingFrame"), UDim.new(0, 2)
                Instance.new("UIListLayout").SortOrder = Enum.SortOrder.LayoutOrder
                Instance.new("UIListLayout").Padding = UDim.new(0, 2)
                for fQ, fW in next, c, nil do
                  {
                    Toggle = function(a, b)
                      a = a
                      if not va then
                        va = true
                        if b then
                        end
                        if b then
                        end
                        vc:Create(vd, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                          Rotation = 0 or -90
                        }):Play()
                        vc:Create(ve, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                          Size = ve.Size + UDim2.new(0, 0, 0, 2 + (vb.MaxVisibleItems or #vb.Items) * 22 or -(2 + (vb.MaxVisibleItems or #vb.Items) * 22))
                        }):Play()
                        vc:Create(vg, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                          Size = vg.Size + UDim2.new(0, 0, 0, 2 + (vb.MaxVisibleItems or #vb.Items) * 22 or -(2 + (vb.MaxVisibleItems or #vb.Items) * 22))
                        }):Play()
                        vc:Create(vh, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                          CanvasSize = vh.CanvasSize + UDim2.new(0, 0, 0, 2 + (vb.MaxVisibleItems or #vb.Items) * 22 or -(2 + (vb.MaxVisibleItems or #vb.Items) * 22))
                        }):Play()
                        wait(0,5)
                        va = false
                        vj()
                        vk()
                      end
                    end,
                    AddItem = function(a, b)
                      a = a
                      if va then
                        table.insert(vb.Add, {
                          Name = b,
                          Holder = Instance.new("TextButton")
                        })
                        return
                      end
                      Instance.new("TextButton").Name = "Dropdown_Item"
                      Instance.new("TextButton").BackgroundColor3 = Color3.fromRGB(25, 25, 25)
                      Instance.new("TextButton").Size = UDim2.new(1, 0, 0, 20)
                      Instance.new("TextButton").Font = vc.Settings.Font
                      Instance.new("TextButton").Text = b
                      Instance.new("TextButton").TextColor3 = vc.Settings.TextColor
                      Instance.new("TextButton").TextSize = vc.Settings.TextSize
                      Instance.new("TextButton").TextWrapped = true
                      Instance.new("TextButton").Parent = vd
                      Instance.new("TextButton").MouseButton1Click:Connect(function()
                        va.Text = vb
                        vc.Selected = vb
                        pcall(vc.Function, vb)
                      end)
                      Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("TextButton"), UDim.new(0, 5)
                      table.insert(vg.Items, {
                        Name = b,
                        Holder = Instance.new("TextButton")
                      })
                    end,
                    RemoveItem = function(a, b)
                      a = a
                      if va then
                        for fg, fh in next, vb.Items, nil do
                          if fh.Name == b then
                            table.insert(vc.Remove, fh)
                          else
                          end
                        end
                        return
                      end
                      for fg, fh in next, vb.Items, nil do
                        if fh.Name == b then
                          table.remove(vb.Items, fg)
                          fh.Holder:Destroy()
                        else
                        end
                      end
                    end,
                    AddToolTip = function(a, b)
                      a = a
                      AddToolTip(va, vb, b)
                    end,
                    Function = d,
                    MaxVisibleItems = 10,
                    Selected = nil,
                    Items = {},
                    Holder = Instance.new("Frame")
                  }:AddItem(fW)
                end
                return {
                  Toggle = function(a, b)
                    a = a
                    if not va then
                      va = true
                      if b then
                      end
                      if b then
                      end
                      vc:Create(vd, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                        Rotation = 0 or -90
                      }):Play()
                      vc:Create(ve, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                        Size = ve.Size + UDim2.new(0, 0, 0, 2 + (vb.MaxVisibleItems or #vb.Items) * 22 or -(2 + (vb.MaxVisibleItems or #vb.Items) * 22))
                      }):Play()
                      vc:Create(vg, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                        Size = vg.Size + UDim2.new(0, 0, 0, 2 + (vb.MaxVisibleItems or #vb.Items) * 22 or -(2 + (vb.MaxVisibleItems or #vb.Items) * 22))
                      }):Play()
                      vc:Create(vh, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                        CanvasSize = vh.CanvasSize + UDim2.new(0, 0, 0, 2 + (vb.MaxVisibleItems or #vb.Items) * 22 or -(2 + (vb.MaxVisibleItems or #vb.Items) * 22))
                      }):Play()
                      wait(0,5)
                      va = false
                      vj()
                      vk()
                    end
                  end,
                  AddItem = function(a, b)
                    a = a
                    if va then
                      table.insert(vb.Add, {
                        Name = b,
                        Holder = Instance.new("TextButton")
                      })
                      return
                    end
                    Instance.new("TextButton").Name = "Dropdown_Item"
                    Instance.new("TextButton").BackgroundColor3 = Color3.fromRGB(25, 25, 25)
                    Instance.new("TextButton").Size = UDim2.new(1, 0, 0, 20)
                    Instance.new("TextButton").Font = vc.Settings.Font
                    Instance.new("TextButton").Text = b
                    Instance.new("TextButton").TextColor3 = vc.Settings.TextColor
                    Instance.new("TextButton").TextSize = vc.Settings.TextSize
                    Instance.new("TextButton").TextWrapped = true
                    Instance.new("TextButton").Parent = vd
                    Instance.new("TextButton").MouseButton1Click:Connect(function()
                      va.Text = vb
                      vc.Selected = vb
                      pcall(vc.Function, vb)
                    end)
                    Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("TextButton"), UDim.new(0, 5)
                    table.insert(vg.Items, {
                      Name = b,
                      Holder = Instance.new("TextButton")
                    })
                  end,
                  RemoveItem = function(a, b)
                    a = a
                    if va then
                      for fg, fh in next, vb.Items, nil do
                        if fh.Name == b then
                          table.insert(vc.Remove, fh)
                        else
                        end
                      end
                      return
                    end
                    for fg, fh in next, vb.Items, nil do
                      if fh.Name == b then
                        table.remove(vb.Items, fg)
                        fh.Holder:Destroy()
                      else
                      end
                    end
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = d,
                  MaxVisibleItems = 10,
                  Selected = nil,
                  Items = {},
                  Holder = Instance.new("Frame")
                }
              end,
              AddBind = function(a, b, c, d)
                a = a
                Instance.new("Frame").Name = "Bind_Holder"
                Instance.new("Frame").BackgroundColor3 = va.Settings.ItemHolderColor
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 30)
                Instance.new("Frame").Parent = vb
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(0, 5, 0,5, -7)
                Instance.new("TextLabel").Size = UDim2.new(1, -112, 0, 14)
                Instance.new("TextLabel").Font = va.Settings.Font
                Instance.new("TextLabel").Text = b
                Instance.new("TextLabel").TextColor3 = va.Settings.TextColor
                Instance.new("TextLabel").TextSize = va.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                Instance.new("TextLabel").TextXAlignment = Enum.TextXAlignment.Left
                Instance.new("TextBox").Parent, Instance.new("TextBox").Name = Instance.new("Frame"), "Box"
                Instance.new("TextBox").BackgroundColor3 = Color3.fromRGB(25, 25, 25)
                Instance.new("TextBox").Position = UDim2.new(1, -62, 0, 2)
                Instance.new("TextBox").Size = UDim2.new(0, 60, 1, -4)
                Instance.new("TextBox").ClearTextOnFocus = false
                Instance.new("TextBox").Font = va.Settings.Font
                Instance.new("TextBox").Text = ""
                Instance.new("TextBox").TextColor3 = va.Settings.TextColor
                Instance.new("TextBox").TextEditable = false
                Instance.new("TextBox").TextSize = va.Settings.TextSize
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("TextBox"), UDim.new(0, 5)
                vc.InputBegan:Connect(function(a, b)
                  a = a
                  if not b and a.KeyCode == va.Bind then
                    pcall(va.Function)
                  end
                end)
                {
                  Set = function(a, b)
                    a = a
                    va.Bind = b
                    vb.Text = b.Name
                    vb.Size = UDim2.new(0, vb.TextBounds.X + 10, 1, -4)
                    vb.Position = UDim2.new(1, -vb.AbsoluteSize.X - 2, 0, 2)
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = d,
                  Bind = c,
                  Holder = Instance.new("Frame")
                }:Set(c)
                return {
                  Set = function(a, b)
                    a = a
                    va.Bind = b
                    vb.Text = b.Name
                    vb.Size = UDim2.new(0, vb.TextBounds.X + 10, 1, -4)
                    vb.Position = UDim2.new(1, -vb.AbsoluteSize.X - 2, 0, 2)
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = d,
                  Bind = c,
                  Holder = Instance.new("Frame")
                }
              end,
              AddToggleBind = function(a, b, c, d, e)
                a = a
                vc.BindToggles[b] = d
                Instance.new("Frame").Name = "ToggleBind_Holder"
                Instance.new("Frame").BackgroundColor3 = vb.Settings.ItemHolderColor
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 30)
                Instance.new("Frame").Parent = vd
                Instance.new("Frame").InputBegan:Connect(function(a, b)
                  a = a
                  if not b and a.UserInputType == Enum.UserInputType.MouseButton1 then
                    va.Size = UDim2.new(0, 24, 0, 24)
                    va.Position = UDim2.new(1, -vb.AbsoluteSize.X - 29, 0, 3)
                  end
                end)
                Instance.new("Frame").InputEnded:Connect(function(a, b)
                  a = a
                  if not b and a.UserInputType == Enum.UserInputType.MouseButton1 then
                    va.BindToggles[vb] = not va.BindToggles[vb]
                    vc:Toggle(va.BindToggles[vb])
                    vd.Size = UDim2.new(0, 26, 0, 26)
                    vd.Position = UDim2.new(1, -ve.AbsoluteSize.X - 30, 0, 2)
                  end
                end)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(0, 5, 0,5, -7)
                Instance.new("TextLabel").Size = UDim2.new(1, -112, 0, 14)
                Instance.new("TextLabel").Font = vb.Settings.Font
                Instance.new("TextLabel").Text = b
                Instance.new("TextLabel").TextColor3 = vb.Settings.TextColor
                Instance.new("TextLabel").TextSize = vb.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                Instance.new("TextLabel").TextXAlignment = Enum.TextXAlignment.Left
                Instance.new("TextBox").Parent, Instance.new("TextBox").Name = Instance.new("Frame"), "Box"
                Instance.new("TextBox").BackgroundColor3 = vb.Settings.DefaultItemColor
                Instance.new("TextBox").Position = UDim2.new(1, -62, 0, 2)
                Instance.new("TextBox").Size = UDim2.new(0, 60, 1, -4)
                Instance.new("TextBox").ClearTextOnFocus = false
                Instance.new("TextBox").Font = vb.Settings.Font
                Instance.new("TextBox").Text = ""
                Instance.new("TextBox").TextColor3 = vb.Settings.TextColor
                Instance.new("TextBox").TextEditable = false
                Instance.new("TextBox").TextSize = vb.Settings.TextSize
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("TextBox"), UDim.new(0, 5)
                Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "ToggleBind_Indicator"
                Instance.new("Frame").BackgroundColor3 = vb.Settings.DefaultItemColor
                Instance.new("Frame").Position = UDim2.new(1, -90, 0, 2)
                Instance.new("Frame").Size = UDim2.new(0, 26, 0, 26)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                ve.InputBegan:Connect(function(a, b)
                  a = a
                  if not b and a.KeyCode == va.Bind and va.Toggled then
                    pcall(va.Function)
                  end
                end)
                {
                  Set = function(a, b)
                    a = a
                    va.Bind = b
                    vb.Text = b.Name
                    vb.Size = UDim2.new(0, vb.TextBounds.X + 10, 1, -4)
                    vb.Position = UDim2.new(1, -vb.AbsoluteSize.X - 2, 0, 2)
                    vc.Position = UDim2.new(1, -vb.AbsoluteSize.X - 30, 0, 2)
                  end,
                  Toggle = function(a, b)
                    a = a
                    if b then
                    end
                    CreateCircularRipple(va, vb.ThemeColor or vc.Settings.DefaultItemColor, b)
                    if b then
                      vc.ColourObjects[va] = "BackgroundColor3"
                    elseif vc.ColourObjects[va] then
                      vc.ColourObjects[va] = nil
                    end
                    vd.Toggled = b
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = e,
                  Toggled = d,
                  Bind = c,
                  Holder = Instance.new("Frame")
                }:Set(c)
                {
                  Set = function(a, b)
                    a = a
                    va.Bind = b
                    vb.Text = b.Name
                    vb.Size = UDim2.new(0, vb.TextBounds.X + 10, 1, -4)
                    vb.Position = UDim2.new(1, -vb.AbsoluteSize.X - 2, 0, 2)
                    vc.Position = UDim2.new(1, -vb.AbsoluteSize.X - 30, 0, 2)
                  end,
                  Toggle = function(a, b)
                    a = a
                    if b then
                    end
                    CreateCircularRipple(va, vb.ThemeColor or vc.Settings.DefaultItemColor, b)
                    if b then
                      vc.ColourObjects[va] = "BackgroundColor3"
                    elseif vc.ColourObjects[va] then
                      vc.ColourObjects[va] = nil
                    end
                    vd.Toggled = b
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = e,
                  Toggled = d,
                  Bind = c,
                  Holder = Instance.new("Frame")
                }:Toggle(d)
                return {
                  Set = function(a, b)
                    a = a
                    va.Bind = b
                    vb.Text = b.Name
                    vb.Size = UDim2.new(0, vb.TextBounds.X + 10, 1, -4)
                    vb.Position = UDim2.new(1, -vb.AbsoluteSize.X - 2, 0, 2)
                    vc.Position = UDim2.new(1, -vb.AbsoluteSize.X - 30, 0, 2)
                  end,
                  Toggle = function(a, b)
                    a = a
                    if b then
                    end
                    CreateCircularRipple(va, vb.ThemeColor or vc.Settings.DefaultItemColor, b)
                    if b then
                      vc.ColourObjects[va] = "BackgroundColor3"
                    elseif vc.ColourObjects[va] then
                      vc.ColourObjects[va] = nil
                    end
                    vd.Toggled = b
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = e,
                  Toggled = d,
                  Bind = c,
                  Holder = Instance.new("Frame")
                }
              end
            }
          end
        })
        return {
          Toggles = {},
          BindToggles = {},
          SliderToggles = {},
          Show = function(a)
            a = a
            for fe, fg in next, va.Tabs, nil do
              fg.Tab.Visible = fg.Tab == vb
              vc:Create(fg.Indicator, TweenInfo.new(0,2), {
                BackgroundColor3 = vd.Settings.TabButtonIndicatorColors["Enabled" or "Disabled"]
              }):Play()
            end
          end,
          Hide = function(a)
            a = a
            va.Visible = false
          end,
          IsShown = function(a)
            a = a
            return va.Visible
          end,
          Indicator = Instance.new("Frame"),
          Tab = Instance.new("ScrollingFrame"),
          Holder = vd,
          AddCategory = function(a, b)
            a = a
            Instance.new("Frame").Name = "Category_Frame"
            Instance.new("Frame").BackgroundColor3 = vb.Settings.CategoryColor
            Instance.new("Frame").Position = UDim2.new(0, 5, 0, 5)
            Instance.new("Frame").Size = UDim2.new(1, 0, 0, 35)
            Instance.new("Frame").Parent = va
            Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
            Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Category_Title"
            Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            Instance.new("TextLabel").BackgroundTransparency = 1
            Instance.new("TextLabel").Position = UDim2.new(0, 2, 0, 8)
            Instance.new("TextLabel").Size = UDim2.new(1, -4, 0, 14)
            Instance.new("TextLabel").Font = vb.Settings.CategoryFont
            Instance.new("TextLabel").Text = b
            Instance.new("TextLabel").TextColor3 = vb.Settings.TextColor
            Instance.new("TextLabel").TextSize = vb.Settings.TextSize
            Instance.new("TextLabel").TextWrapped = true
            Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "Category_List"
            Instance.new("Frame").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            Instance.new("Frame").BackgroundTransparency = 1
            Instance.new("Frame").Position = UDim2.new(0, 0, 0, 30)
            Instance.new("Frame").Size = UDim2.new(1, 0, 1, -30)
            Instance.new("Frame").ChildAdded:Connect(function(a)
              a = a
              if not a.ClassName:find("UI") then
                va.Size = va.Size + UDim2.new(0, 0, 0, a.AbsoluteSize.Y + 5)
                vb.CanvasSize = vb.CanvasSize + UDim2.new(0, 0, 0, a.AbsoluteSize.Y + 5)
              end
            end)
            Instance.new("UIListLayout").Parent = Instance.new("Frame")
            Instance.new("UIListLayout").SortOrder = Enum.SortOrder.LayoutOrder
            Instance.new("UIPadding").Parent, Instance.new("UIListLayout").Padding = Instance.new("Frame"), UDim.new(0, 5)
            Instance.new("UIPadding").PaddingBottom = UDim.new(0, 5)
            Instance.new("UIPadding").PaddingLeft = UDim.new(0, 5)
            Instance.new("UIPadding").PaddingRight = UDim.new(0, 5)
            Instance.new("UIPadding").PaddingTop = UDim.new(0, 5)
            return {
              Frame = Instance.new("Frame"),
              Holder = va,
              AddButton = function(a, b, c)
                a = a
                Instance.new("Frame").Name = "Button_Holder"
                Instance.new("Frame").BackgroundColor3 = va.Settings.ItemHolderColor
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 30)
                Instance.new("Frame").Parent = vb
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("TextButton").Parent, Instance.new("TextButton").Name = Instance.new("Frame"), "Button"
                Instance.new("TextButton").AutoButtonColor = false
                Instance.new("TextButton").BackgroundColor3 = va.Settings.DefaultItemColor
                Instance.new("TextButton").Position = UDim2.new(0, 2, 0, 2)
                Instance.new("TextButton").Size = UDim2.new(1, -4, 1, -4)
                Instance.new("TextButton").Font = va.Settings.Font
                Instance.new("TextButton").Text = b
                Instance.new("TextButton").TextColor3 = va.Settings.TextColor
                Instance.new("TextButton").TextSize = va.Settings.TextSize
                Instance.new("TextButton").TextWrapped = true
                Instance.new("TextButton").MouseButton1Down:Connect(function()
                  va.TextSize = vb.Settings.TextSize - 1
                end)
                Instance.new("TextButton").MouseLeave:Connect(function()
                  va.TextSize = vb.Settings.TextSize
                end)
                Instance.new("TextButton").MouseButton1Up:Connect(function()
                  pcall(va.Function)
                  vb.TextSize = vc.Settings.TextSize
                  CreateWaveRipple(vb, 0,8, Color3.fromRGB(255, 255, 255))
                end)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("TextButton"), UDim.new(0, 5)
                return {
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = c,
                  Button = Instance.new("TextButton"),
                  Holder = Instance.new("Frame")
                }
              end,
              AddToggle = function(a, b, c, d)
                a = a
                vc.Toggles[b] = c
                Instance.new("Frame").Name = b
                Instance.new("Frame").BackgroundColor3 = Color3.fromRGB(20, 20, 20)
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 30)
                Instance.new("Frame").Parent = vd
                Instance.new("Frame").InputBegan:Connect(function(a, b)
                  a = a
                  if not b and a.UserInputType == Enum.UserInputType.MouseButton1 then
                    va.Size = UDim2.new(0, 24, 0, 24)
                    va.Position = UDim2.new(1, -27, 0, 3)
                  end
                end)
                Instance.new("Frame").InputEnded:Connect(function(a, b)
                  a = a
                  if not b and a.UserInputType == Enum.UserInputType.MouseButton1 then
                    va.Toggles[vb] = not va.Toggles[vb]
                    vc:Set(va.Toggles[vb])
                    vd.Size = UDim2.new(0, 26, 0, 26)
                    vd.Position = UDim2.new(1, -28, 0, 2)
                  end
                end)
                Instance.new("Frame").MouseLeave:Connect(function()
                  va.Size = UDim2.new(0, 26, 0, 26)
                  va.Position = UDim2.new(1, -28, 0, 2)
                end)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(0, 5, 0,5, -7)
                Instance.new("TextLabel").Size = UDim2.new(1, -38, 0, 14)
                Instance.new("TextLabel").Font = Enum.Font.SourceSans
                Instance.new("TextLabel").Text = b
                Instance.new("TextLabel").TextColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").TextSize = 14
                Instance.new("TextLabel").TextWrapped = true
                Instance.new("TextLabel").TextXAlignment = Enum.TextXAlignment.Left
                Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "Toggle_Indicator"
                Instance.new("Frame").BackgroundColor3 = vb.Settings.DefaultItemColor
                Instance.new("Frame").Position = UDim2.new(1, -28, 0, 2)
                Instance.new("Frame").Size = UDim2.new(0, 26, 0, 26)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                {
                  Set = function(a, b)
                    a = a
                    if b then
                    end
                    CreateCircularRipple(va, vb.ThemeColor or vc.Settings.DefaultItemColor, b)
                    if b then
                      vc.ColourObjects[va] = "BackgroundColor3"
                    elseif vc.ColourObjects[va] then
                      vc.ColourObjects[va] = nil
                    end
                    vd.Toggled = b
                    pcall(vd.Function, b)
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = d,
                  Toggled = c,
                  Holder = Instance.new("Frame")
                }:Set(c)
                return {
                  Set = function(a, b)
                    a = a
                    if b then
                    end
                    CreateCircularRipple(va, vb.ThemeColor or vc.Settings.DefaultItemColor, b)
                    if b then
                      vc.ColourObjects[va] = "BackgroundColor3"
                    elseif vc.ColourObjects[va] then
                      vc.ColourObjects[va] = nil
                    end
                    vd.Toggled = b
                    pcall(vd.Function, b)
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = d,
                  Toggled = c,
                  Holder = Instance.new("Frame")
                }
              end,
              AddBox = function(a, b, c)
                a = a
                Instance.new("Frame").Name = "Box_Holder"
                Instance.new("Frame").BackgroundColor3 = Color3.fromRGB(20, 20, 20)
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 30)
                Instance.new("Frame").Parent = va
                Instance.new("Frame").MouseEnter:Connect(function()
                  ve:Create(vg, TweenInfo.new(0,2), {
                    Size = UDim2.new(1, -(vc or vd), 1, -4),
                    Position = UDim2.new(0, vc or vd, 0, 2)
                  }):Play()
                end)
                Instance.new("Frame").MouseLeave:Connect(function()
                  if va:IsFocused() then
                    va.FocusLost:Wait()
                  end
                  vb:Create(va, TweenInfo.new(0,2), {
                    Size = UDim2.new(0, vc, 1, -4),
                    Position = UDim2.new(1, -vc - 2, 0, 2)
                  }):Play()
                end)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(0, 5, 0,5, -7)
                Instance.new("TextLabel").Size = UDim2.new(1, -112, 0, 14)
                Instance.new("TextLabel").Font = vc.Settings.Font
                Instance.new("TextLabel").Text = b
                Instance.new("TextLabel").TextColor3 = vc.Settings.TextColor
                Instance.new("TextLabel").TextSize = vc.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                Instance.new("TextLabel").TextXAlignment = Enum.TextXAlignment.Left
                Instance.new("TextLabel").Size = UDim2.new(0, Instance.new("TextLabel").TextBounds.X + 2, 0, 14)
                Instance.new("TextBox").Parent, Instance.new("TextBox").Name = Instance.new("Frame"), "Box"
                Instance.new("TextBox").BackgroundColor3 = vc.Settings.DefaultItemColor
                Instance.new("TextBox").Position = UDim2.new(1, -102, 0, 2)
                Instance.new("TextBox").Size = UDim2.new(0, 100, 1, -4)
                Instance.new("TextBox").Font = vc.Settings.Font
                Instance.new("TextBox").Text = ""
                Instance.new("TextBox").TextColor3 = vc.Settings.TextColor
                Instance.new("TextBox").TextSize = vc.Settings.TextSize
                Instance.new("TextBox").TextWrapped = true
                Instance.new("TextBox").FocusLost:Connect(function()
                  pcall(va.Function, vb.Text)
                end)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("TextBox"), UDim.new(0, 5)
                return {
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = c,
                  Box = Instance.new("TextBox"),
                  Holder = Instance.new("Frame")
                }
              end,
              AddLabel = function(a, b)
                a = a
                Instance.new("Frame").Name = "Label_Holder"
                Instance.new("Frame").BackgroundColor3 = va.Settings.ItemHolderColor
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 18)
                Instance.new("Frame").Parent = vb
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(0, 5, 0,5, -7)
                Instance.new("TextLabel").Size = UDim2.new(1, -10, 0, 14)
                Instance.new("TextLabel").Font = va.Settings.Font
                Instance.new("TextLabel").Text = b
                Instance.new("TextLabel").TextColor3 = va.Settings.TextColor
                Instance.new("TextLabel").TextSize = va.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                return {
                  Label = Instance.new("TextLabel"),
                  Holder = Instance.new("Frame")
                }
              end,
              AddDualLabel = function(a, b)
                a = a
                Instance.new("Frame").Name = "DualLabel_Holder"
                Instance.new("Frame").BackgroundColor3 = va.Settings.ItemHolderColor
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 18)
                Instance.new("Frame").Parent = vb
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label1"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(0, 5, 0,5, -7)
                Instance.new("TextLabel").Size = UDim2.new(0,5, -5, 0, 14)
                Instance.new("TextLabel").Font = va.Settings.Font
                Instance.new("TextLabel").Text = b[1]
                Instance.new("TextLabel").TextColor3 = va.Settings.TextColor
                Instance.new("TextLabel").TextSize = va.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                Instance.new("TextLabel").TextXAlignment = Enum.TextXAlignment.Left
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label2"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(0,5, 0, 0,5, -7)
                Instance.new("TextLabel").Size = UDim2.new(0,5, -5, 0, 14)
                Instance.new("TextLabel").Font = va.Settings.Font
                Instance.new("TextLabel").Text = b[2]
                Instance.new("TextLabel").TextColor3 = va.Settings.TextColor
                Instance.new("TextLabel").TextSize = va.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                Instance.new("TextLabel").TextXAlignment = Enum.TextXAlignment.Right
                return {
                  Label2 = Instance.new("TextLabel"),
                  Label1 = Instance.new("TextLabel"),
                  Holder = Instance.new("Frame")
                }
              end,
              AddSlider = function(a, b, c, d, e, g, h)
                a = a
                Instance.new("Frame").Name = "Slider_Holder"
                Instance.new("Frame").BackgroundColor3 = vb.Settings.ItemHolderColor
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 30)
                Instance.new("Frame").Parent = vc
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "Slider_Background"
                Instance.new("Frame").BackgroundColor3 = vb.Settings.DefaultItemColor
                Instance.new("Frame").ClipsDescendants = true
                Instance.new("Frame").Position = UDim2.new(0, 5, 0, 18)
                Instance.new("Frame").Size = UDim2.new(1, -10, 1, -20)
                Instance.new("Frame").InputBegan:Connect(function(a, b)
                  a = a
                  repeat
                    if not b and a.UserInputType == Enum.UserInputType.MouseButton1 then
                      wait()
                      vc:Set(math.floor((vd + math.clamp((va.X - vb.AbsolutePosition.X) / vb.AbsoluteSize.X, 0, 1) * (ve - vd)) * 10) / 10)
                    end
                  until not vg:IsMouseButtonPressed(Enum.UserInputType.MouseButton1)
                end)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "Slider"
                Instance.new("Frame").BackgroundColor3 = vg.ThemeColor
                Instance.new("Frame").Size = UDim2.new(0,75, 0, 1, 0)
                vb.ColourObjects[Instance.new("Frame")] = "BackgroundColor3"
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(0, 5, 0, 2)
                Instance.new("TextLabel").Size = UDim2.new(1, -10, 0, 14)
                Instance.new("TextLabel").Font = vb.Settings.Font
                Instance.new("TextLabel").Text = ""
                Instance.new("TextLabel").TextColor3 = vb.Settings.TextColor
                Instance.new("TextLabel").TextSize = vb.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                {
                  Set = function(a, b)
                    a = a
                    b = va or vb
                    b = vb or vb
                    vd.Text = ve .. " - " .. tostring(vg.Value)
                    vh:Create(vj, TweenInfo.new(0,2, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                      Size = UDim2.new(1 - (va - b) / (va - vb), 0, 1, 0)
                    }):Play()
                    vg.Value = b
                    pcall(vg.Function, b)
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = h,
                  Value = e,
                  Holder = Instance.new("Frame")
                }:Set(e)
                return {
                  Set = function(a, b)
                    a = a
                    b = va or vb
                    b = vb or vb
                    vd.Text = ve .. " - " .. tostring(vg.Value)
                    vh:Create(vj, TweenInfo.new(0,2, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                      Size = UDim2.new(1 - (va - b) / (va - vb), 0, 1, 0)
                    }):Play()
                    vg.Value = b
                    pcall(vg.Function, b)
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = h,
                  Value = e,
                  Holder = Instance.new("Frame")
                }
              end,
              AddToggleSlider = function(a, b, c, d, e, g, h, j)
                a = a
                Instance.new("Frame").Name = "ToggleSlider_Holder"
                Instance.new("Frame").BackgroundColor3 = vc.Settings.ItemHolderColor
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 30)
                Instance.new("Frame").Parent = vd
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "Slider_Background"
                Instance.new("Frame").BackgroundColor3 = vc.Settings.DefaultItemColor
                Instance.new("Frame").ClipsDescendants = true
                Instance.new("Frame").Position = UDim2.new(0, 30, 0, 18)
                Instance.new("Frame").Size = UDim2.new(1, -35, 1, -20)
                Instance.new("Frame").InputBegan:Connect(function(a, b)
                  a = a
                  repeat
                    if not b and a.UserInputType == Enum.UserInputType.MouseButton1 then
                      wait()
                      vc:Set(math.floor((vd + math.clamp((va.X - vb.AbsolutePosition.X) / vb.AbsoluteSize.X, 0, 1) * (ve - vd)) * 10) / 10)
                    end
                  until not vg:IsMouseButtonPressed(Enum.UserInputType.MouseButton1)
                end)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "Slider"
                Instance.new("Frame").BackgroundColor3 = vb.ThemeColor
                Instance.new("Frame").Size = UDim2.new(0,75, 0, 1, 0)
                vc.ColourObjects[Instance.new("Frame")] = "BackgroundColor3"
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(0, 30, 0, 2)
                Instance.new("TextLabel").Size = UDim2.new(1, -35, 0, 14)
                Instance.new("TextLabel").Font = vc.Settings.Font
                Instance.new("TextLabel").Text = ""
                Instance.new("TextLabel").TextColor3 = vc.Settings.TextColor
                Instance.new("TextLabel").TextSize = vc.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                Instance.new("TextButton").Parent, Instance.new("TextButton").Name = Instance.new("Frame"), "ToggleSlider_Indicator"
                Instance.new("TextButton").BackgroundColor3 = vc.Settings.DefaultItemColor
                Instance.new("TextButton").Position = UDim2.new(0, 2, 0, 2)
                Instance.new("TextButton").Size = UDim2.new(0, 26, 0, 26)
                Instance.new("TextButton").AutoButtonColor = false
                Instance.new("TextButton").Font = vc.Settings.Font
                Instance.new("TextButton").Text = ""
                Instance.new("TextButton").MouseButton1Down:Connect(function()
                  va.Size = UDim2.new(0, 24, 0, 24)
                  va.Position = UDim2.new(0, 3, 0, 3)
                end)
                Instance.new("TextButton").MouseButton1Up:Connect(function()
                  va.Toggled = not va.Toggled
                  va:Toggle(va.Toggled)
                  vb.Size = UDim2.new(0, 26, 0, 26)
                  vb.Position = UDim2.new(0, 2, 0, 2)
                end)
                Instance.new("Frame").MouseLeave:Connect(function()
                  va.Size = UDim2.new(0, 26, 0, 26)
                  va.Position = UDim2.new(0, 2, 0, 2)
                end)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("TextButton"), UDim.new(0, 5)
                {
                  Set = function(a, b)
                    a = a
                    b = va or vb
                    b = vb or vb
                    if b == ve then
                      vg.Text = vh .. " - " .. tostring(vd.Value)
                      vj:Create(vk, TweenInfo.new(0,2, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                        Size = UDim2.new(1 - (va - b) / (va - vb), 0, 1, 0)
                      }):Play()
                      vd.Value = b
                      pcall(vd.Function, b)
                    end
                  end,
                  Toggle = function(a, b)
                    a = a
                    if b then
                    end
                    CreateCircularRipple(va, vb.ThemeColor or vc.Settings.DefaultItemColor, b)
                    if b then
                      vc.ColourObjects[va] = "BackgroundColor3"
                    elseif vc.ColourObjects[va] then
                      vc.ColourObjects[va] = nil
                    end
                    vd.Toggled = b
                    vd:Set(vd.Value)
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = j,
                  Toggled = h,
                  Value = e,
                  Holder = Instance.new("Frame")
                }:Set(e)
                return {
                  Set = function(a, b)
                    a = a
                    b = va or vb
                    b = vb or vb
                    if b == ve then
                      vg.Text = vh .. " - " .. tostring(vd.Value)
                      vj:Create(vk, TweenInfo.new(0,2, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                        Size = UDim2.new(1 - (va - b) / (va - vb), 0, 1, 0)
                      }):Play()
                      vd.Value = b
                      pcall(vd.Function, b)
                    end
                  end,
                  Toggle = function(a, b)
                    a = a
                    if b then
                    end
                    CreateCircularRipple(va, vb.ThemeColor or vc.Settings.DefaultItemColor, b)
                    if b then
                      vc.ColourObjects[va] = "BackgroundColor3"
                    elseif vc.ColourObjects[va] then
                      vc.ColourObjects[va] = nil
                    end
                    vd.Toggled = b
                    vd:Set(vd.Value)
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = j,
                  Toggled = h,
                  Value = e,
                  Holder = Instance.new("Frame")
                }
              end,
              AddDropdown = function(a, b, c, d)
                a = a
                Instance.new("Frame").Name = "Dropdown_Holder"
                Instance.new("Frame").BackgroundColor3 = vd.Settings.ItemHolderColor
                Instance.new("Frame").ClipsDescendants = true
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 30)
                Instance.new("Frame").Parent = ve
                Instance.new("Frame").InputBegan:Connect(function(a, b)
                  a = a
                  if not b and a.UserInputType == Enum.UserInputType.MouseButton1 and not va then
                    vb = not vb
                    vc:Toggle(vb)
                  end
                end)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "Labels_Holder"
                Instance.new("Frame").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("Frame").BackgroundTransparency = 1
                Instance.new("Frame").Position = UDim2.new(0, 2, 0, 0)
                Instance.new("Frame").Size = UDim2.new(1, -30, 0, 30)
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").BorderColor3 = Color3.fromRGB(27, 42, 53)
                Instance.new("TextLabel").Position = UDim2.new(0, 5, 0,5, -7)
                Instance.new("TextLabel").Size = UDim2.new(0,5, -2, 0, 14)
                Instance.new("TextLabel").Font = vd.Settings.Font
                Instance.new("TextLabel").Text = b
                Instance.new("TextLabel").TextColor3 = vd.Settings.TextColor
                Instance.new("TextLabel").TextSize = vd.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                Instance.new("TextLabel").TextXAlignment = Enum.TextXAlignment.Left
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Selected_Display"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").BorderColor3 = Color3.fromRGB(27, 42, 53)
                Instance.new("TextLabel").Position = UDim2.new(0,5, 3, 0, 8)
                Instance.new("TextLabel").Size = UDim2.new(0,5, -5, 0, 14)
                Instance.new("TextLabel").Font = vd.Settings.Font
                Instance.new("TextLabel").Text = ""
                Instance.new("TextLabel").TextColor3 = vd.Settings.TextColor
                Instance.new("TextLabel").TextSize = vd.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                Instance.new("TextLabel").TextXAlignment = Enum.TextXAlignment.Right
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Dropdown_Indicator"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(1, -28, 0, 2)
                Instance.new("TextLabel").Rotation = -90
                Instance.new("TextLabel").Size = UDim2.new(0, 26, 0, 26)
                Instance.new("TextLabel").Font = vd.Settings.DropdownIndicatorFont
                Instance.new("TextLabel").Text = "<"
                Instance.new("TextLabel").TextColor3 = vd.Settings.TextColor
                Instance.new("TextLabel").TextSize = vd.Settings.DropdownIndicatorTextSize
                Instance.new("ScrollingFrame").Parent, Instance.new("ScrollingFrame").Name = Instance.new("Frame"), "Dropdown_List"
                Instance.new("ScrollingFrame").Active = true
                Instance.new("ScrollingFrame").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("ScrollingFrame").BackgroundTransparency = 1
                Instance.new("ScrollingFrame").BorderSizePixel = 0
                Instance.new("ScrollingFrame").Position = UDim2.new(0, 0, 0, 30)
                Instance.new("ScrollingFrame").Size = UDim2.new(1, 0, 1, -30)
                Instance.new("ScrollingFrame").CanvasSize = UDim2.new(0, 0, 0, 2)
                Instance.new("ScrollingFrame").ScrollBarImageColor3 = Color3.fromRGB(0, 0, 0)
                Instance.new("ScrollingFrame").ScrollBarThickness = 5
                Instance.new("ScrollingFrame").ChildAdded:Connect(function(a)
                  a = a
                  if not a.ClassName:find("UI") then
                    va(UDim2.new(0, 0, 0, a.AbsoluteSize.Y + 2))
                  end
                end)
                Instance.new("ScrollingFrame").ChildRemoved:Connect(function(a)
                  a = a
                  if not a.ClassName:find("UI") then
                    va(UDim2.new(0, 0, 0, -a.AbsoluteSize.Y - 2))
                  end
                end)
                Instance.new("UIPadding").Parent = Instance.new("ScrollingFrame")
                Instance.new("UIPadding").PaddingBottom = UDim.new(0, 2)
                Instance.new("UIPadding").PaddingLeft = UDim.new(0, 2)
                Instance.new("UIPadding").PaddingRight = UDim.new(0, 2)
                Instance.new("UIListLayout").Parent, Instance.new("UIPadding").PaddingTop = Instance.new("ScrollingFrame"), UDim.new(0, 2)
                Instance.new("UIListLayout").SortOrder = Enum.SortOrder.LayoutOrder
                Instance.new("UIListLayout").Padding = UDim.new(0, 2)
                for fQ, fW in next, c, nil do
                  {
                    Toggle = function(a, b)
                      a = a
                      if not va then
                        va = true
                        if b then
                        end
                        if b then
                        end
                        vc:Create(vd, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                          Rotation = 0 or -90
                        }):Play()
                        vc:Create(ve, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                          Size = ve.Size + UDim2.new(0, 0, 0, 2 + (vb.MaxVisibleItems or #vb.Items) * 22 or -(2 + (vb.MaxVisibleItems or #vb.Items) * 22))
                        }):Play()
                        vc:Create(vg, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                          Size = vg.Size + UDim2.new(0, 0, 0, 2 + (vb.MaxVisibleItems or #vb.Items) * 22 or -(2 + (vb.MaxVisibleItems or #vb.Items) * 22))
                        }):Play()
                        vc:Create(vh, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                          CanvasSize = vh.CanvasSize + UDim2.new(0, 0, 0, 2 + (vb.MaxVisibleItems or #vb.Items) * 22 or -(2 + (vb.MaxVisibleItems or #vb.Items) * 22))
                        }):Play()
                        wait(0,5)
                        va = false
                        vj()
                        vk()
                      end
                    end,
                    AddItem = function(a, b)
                      a = a
                      if va then
                        table.insert(vb.Add, {
                          Name = b,
                          Holder = Instance.new("TextButton")
                        })
                        return
                      end
                      Instance.new("TextButton").Name = "Dropdown_Item"
                      Instance.new("TextButton").BackgroundColor3 = Color3.fromRGB(25, 25, 25)
                      Instance.new("TextButton").Size = UDim2.new(1, 0, 0, 20)
                      Instance.new("TextButton").Font = vc.Settings.Font
                      Instance.new("TextButton").Text = b
                      Instance.new("TextButton").TextColor3 = vc.Settings.TextColor
                      Instance.new("TextButton").TextSize = vc.Settings.TextSize
                      Instance.new("TextButton").TextWrapped = true
                      Instance.new("TextButton").Parent = vd
                      Instance.new("TextButton").MouseButton1Click:Connect(function()
                        va.Text = vb
                        vc.Selected = vb
                        pcall(vc.Function, vb)
                      end)
                      Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("TextButton"), UDim.new(0, 5)
                      table.insert(vg.Items, {
                        Name = b,
                        Holder = Instance.new("TextButton")
                      })
                    end,
                    RemoveItem = function(a, b)
                      a = a
                      if va then
                        for fg, fh in next, vb.Items, nil do
                          if fh.Name == b then
                            table.insert(vc.Remove, fh)
                          else
                          end
                        end
                        return
                      end
                      for fg, fh in next, vb.Items, nil do
                        if fh.Name == b then
                          table.remove(vb.Items, fg)
                          fh.Holder:Destroy()
                        else
                        end
                      end
                    end,
                    AddToolTip = function(a, b)
                      a = a
                      AddToolTip(va, vb, b)
                    end,
                    Function = d,
                    MaxVisibleItems = 10,
                    Selected = nil,
                    Items = {},
                    Holder = Instance.new("Frame")
                  }:AddItem(fW)
                end
                return {
                  Toggle = function(a, b)
                    a = a
                    if not va then
                      va = true
                      if b then
                      end
                      if b then
                      end
                      vc:Create(vd, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                        Rotation = 0 or -90
                      }):Play()
                      vc:Create(ve, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                        Size = ve.Size + UDim2.new(0, 0, 0, 2 + (vb.MaxVisibleItems or #vb.Items) * 22 or -(2 + (vb.MaxVisibleItems or #vb.Items) * 22))
                      }):Play()
                      vc:Create(vg, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                        Size = vg.Size + UDim2.new(0, 0, 0, 2 + (vb.MaxVisibleItems or #vb.Items) * 22 or -(2 + (vb.MaxVisibleItems or #vb.Items) * 22))
                      }):Play()
                      vc:Create(vh, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                        CanvasSize = vh.CanvasSize + UDim2.new(0, 0, 0, 2 + (vb.MaxVisibleItems or #vb.Items) * 22 or -(2 + (vb.MaxVisibleItems or #vb.Items) * 22))
                      }):Play()
                      wait(0,5)
                      va = false
                      vj()
                      vk()
                    end
                  end,
                  AddItem = function(a, b)
                    a = a
                    if va then
                      table.insert(vb.Add, {
                        Name = b,
                        Holder = Instance.new("TextButton")
                      })
                      return
                    end
                    Instance.new("TextButton").Name = "Dropdown_Item"
                    Instance.new("TextButton").BackgroundColor3 = Color3.fromRGB(25, 25, 25)
                    Instance.new("TextButton").Size = UDim2.new(1, 0, 0, 20)
                    Instance.new("TextButton").Font = vc.Settings.Font
                    Instance.new("TextButton").Text = b
                    Instance.new("TextButton").TextColor3 = vc.Settings.TextColor
                    Instance.new("TextButton").TextSize = vc.Settings.TextSize
                    Instance.new("TextButton").TextWrapped = true
                    Instance.new("TextButton").Parent = vd
                    Instance.new("TextButton").MouseButton1Click:Connect(function()
                      va.Text = vb
                      vc.Selected = vb
                      pcall(vc.Function, vb)
                    end)
                    Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("TextButton"), UDim.new(0, 5)
                    table.insert(vg.Items, {
                      Name = b,
                      Holder = Instance.new("TextButton")
                    })
                  end,
                  RemoveItem = function(a, b)
                    a = a
                    if va then
                      for fg, fh in next, vb.Items, nil do
                        if fh.Name == b then
                          table.insert(vc.Remove, fh)
                        else
                        end
                      end
                      return
                    end
                    for fg, fh in next, vb.Items, nil do
                      if fh.Name == b then
                        table.remove(vb.Items, fg)
                        fh.Holder:Destroy()
                      else
                      end
                    end
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = d,
                  MaxVisibleItems = 10,
                  Selected = nil,
                  Items = {},
                  Holder = Instance.new("Frame")
                }
              end,
              AddBind = function(a, b, c, d)
                a = a
                Instance.new("Frame").Name = "Bind_Holder"
                Instance.new("Frame").BackgroundColor3 = va.Settings.ItemHolderColor
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 30)
                Instance.new("Frame").Parent = vb
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(0, 5, 0,5, -7)
                Instance.new("TextLabel").Size = UDim2.new(1, -112, 0, 14)
                Instance.new("TextLabel").Font = va.Settings.Font
                Instance.new("TextLabel").Text = b
                Instance.new("TextLabel").TextColor3 = va.Settings.TextColor
                Instance.new("TextLabel").TextSize = va.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                Instance.new("TextLabel").TextXAlignment = Enum.TextXAlignment.Left
                Instance.new("TextBox").Parent, Instance.new("TextBox").Name = Instance.new("Frame"), "Box"
                Instance.new("TextBox").BackgroundColor3 = Color3.fromRGB(25, 25, 25)
                Instance.new("TextBox").Position = UDim2.new(1, -62, 0, 2)
                Instance.new("TextBox").Size = UDim2.new(0, 60, 1, -4)
                Instance.new("TextBox").ClearTextOnFocus = false
                Instance.new("TextBox").Font = va.Settings.Font
                Instance.new("TextBox").Text = ""
                Instance.new("TextBox").TextColor3 = va.Settings.TextColor
                Instance.new("TextBox").TextEditable = false
                Instance.new("TextBox").TextSize = va.Settings.TextSize
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("TextBox"), UDim.new(0, 5)
                vc.InputBegan:Connect(function(a, b)
                  a = a
                  if not b and a.KeyCode == va.Bind then
                    pcall(va.Function)
                  end
                end)
                {
                  Set = function(a, b)
                    a = a
                    va.Bind = b
                    vb.Text = b.Name
                    vb.Size = UDim2.new(0, vb.TextBounds.X + 10, 1, -4)
                    vb.Position = UDim2.new(1, -vb.AbsoluteSize.X - 2, 0, 2)
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = d,
                  Bind = c,
                  Holder = Instance.new("Frame")
                }:Set(c)
                return {
                  Set = function(a, b)
                    a = a
                    va.Bind = b
                    vb.Text = b.Name
                    vb.Size = UDim2.new(0, vb.TextBounds.X + 10, 1, -4)
                    vb.Position = UDim2.new(1, -vb.AbsoluteSize.X - 2, 0, 2)
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = d,
                  Bind = c,
                  Holder = Instance.new("Frame")
                }
              end,
              AddToggleBind = function(a, b, c, d, e)
                a = a
                vc.BindToggles[b] = d
                Instance.new("Frame").Name = "ToggleBind_Holder"
                Instance.new("Frame").BackgroundColor3 = vb.Settings.ItemHolderColor
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 30)
                Instance.new("Frame").Parent = vd
                Instance.new("Frame").InputBegan:Connect(function(a, b)
                  a = a
                  if not b and a.UserInputType == Enum.UserInputType.MouseButton1 then
                    va.Size = UDim2.new(0, 24, 0, 24)
                    va.Position = UDim2.new(1, -vb.AbsoluteSize.X - 29, 0, 3)
                  end
                end)
                Instance.new("Frame").InputEnded:Connect(function(a, b)
                  a = a
                  if not b and a.UserInputType == Enum.UserInputType.MouseButton1 then
                    va.BindToggles[vb] = not va.BindToggles[vb]
                    vc:Toggle(va.BindToggles[vb])
                    vd.Size = UDim2.new(0, 26, 0, 26)
                    vd.Position = UDim2.new(1, -ve.AbsoluteSize.X - 30, 0, 2)
                  end
                end)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(0, 5, 0,5, -7)
                Instance.new("TextLabel").Size = UDim2.new(1, -112, 0, 14)
                Instance.new("TextLabel").Font = vb.Settings.Font
                Instance.new("TextLabel").Text = b
                Instance.new("TextLabel").TextColor3 = vb.Settings.TextColor
                Instance.new("TextLabel").TextSize = vb.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                Instance.new("TextLabel").TextXAlignment = Enum.TextXAlignment.Left
                Instance.new("TextBox").Parent, Instance.new("TextBox").Name = Instance.new("Frame"), "Box"
                Instance.new("TextBox").BackgroundColor3 = vb.Settings.DefaultItemColor
                Instance.new("TextBox").Position = UDim2.new(1, -62, 0, 2)
                Instance.new("TextBox").Size = UDim2.new(0, 60, 1, -4)
                Instance.new("TextBox").ClearTextOnFocus = false
                Instance.new("TextBox").Font = vb.Settings.Font
                Instance.new("TextBox").Text = ""
                Instance.new("TextBox").TextColor3 = vb.Settings.TextColor
                Instance.new("TextBox").TextEditable = false
                Instance.new("TextBox").TextSize = vb.Settings.TextSize
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("TextBox"), UDim.new(0, 5)
                Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "ToggleBind_Indicator"
                Instance.new("Frame").BackgroundColor3 = vb.Settings.DefaultItemColor
                Instance.new("Frame").Position = UDim2.new(1, -90, 0, 2)
                Instance.new("Frame").Size = UDim2.new(0, 26, 0, 26)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                ve.InputBegan:Connect(function(a, b)
                  a = a
                  if not b and a.KeyCode == va.Bind and va.Toggled then
                    pcall(va.Function)
                  end
                end)
                {
                  Set = function(a, b)
                    a = a
                    va.Bind = b
                    vb.Text = b.Name
                    vb.Size = UDim2.new(0, vb.TextBounds.X + 10, 1, -4)
                    vb.Position = UDim2.new(1, -vb.AbsoluteSize.X - 2, 0, 2)
                    vc.Position = UDim2.new(1, -vb.AbsoluteSize.X - 30, 0, 2)
                  end,
                  Toggle = function(a, b)
                    a = a
                    if b then
                    end
                    CreateCircularRipple(va, vb.ThemeColor or vc.Settings.DefaultItemColor, b)
                    if b then
                      vc.ColourObjects[va] = "BackgroundColor3"
                    elseif vc.ColourObjects[va] then
                      vc.ColourObjects[va] = nil
                    end
                    vd.Toggled = b
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = e,
                  Toggled = d,
                  Bind = c,
                  Holder = Instance.new("Frame")
                }:Set(c)
                {
                  Set = function(a, b)
                    a = a
                    va.Bind = b
                    vb.Text = b.Name
                    vb.Size = UDim2.new(0, vb.TextBounds.X + 10, 1, -4)
                    vb.Position = UDim2.new(1, -vb.AbsoluteSize.X - 2, 0, 2)
                    vc.Position = UDim2.new(1, -vb.AbsoluteSize.X - 30, 0, 2)
                  end,
                  Toggle = function(a, b)
                    a = a
                    if b then
                    end
                    CreateCircularRipple(va, vb.ThemeColor or vc.Settings.DefaultItemColor, b)
                    if b then
                      vc.ColourObjects[va] = "BackgroundColor3"
                    elseif vc.ColourObjects[va] then
                      vc.ColourObjects[va] = nil
                    end
                    vd.Toggled = b
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = e,
                  Toggled = d,
                  Bind = c,
                  Holder = Instance.new("Frame")
                }:Toggle(d)
                return {
                  Set = function(a, b)
                    a = a
                    va.Bind = b
                    vb.Text = b.Name
                    vb.Size = UDim2.new(0, vb.TextBounds.X + 10, 1, -4)
                    vb.Position = UDim2.new(1, -vb.AbsoluteSize.X - 2, 0, 2)
                    vc.Position = UDim2.new(1, -vb.AbsoluteSize.X - 30, 0, 2)
                  end,
                  Toggle = function(a, b)
                    a = a
                    if b then
                    end
                    CreateCircularRipple(va, vb.ThemeColor or vc.Settings.DefaultItemColor, b)
                    if b then
                      vc.ColourObjects[va] = "BackgroundColor3"
                    elseif vc.ColourObjects[va] then
                      vc.ColourObjects[va] = nil
                    end
                    vd.Toggled = b
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = e,
                  Toggled = d,
                  Bind = c,
                  Holder = Instance.new("Frame")
                }
              end
            }
          end
        }
      end
    }.ThemeColor
    Instance.new("TextLabel").TextSize = vb.Settings.TitleTextSize
    vb.ColourObjects[Instance.new("TextLabel")] = "TextColor3"
    Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "Top_Line"
    Instance.new("Frame").BorderSizePixel = 0
    Instance.new("Frame").Position = UDim2.new(0, 0, 1, 0)
    Instance.new("Frame").Size = UDim2.new(1, 0, 0, 2)
    vb.ColourObjects[Instance.new("Frame")] = "BackgroundColor3"
    Instance.new("TextLabel").Size = UDim2.new(0, Instance.new("TextLabel").TextBounds.X, 0, 14)
    Instance.new("TextLabel").Size = UDim2.new(0, Instance.new("TextLabel").TextBounds.X, 0, 14)
    Instance.new("TextLabel").Position = UDim2.new(0, Instance.new("TextLabel").TextBounds.X + 3, 0, 0)
    Instance.new("Frame").Size = UDim2.new(0, Instance.new("TextLabel").TextBounds.X + 3 + Instance.new("TextLabel").TextBounds.X, 0, 20)
    Instance.new("Frame").Position = UDim2.new(0,5, -Instance.new("Frame").AbsoluteSize.X / 2, 0,5, -Instance.new("Frame").AbsoluteSize.Y / 2)
    vd.InputBegan:Connect(function(a, b)
      a = a
      if not b and a.KeyCode == va.ToggleKey then
        vb.Toggled = not vb.Toggled
        vb:Toggle(vb.Toggled)
      end
    end)
    {
      Tabs = {},
      Toggle = function(a, b)
        a = a
        if b then
        end
        va:Create(vb, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
          Size = UDim2.new(0, 440 or vc.TextBounds.X + 3 + vd.TextBounds.X + 20, 0, 40)
        }):Play()
        if b then
        end
        va:Create(ve, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
          Size = UDim2.new(1, 0, 0, 350 or 0)
        }):Play()
        if b then
        end
        va:Create(vg, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
          Position = UDim2.new(0, 0, 1, -5 or -10)
        }):Play()
      end,
      SetTheme = function(a, b)
        a = a
        va.ThemeColor, vb.ThemeColor = b, b
        for fg, fh in next, va.ColourObjects, nil do
          fg[fh] = b
        end
      end,
      SetStartupTab = function(a, b)
        a = a
        for fg, fh in next, va.Tabs, nil do
          if fh == b then
            fh:Show()
          end
        end
      end,
      ThemeColor = b.ThemeColor,
      Toggled = true,
      ToggleKey = b.ToggleKey,
      Gui = vc,
      AddTab = function(a, b)
        a = a
        Instance.new("ScrollingFrame").Name = "Tab"
        Instance.new("ScrollingFrame").Parent = vd
        Instance.new("ScrollingFrame").Active = true
        Instance.new("ScrollingFrame").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        Instance.new("ScrollingFrame").BackgroundTransparency = 1
        Instance.new("ScrollingFrame").BorderSizePixel = 0
        Instance.new("ScrollingFrame").Size = UDim2.new(1, 0, 1, 0)
        Instance.new("ScrollingFrame").CanvasSize = UDim2.new(0, 0, 0, 0)
        Instance.new("ScrollingFrame").ScrollBarImageColor3 = Color3.fromRGB(0, 0, 0)
        Instance.new("ScrollingFrame").ScrollBarThickness = 5
        Instance.new("ScrollingFrame").Visible = false
        Instance.new("ScrollingFrame").ChildAdded:Connect(function(a)
          a = a
          if not a.ClassName:find("UI") then
            va.CanvasSize = va.CanvasSize + UDim2.new(0, 0, 0, a.AbsoluteSize.Y + 5)
          end
        end)
        Instance.new("UIListLayout").Parent = Instance.new("ScrollingFrame")
        Instance.new("UIListLayout").SortOrder = Enum.SortOrder.LayoutOrder
        Instance.new("UIListLayout").Padding = UDim.new(0, 5)
        Instance.new("UIPadding").Parent, Instance.new("UIPadding").Archivable = Instance.new("ScrollingFrame"), false
        Instance.new("UIPadding").PaddingBottom = UDim.new(0, 5)
        Instance.new("UIPadding").PaddingLeft = UDim.new(0, 5)
        Instance.new("UIPadding").PaddingRight = UDim.new(0, 5)
        Instance.new("UIPadding").PaddingTop = UDim.new(0, 5)
        Instance.new("Frame").Name = "Button_Holder"
        Instance.new("Frame").BackgroundColor3 = vc.Settings.TabButtonColor
        Instance.new("Frame").Size = UDim2.new(1, -10, 0, 30)
        Instance.new("Frame").Parent = ve
        Instance.new("Frame").MouseEnter:Connect(function()
          if not va:IsShown() then
            vb:Create(vc, TweenInfo.new(0,2), {
              BackgroundColor3 = vd.Settings.TabButtonIndicatorColors.Hover
            }):Play()
          end
        end)
        Instance.new("Frame").MouseLeave:Connect(function()
          if not va:IsShown() then
            vb:Create(vc, TweenInfo.new(0,2), {
              BackgroundColor3 = vd.Settings.TabButtonIndicatorColors.Disabled
            }):Play()
          end
        end)
        Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
        Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "Indicator"
        Instance.new("Frame").BackgroundColor3 = vc.Settings.TabButtonIndicatorColors.Disabled
        Instance.new("Frame").Position = UDim2.new(0, 4, 0, 8)
        Instance.new("Frame").Size = UDim2.new(0, 2, 1, -16)
        Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
        Instance.new("TextButton").Parent, Instance.new("TextButton").Name = Instance.new("Frame"), "Button"
        Instance.new("TextButton").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        Instance.new("TextButton").BackgroundTransparency = 1
        Instance.new("TextButton").Position = UDim2.new(0, 10, 0, 0)
        Instance.new("TextButton").Size = UDim2.new(1, -10, 1, 0)
        Instance.new("TextButton").Font = vc.Settings.Font
        Instance.new("TextButton").Text = b
        Instance.new("TextButton").TextColor3 = vc.Settings.TextColor
        Instance.new("TextButton").TextSize = vc.Settings.TextSize
        Instance.new("TextButton").MouseButton1Click:Connect(function()
          va:Show()
        end)
        table.insert(va.Tabs, {
          Toggles = {},
          BindToggles = {},
          SliderToggles = {},
          Show = function(a)
            a = a
            for fe, fg in next, va.Tabs, nil do
              fg.Tab.Visible = fg.Tab == vb
              vc:Create(fg.Indicator, TweenInfo.new(0,2), {
                BackgroundColor3 = vd.Settings.TabButtonIndicatorColors["Enabled" or "Disabled"]
              }):Play()
            end
          end,
          Hide = function(a)
            a = a
            va.Visible = false
          end,
          IsShown = function(a)
            a = a
            return va.Visible
          end,
          Indicator = Instance.new("Frame"),
          Tab = Instance.new("ScrollingFrame"),
          Holder = vd,
          AddCategory = function(a, b)
            a = a
            Instance.new("Frame").Name = "Category_Frame"
            Instance.new("Frame").BackgroundColor3 = vb.Settings.CategoryColor
            Instance.new("Frame").Position = UDim2.new(0, 5, 0, 5)
            Instance.new("Frame").Size = UDim2.new(1, 0, 0, 35)
            Instance.new("Frame").Parent = va
            Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
            Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Category_Title"
            Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            Instance.new("TextLabel").BackgroundTransparency = 1
            Instance.new("TextLabel").Position = UDim2.new(0, 2, 0, 8)
            Instance.new("TextLabel").Size = UDim2.new(1, -4, 0, 14)
            Instance.new("TextLabel").Font = vb.Settings.CategoryFont
            Instance.new("TextLabel").Text = b
            Instance.new("TextLabel").TextColor3 = vb.Settings.TextColor
            Instance.new("TextLabel").TextSize = vb.Settings.TextSize
            Instance.new("TextLabel").TextWrapped = true
            Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "Category_List"
            Instance.new("Frame").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            Instance.new("Frame").BackgroundTransparency = 1
            Instance.new("Frame").Position = UDim2.new(0, 0, 0, 30)
            Instance.new("Frame").Size = UDim2.new(1, 0, 1, -30)
            Instance.new("Frame").ChildAdded:Connect(function(a)
              a = a
              if not a.ClassName:find("UI") then
                va.Size = va.Size + UDim2.new(0, 0, 0, a.AbsoluteSize.Y + 5)
                vb.CanvasSize = vb.CanvasSize + UDim2.new(0, 0, 0, a.AbsoluteSize.Y + 5)
              end
            end)
            Instance.new("UIListLayout").Parent = Instance.new("Frame")
            Instance.new("UIListLayout").SortOrder = Enum.SortOrder.LayoutOrder
            Instance.new("UIPadding").Parent, Instance.new("UIListLayout").Padding = Instance.new("Frame"), UDim.new(0, 5)
            Instance.new("UIPadding").PaddingBottom = UDim.new(0, 5)
            Instance.new("UIPadding").PaddingLeft = UDim.new(0, 5)
            Instance.new("UIPadding").PaddingRight = UDim.new(0, 5)
            Instance.new("UIPadding").PaddingTop = UDim.new(0, 5)
            return {
              Frame = Instance.new("Frame"),
              Holder = va,
              AddButton = function(a, b, c)
                a = a
                Instance.new("Frame").Name = "Button_Holder"
                Instance.new("Frame").BackgroundColor3 = va.Settings.ItemHolderColor
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 30)
                Instance.new("Frame").Parent = vb
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("TextButton").Parent, Instance.new("TextButton").Name = Instance.new("Frame"), "Button"
                Instance.new("TextButton").AutoButtonColor = false
                Instance.new("TextButton").BackgroundColor3 = va.Settings.DefaultItemColor
                Instance.new("TextButton").Position = UDim2.new(0, 2, 0, 2)
                Instance.new("TextButton").Size = UDim2.new(1, -4, 1, -4)
                Instance.new("TextButton").Font = va.Settings.Font
                Instance.new("TextButton").Text = b
                Instance.new("TextButton").TextColor3 = va.Settings.TextColor
                Instance.new("TextButton").TextSize = va.Settings.TextSize
                Instance.new("TextButton").TextWrapped = true
                Instance.new("TextButton").MouseButton1Down:Connect(function()
                  va.TextSize = vb.Settings.TextSize - 1
                end)
                Instance.new("TextButton").MouseLeave:Connect(function()
                  va.TextSize = vb.Settings.TextSize
                end)
                Instance.new("TextButton").MouseButton1Up:Connect(function()
                  pcall(va.Function)
                  vb.TextSize = vc.Settings.TextSize
                  CreateWaveRipple(vb, 0,8, Color3.fromRGB(255, 255, 255))
                end)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("TextButton"), UDim.new(0, 5)
                return {
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = c,
                  Button = Instance.new("TextButton"),
                  Holder = Instance.new("Frame")
                }
              end,
              AddToggle = function(a, b, c, d)
                a = a
                vc.Toggles[b] = c
                Instance.new("Frame").Name = b
                Instance.new("Frame").BackgroundColor3 = Color3.fromRGB(20, 20, 20)
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 30)
                Instance.new("Frame").Parent = vd
                Instance.new("Frame").InputBegan:Connect(function(a, b)
                  a = a
                  if not b and a.UserInputType == Enum.UserInputType.MouseButton1 then
                    va.Size = UDim2.new(0, 24, 0, 24)
                    va.Position = UDim2.new(1, -27, 0, 3)
                  end
                end)
                Instance.new("Frame").InputEnded:Connect(function(a, b)
                  a = a
                  if not b and a.UserInputType == Enum.UserInputType.MouseButton1 then
                    va.Toggles[vb] = not va.Toggles[vb]
                    vc:Set(va.Toggles[vb])
                    vd.Size = UDim2.new(0, 26, 0, 26)
                    vd.Position = UDim2.new(1, -28, 0, 2)
                  end
                end)
                Instance.new("Frame").MouseLeave:Connect(function()
                  va.Size = UDim2.new(0, 26, 0, 26)
                  va.Position = UDim2.new(1, -28, 0, 2)
                end)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(0, 5, 0,5, -7)
                Instance.new("TextLabel").Size = UDim2.new(1, -38, 0, 14)
                Instance.new("TextLabel").Font = Enum.Font.SourceSans
                Instance.new("TextLabel").Text = b
                Instance.new("TextLabel").TextColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").TextSize = 14
                Instance.new("TextLabel").TextWrapped = true
                Instance.new("TextLabel").TextXAlignment = Enum.TextXAlignment.Left
                Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "Toggle_Indicator"
                Instance.new("Frame").BackgroundColor3 = vb.Settings.DefaultItemColor
                Instance.new("Frame").Position = UDim2.new(1, -28, 0, 2)
                Instance.new("Frame").Size = UDim2.new(0, 26, 0, 26)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                {
                  Set = function(a, b)
                    a = a
                    if b then
                    end
                    CreateCircularRipple(va, vb.ThemeColor or vc.Settings.DefaultItemColor, b)
                    if b then
                      vc.ColourObjects[va] = "BackgroundColor3"
                    elseif vc.ColourObjects[va] then
                      vc.ColourObjects[va] = nil
                    end
                    vd.Toggled = b
                    pcall(vd.Function, b)
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = d,
                  Toggled = c,
                  Holder = Instance.new("Frame")
                }:Set(c)
                return {
                  Set = function(a, b)
                    a = a
                    if b then
                    end
                    CreateCircularRipple(va, vb.ThemeColor or vc.Settings.DefaultItemColor, b)
                    if b then
                      vc.ColourObjects[va] = "BackgroundColor3"
                    elseif vc.ColourObjects[va] then
                      vc.ColourObjects[va] = nil
                    end
                    vd.Toggled = b
                    pcall(vd.Function, b)
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = d,
                  Toggled = c,
                  Holder = Instance.new("Frame")
                }
              end,
              AddBox = function(a, b, c)
                a = a
                Instance.new("Frame").Name = "Box_Holder"
                Instance.new("Frame").BackgroundColor3 = Color3.fromRGB(20, 20, 20)
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 30)
                Instance.new("Frame").Parent = va
                Instance.new("Frame").MouseEnter:Connect(function()
                  ve:Create(vg, TweenInfo.new(0,2), {
                    Size = UDim2.new(1, -(vc or vd), 1, -4),
                    Position = UDim2.new(0, vc or vd, 0, 2)
                  }):Play()
                end)
                Instance.new("Frame").MouseLeave:Connect(function()
                  if va:IsFocused() then
                    va.FocusLost:Wait()
                  end
                  vb:Create(va, TweenInfo.new(0,2), {
                    Size = UDim2.new(0, vc, 1, -4),
                    Position = UDim2.new(1, -vc - 2, 0, 2)
                  }):Play()
                end)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(0, 5, 0,5, -7)
                Instance.new("TextLabel").Size = UDim2.new(1, -112, 0, 14)
                Instance.new("TextLabel").Font = vc.Settings.Font
                Instance.new("TextLabel").Text = b
                Instance.new("TextLabel").TextColor3 = vc.Settings.TextColor
                Instance.new("TextLabel").TextSize = vc.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                Instance.new("TextLabel").TextXAlignment = Enum.TextXAlignment.Left
                Instance.new("TextLabel").Size = UDim2.new(0, Instance.new("TextLabel").TextBounds.X + 2, 0, 14)
                Instance.new("TextBox").Parent, Instance.new("TextBox").Name = Instance.new("Frame"), "Box"
                Instance.new("TextBox").BackgroundColor3 = vc.Settings.DefaultItemColor
                Instance.new("TextBox").Position = UDim2.new(1, -102, 0, 2)
                Instance.new("TextBox").Size = UDim2.new(0, 100, 1, -4)
                Instance.new("TextBox").Font = vc.Settings.Font
                Instance.new("TextBox").Text = ""
                Instance.new("TextBox").TextColor3 = vc.Settings.TextColor
                Instance.new("TextBox").TextSize = vc.Settings.TextSize
                Instance.new("TextBox").TextWrapped = true
                Instance.new("TextBox").FocusLost:Connect(function()
                  pcall(va.Function, vb.Text)
                end)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("TextBox"), UDim.new(0, 5)
                return {
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = c,
                  Box = Instance.new("TextBox"),
                  Holder = Instance.new("Frame")
                }
              end,
              AddLabel = function(a, b)
                a = a
                Instance.new("Frame").Name = "Label_Holder"
                Instance.new("Frame").BackgroundColor3 = va.Settings.ItemHolderColor
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 18)
                Instance.new("Frame").Parent = vb
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(0, 5, 0,5, -7)
                Instance.new("TextLabel").Size = UDim2.new(1, -10, 0, 14)
                Instance.new("TextLabel").Font = va.Settings.Font
                Instance.new("TextLabel").Text = b
                Instance.new("TextLabel").TextColor3 = va.Settings.TextColor
                Instance.new("TextLabel").TextSize = va.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                return {
                  Label = Instance.new("TextLabel"),
                  Holder = Instance.new("Frame")
                }
              end,
              AddDualLabel = function(a, b)
                a = a
                Instance.new("Frame").Name = "DualLabel_Holder"
                Instance.new("Frame").BackgroundColor3 = va.Settings.ItemHolderColor
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 18)
                Instance.new("Frame").Parent = vb
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label1"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(0, 5, 0,5, -7)
                Instance.new("TextLabel").Size = UDim2.new(0,5, -5, 0, 14)
                Instance.new("TextLabel").Font = va.Settings.Font
                Instance.new("TextLabel").Text = b[1]
                Instance.new("TextLabel").TextColor3 = va.Settings.TextColor
                Instance.new("TextLabel").TextSize = va.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                Instance.new("TextLabel").TextXAlignment = Enum.TextXAlignment.Left
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label2"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(0,5, 0, 0,5, -7)
                Instance.new("TextLabel").Size = UDim2.new(0,5, -5, 0, 14)
                Instance.new("TextLabel").Font = va.Settings.Font
                Instance.new("TextLabel").Text = b[2]
                Instance.new("TextLabel").TextColor3 = va.Settings.TextColor
                Instance.new("TextLabel").TextSize = va.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                Instance.new("TextLabel").TextXAlignment = Enum.TextXAlignment.Right
                return {
                  Label2 = Instance.new("TextLabel"),
                  Label1 = Instance.new("TextLabel"),
                  Holder = Instance.new("Frame")
                }
              end,
              AddSlider = function(a, b, c, d, e, g, h)
                a = a
                Instance.new("Frame").Name = "Slider_Holder"
                Instance.new("Frame").BackgroundColor3 = vb.Settings.ItemHolderColor
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 30)
                Instance.new("Frame").Parent = vc
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "Slider_Background"
                Instance.new("Frame").BackgroundColor3 = vb.Settings.DefaultItemColor
                Instance.new("Frame").ClipsDescendants = true
                Instance.new("Frame").Position = UDim2.new(0, 5, 0, 18)
                Instance.new("Frame").Size = UDim2.new(1, -10, 1, -20)
                Instance.new("Frame").InputBegan:Connect(function(a, b)
                  a = a
                  repeat
                    if not b and a.UserInputType == Enum.UserInputType.MouseButton1 then
                      wait()
                      vc:Set(math.floor((vd + math.clamp((va.X - vb.AbsolutePosition.X) / vb.AbsoluteSize.X, 0, 1) * (ve - vd)) * 10) / 10)
                    end
                  until not vg:IsMouseButtonPressed(Enum.UserInputType.MouseButton1)
                end)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "Slider"
                Instance.new("Frame").BackgroundColor3 = vg.ThemeColor
                Instance.new("Frame").Size = UDim2.new(0,75, 0, 1, 0)
                vb.ColourObjects[Instance.new("Frame")] = "BackgroundColor3"
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(0, 5, 0, 2)
                Instance.new("TextLabel").Size = UDim2.new(1, -10, 0, 14)
                Instance.new("TextLabel").Font = vb.Settings.Font
                Instance.new("TextLabel").Text = ""
                Instance.new("TextLabel").TextColor3 = vb.Settings.TextColor
                Instance.new("TextLabel").TextSize = vb.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                {
                  Set = function(a, b)
                    a = a
                    b = va or vb
                    b = vb or vb
                    vd.Text = ve .. " - " .. tostring(vg.Value)
                    vh:Create(vj, TweenInfo.new(0,2, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                      Size = UDim2.new(1 - (va - b) / (va - vb), 0, 1, 0)
                    }):Play()
                    vg.Value = b
                    pcall(vg.Function, b)
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = h,
                  Value = e,
                  Holder = Instance.new("Frame")
                }:Set(e)
                return {
                  Set = function(a, b)
                    a = a
                    b = va or vb
                    b = vb or vb
                    vd.Text = ve .. " - " .. tostring(vg.Value)
                    vh:Create(vj, TweenInfo.new(0,2, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                      Size = UDim2.new(1 - (va - b) / (va - vb), 0, 1, 0)
                    }):Play()
                    vg.Value = b
                    pcall(vg.Function, b)
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = h,
                  Value = e,
                  Holder = Instance.new("Frame")
                }
              end,
              AddToggleSlider = function(a, b, c, d, e, g, h, j)
                a = a
                Instance.new("Frame").Name = "ToggleSlider_Holder"
                Instance.new("Frame").BackgroundColor3 = vc.Settings.ItemHolderColor
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 30)
                Instance.new("Frame").Parent = vd
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "Slider_Background"
                Instance.new("Frame").BackgroundColor3 = vc.Settings.DefaultItemColor
                Instance.new("Frame").ClipsDescendants = true
                Instance.new("Frame").Position = UDim2.new(0, 30, 0, 18)
                Instance.new("Frame").Size = UDim2.new(1, -35, 1, -20)
                Instance.new("Frame").InputBegan:Connect(function(a, b)
                  a = a
                  repeat
                    if not b and a.UserInputType == Enum.UserInputType.MouseButton1 then
                      wait()
                      vc:Set(math.floor((vd + math.clamp((va.X - vb.AbsolutePosition.X) / vb.AbsoluteSize.X, 0, 1) * (ve - vd)) * 10) / 10)
                    end
                  until not vg:IsMouseButtonPressed(Enum.UserInputType.MouseButton1)
                end)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "Slider"
                Instance.new("Frame").BackgroundColor3 = vb.ThemeColor
                Instance.new("Frame").Size = UDim2.new(0,75, 0, 1, 0)
                vc.ColourObjects[Instance.new("Frame")] = "BackgroundColor3"
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(0, 30, 0, 2)
                Instance.new("TextLabel").Size = UDim2.new(1, -35, 0, 14)
                Instance.new("TextLabel").Font = vc.Settings.Font
                Instance.new("TextLabel").Text = ""
                Instance.new("TextLabel").TextColor3 = vc.Settings.TextColor
                Instance.new("TextLabel").TextSize = vc.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                Instance.new("TextButton").Parent, Instance.new("TextButton").Name = Instance.new("Frame"), "ToggleSlider_Indicator"
                Instance.new("TextButton").BackgroundColor3 = vc.Settings.DefaultItemColor
                Instance.new("TextButton").Position = UDim2.new(0, 2, 0, 2)
                Instance.new("TextButton").Size = UDim2.new(0, 26, 0, 26)
                Instance.new("TextButton").AutoButtonColor = false
                Instance.new("TextButton").Font = vc.Settings.Font
                Instance.new("TextButton").Text = ""
                Instance.new("TextButton").MouseButton1Down:Connect(function()
                  va.Size = UDim2.new(0, 24, 0, 24)
                  va.Position = UDim2.new(0, 3, 0, 3)
                end)
                Instance.new("TextButton").MouseButton1Up:Connect(function()
                  va.Toggled = not va.Toggled
                  va:Toggle(va.Toggled)
                  vb.Size = UDim2.new(0, 26, 0, 26)
                  vb.Position = UDim2.new(0, 2, 0, 2)
                end)
                Instance.new("Frame").MouseLeave:Connect(function()
                  va.Size = UDim2.new(0, 26, 0, 26)
                  va.Position = UDim2.new(0, 2, 0, 2)
                end)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("TextButton"), UDim.new(0, 5)
                {
                  Set = function(a, b)
                    a = a
                    b = va or vb
                    b = vb or vb
                    if b == ve then
                      vg.Text = vh .. " - " .. tostring(vd.Value)
                      vj:Create(vk, TweenInfo.new(0,2, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                        Size = UDim2.new(1 - (va - b) / (va - vb), 0, 1, 0)
                      }):Play()
                      vd.Value = b
                      pcall(vd.Function, b)
                    end
                  end,
                  Toggle = function(a, b)
                    a = a
                    if b then
                    end
                    CreateCircularRipple(va, vb.ThemeColor or vc.Settings.DefaultItemColor, b)
                    if b then
                      vc.ColourObjects[va] = "BackgroundColor3"
                    elseif vc.ColourObjects[va] then
                      vc.ColourObjects[va] = nil
                    end
                    vd.Toggled = b
                    vd:Set(vd.Value)
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = j,
                  Toggled = h,
                  Value = e,
                  Holder = Instance.new("Frame")
                }:Set(e)
                return {
                  Set = function(a, b)
                    a = a
                    b = va or vb
                    b = vb or vb
                    if b == ve then
                      vg.Text = vh .. " - " .. tostring(vd.Value)
                      vj:Create(vk, TweenInfo.new(0,2, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                        Size = UDim2.new(1 - (va - b) / (va - vb), 0, 1, 0)
                      }):Play()
                      vd.Value = b
                      pcall(vd.Function, b)
                    end
                  end,
                  Toggle = function(a, b)
                    a = a
                    if b then
                    end
                    CreateCircularRipple(va, vb.ThemeColor or vc.Settings.DefaultItemColor, b)
                    if b then
                      vc.ColourObjects[va] = "BackgroundColor3"
                    elseif vc.ColourObjects[va] then
                      vc.ColourObjects[va] = nil
                    end
                    vd.Toggled = b
                    vd:Set(vd.Value)
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = j,
                  Toggled = h,
                  Value = e,
                  Holder = Instance.new("Frame")
                }
              end,
              AddDropdown = function(a, b, c, d)
                a = a
                Instance.new("Frame").Name = "Dropdown_Holder"
                Instance.new("Frame").BackgroundColor3 = vd.Settings.ItemHolderColor
                Instance.new("Frame").ClipsDescendants = true
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 30)
                Instance.new("Frame").Parent = ve
                Instance.new("Frame").InputBegan:Connect(function(a, b)
                  a = a
                  if not b and a.UserInputType == Enum.UserInputType.MouseButton1 and not va then
                    vb = not vb
                    vc:Toggle(vb)
                  end
                end)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "Labels_Holder"
                Instance.new("Frame").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("Frame").BackgroundTransparency = 1
                Instance.new("Frame").Position = UDim2.new(0, 2, 0, 0)
                Instance.new("Frame").Size = UDim2.new(1, -30, 0, 30)
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").BorderColor3 = Color3.fromRGB(27, 42, 53)
                Instance.new("TextLabel").Position = UDim2.new(0, 5, 0,5, -7)
                Instance.new("TextLabel").Size = UDim2.new(0,5, -2, 0, 14)
                Instance.new("TextLabel").Font = vd.Settings.Font
                Instance.new("TextLabel").Text = b
                Instance.new("TextLabel").TextColor3 = vd.Settings.TextColor
                Instance.new("TextLabel").TextSize = vd.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                Instance.new("TextLabel").TextXAlignment = Enum.TextXAlignment.Left
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Selected_Display"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").BorderColor3 = Color3.fromRGB(27, 42, 53)
                Instance.new("TextLabel").Position = UDim2.new(0,5, 3, 0, 8)
                Instance.new("TextLabel").Size = UDim2.new(0,5, -5, 0, 14)
                Instance.new("TextLabel").Font = vd.Settings.Font
                Instance.new("TextLabel").Text = ""
                Instance.new("TextLabel").TextColor3 = vd.Settings.TextColor
                Instance.new("TextLabel").TextSize = vd.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                Instance.new("TextLabel").TextXAlignment = Enum.TextXAlignment.Right
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Dropdown_Indicator"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(1, -28, 0, 2)
                Instance.new("TextLabel").Rotation = -90
                Instance.new("TextLabel").Size = UDim2.new(0, 26, 0, 26)
                Instance.new("TextLabel").Font = vd.Settings.DropdownIndicatorFont
                Instance.new("TextLabel").Text = "<"
                Instance.new("TextLabel").TextColor3 = vd.Settings.TextColor
                Instance.new("TextLabel").TextSize = vd.Settings.DropdownIndicatorTextSize
                Instance.new("ScrollingFrame").Parent, Instance.new("ScrollingFrame").Name = Instance.new("Frame"), "Dropdown_List"
                Instance.new("ScrollingFrame").Active = true
                Instance.new("ScrollingFrame").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("ScrollingFrame").BackgroundTransparency = 1
                Instance.new("ScrollingFrame").BorderSizePixel = 0
                Instance.new("ScrollingFrame").Position = UDim2.new(0, 0, 0, 30)
                Instance.new("ScrollingFrame").Size = UDim2.new(1, 0, 1, -30)
                Instance.new("ScrollingFrame").CanvasSize = UDim2.new(0, 0, 0, 2)
                Instance.new("ScrollingFrame").ScrollBarImageColor3 = Color3.fromRGB(0, 0, 0)
                Instance.new("ScrollingFrame").ScrollBarThickness = 5
                Instance.new("ScrollingFrame").ChildAdded:Connect(function(a)
                  a = a
                  if not a.ClassName:find("UI") then
                    va(UDim2.new(0, 0, 0, a.AbsoluteSize.Y + 2))
                  end
                end)
                Instance.new("ScrollingFrame").ChildRemoved:Connect(function(a)
                  a = a
                  if not a.ClassName:find("UI") then
                    va(UDim2.new(0, 0, 0, -a.AbsoluteSize.Y - 2))
                  end
                end)
                Instance.new("UIPadding").Parent = Instance.new("ScrollingFrame")
                Instance.new("UIPadding").PaddingBottom = UDim.new(0, 2)
                Instance.new("UIPadding").PaddingLeft = UDim.new(0, 2)
                Instance.new("UIPadding").PaddingRight = UDim.new(0, 2)
                Instance.new("UIListLayout").Parent, Instance.new("UIPadding").PaddingTop = Instance.new("ScrollingFrame"), UDim.new(0, 2)
                Instance.new("UIListLayout").SortOrder = Enum.SortOrder.LayoutOrder
                Instance.new("UIListLayout").Padding = UDim.new(0, 2)
                for fQ, fW in next, c, nil do
                  {
                    Toggle = function(a, b)
                      a = a
                      if not va then
                        va = true
                        if b then
                        end
                        if b then
                        end
                        vc:Create(vd, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                          Rotation = 0 or -90
                        }):Play()
                        vc:Create(ve, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                          Size = ve.Size + UDim2.new(0, 0, 0, 2 + (vb.MaxVisibleItems or #vb.Items) * 22 or -(2 + (vb.MaxVisibleItems or #vb.Items) * 22))
                        }):Play()
                        vc:Create(vg, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                          Size = vg.Size + UDim2.new(0, 0, 0, 2 + (vb.MaxVisibleItems or #vb.Items) * 22 or -(2 + (vb.MaxVisibleItems or #vb.Items) * 22))
                        }):Play()
                        vc:Create(vh, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                          CanvasSize = vh.CanvasSize + UDim2.new(0, 0, 0, 2 + (vb.MaxVisibleItems or #vb.Items) * 22 or -(2 + (vb.MaxVisibleItems or #vb.Items) * 22))
                        }):Play()
                        wait(0,5)
                        va = false
                        vj()
                        vk()
                      end
                    end,
                    AddItem = function(a, b)
                      a = a
                      if va then
                        table.insert(vb.Add, {
                          Name = b,
                          Holder = Instance.new("TextButton")
                        })
                        return
                      end
                      Instance.new("TextButton").Name = "Dropdown_Item"
                      Instance.new("TextButton").BackgroundColor3 = Color3.fromRGB(25, 25, 25)
                      Instance.new("TextButton").Size = UDim2.new(1, 0, 0, 20)
                      Instance.new("TextButton").Font = vc.Settings.Font
                      Instance.new("TextButton").Text = b
                      Instance.new("TextButton").TextColor3 = vc.Settings.TextColor
                      Instance.new("TextButton").TextSize = vc.Settings.TextSize
                      Instance.new("TextButton").TextWrapped = true
                      Instance.new("TextButton").Parent = vd
                      Instance.new("TextButton").MouseButton1Click:Connect(function()
                        va.Text = vb
                        vc.Selected = vb
                        pcall(vc.Function, vb)
                      end)
                      Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("TextButton"), UDim.new(0, 5)
                      table.insert(vg.Items, {
                        Name = b,
                        Holder = Instance.new("TextButton")
                      })
                    end,
                    RemoveItem = function(a, b)
                      a = a
                      if va then
                        for fg, fh in next, vb.Items, nil do
                          if fh.Name == b then
                            table.insert(vc.Remove, fh)
                          else
                          end
                        end
                        return
                      end
                      for fg, fh in next, vb.Items, nil do
                        if fh.Name == b then
                          table.remove(vb.Items, fg)
                          fh.Holder:Destroy()
                        else
                        end
                      end
                    end,
                    AddToolTip = function(a, b)
                      a = a
                      AddToolTip(va, vb, b)
                    end,
                    Function = d,
                    MaxVisibleItems = 10,
                    Selected = nil,
                    Items = {},
                    Holder = Instance.new("Frame")
                  }:AddItem(fW)
                end
                return {
                  Toggle = function(a, b)
                    a = a
                    if not va then
                      va = true
                      if b then
                      end
                      if b then
                      end
                      vc:Create(vd, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                        Rotation = 0 or -90
                      }):Play()
                      vc:Create(ve, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                        Size = ve.Size + UDim2.new(0, 0, 0, 2 + (vb.MaxVisibleItems or #vb.Items) * 22 or -(2 + (vb.MaxVisibleItems or #vb.Items) * 22))
                      }):Play()
                      vc:Create(vg, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                        Size = vg.Size + UDim2.new(0, 0, 0, 2 + (vb.MaxVisibleItems or #vb.Items) * 22 or -(2 + (vb.MaxVisibleItems or #vb.Items) * 22))
                      }):Play()
                      vc:Create(vh, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                        CanvasSize = vh.CanvasSize + UDim2.new(0, 0, 0, 2 + (vb.MaxVisibleItems or #vb.Items) * 22 or -(2 + (vb.MaxVisibleItems or #vb.Items) * 22))
                      }):Play()
                      wait(0,5)
                      va = false
                      vj()
                      vk()
                    end
                  end,
                  AddItem = function(a, b)
                    a = a
                    if va then
                      table.insert(vb.Add, {
                        Name = b,
                        Holder = Instance.new("TextButton")
                      })
                      return
                    end
                    Instance.new("TextButton").Name = "Dropdown_Item"
                    Instance.new("TextButton").BackgroundColor3 = Color3.fromRGB(25, 25, 25)
                    Instance.new("TextButton").Size = UDim2.new(1, 0, 0, 20)
                    Instance.new("TextButton").Font = vc.Settings.Font
                    Instance.new("TextButton").Text = b
                    Instance.new("TextButton").TextColor3 = vc.Settings.TextColor
                    Instance.new("TextButton").TextSize = vc.Settings.TextSize
                    Instance.new("TextButton").TextWrapped = true
                    Instance.new("TextButton").Parent = vd
                    Instance.new("TextButton").MouseButton1Click:Connect(function()
                      va.Text = vb
                      vc.Selected = vb
                      pcall(vc.Function, vb)
                    end)
                    Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("TextButton"), UDim.new(0, 5)
                    table.insert(vg.Items, {
                      Name = b,
                      Holder = Instance.new("TextButton")
                    })
                  end,
                  RemoveItem = function(a, b)
                    a = a
                    if va then
                      for fg, fh in next, vb.Items, nil do
                        if fh.Name == b then
                          table.insert(vc.Remove, fh)
                        else
                        end
                      end
                      return
                    end
                    for fg, fh in next, vb.Items, nil do
                      if fh.Name == b then
                        table.remove(vb.Items, fg)
                        fh.Holder:Destroy()
                      else
                      end
                    end
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = d,
                  MaxVisibleItems = 10,
                  Selected = nil,
                  Items = {},
                  Holder = Instance.new("Frame")
                }
              end,
              AddBind = function(a, b, c, d)
                a = a
                Instance.new("Frame").Name = "Bind_Holder"
                Instance.new("Frame").BackgroundColor3 = va.Settings.ItemHolderColor
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 30)
                Instance.new("Frame").Parent = vb
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(0, 5, 0,5, -7)
                Instance.new("TextLabel").Size = UDim2.new(1, -112, 0, 14)
                Instance.new("TextLabel").Font = va.Settings.Font
                Instance.new("TextLabel").Text = b
                Instance.new("TextLabel").TextColor3 = va.Settings.TextColor
                Instance.new("TextLabel").TextSize = va.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                Instance.new("TextLabel").TextXAlignment = Enum.TextXAlignment.Left
                Instance.new("TextBox").Parent, Instance.new("TextBox").Name = Instance.new("Frame"), "Box"
                Instance.new("TextBox").BackgroundColor3 = Color3.fromRGB(25, 25, 25)
                Instance.new("TextBox").Position = UDim2.new(1, -62, 0, 2)
                Instance.new("TextBox").Size = UDim2.new(0, 60, 1, -4)
                Instance.new("TextBox").ClearTextOnFocus = false
                Instance.new("TextBox").Font = va.Settings.Font
                Instance.new("TextBox").Text = ""
                Instance.new("TextBox").TextColor3 = va.Settings.TextColor
                Instance.new("TextBox").TextEditable = false
                Instance.new("TextBox").TextSize = va.Settings.TextSize
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("TextBox"), UDim.new(0, 5)
                vc.InputBegan:Connect(function(a, b)
                  a = a
                  if not b and a.KeyCode == va.Bind then
                    pcall(va.Function)
                  end
                end)
                {
                  Set = function(a, b)
                    a = a
                    va.Bind = b
                    vb.Text = b.Name
                    vb.Size = UDim2.new(0, vb.TextBounds.X + 10, 1, -4)
                    vb.Position = UDim2.new(1, -vb.AbsoluteSize.X - 2, 0, 2)
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = d,
                  Bind = c,
                  Holder = Instance.new("Frame")
                }:Set(c)
                return {
                  Set = function(a, b)
                    a = a
                    va.Bind = b
                    vb.Text = b.Name
                    vb.Size = UDim2.new(0, vb.TextBounds.X + 10, 1, -4)
                    vb.Position = UDim2.new(1, -vb.AbsoluteSize.X - 2, 0, 2)
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = d,
                  Bind = c,
                  Holder = Instance.new("Frame")
                }
              end,
              AddToggleBind = function(a, b, c, d, e)
                a = a
                vc.BindToggles[b] = d
                Instance.new("Frame").Name = "ToggleBind_Holder"
                Instance.new("Frame").BackgroundColor3 = vb.Settings.ItemHolderColor
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 30)
                Instance.new("Frame").Parent = vd
                Instance.new("Frame").InputBegan:Connect(function(a, b)
                  a = a
                  if not b and a.UserInputType == Enum.UserInputType.MouseButton1 then
                    va.Size = UDim2.new(0, 24, 0, 24)
                    va.Position = UDim2.new(1, -vb.AbsoluteSize.X - 29, 0, 3)
                  end
                end)
                Instance.new("Frame").InputEnded:Connect(function(a, b)
                  a = a
                  if not b and a.UserInputType == Enum.UserInputType.MouseButton1 then
                    va.BindToggles[vb] = not va.BindToggles[vb]
                    vc:Toggle(va.BindToggles[vb])
                    vd.Size = UDim2.new(0, 26, 0, 26)
                    vd.Position = UDim2.new(1, -ve.AbsoluteSize.X - 30, 0, 2)
                  end
                end)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(0, 5, 0,5, -7)
                Instance.new("TextLabel").Size = UDim2.new(1, -112, 0, 14)
                Instance.new("TextLabel").Font = vb.Settings.Font
                Instance.new("TextLabel").Text = b
                Instance.new("TextLabel").TextColor3 = vb.Settings.TextColor
                Instance.new("TextLabel").TextSize = vb.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                Instance.new("TextLabel").TextXAlignment = Enum.TextXAlignment.Left
                Instance.new("TextBox").Parent, Instance.new("TextBox").Name = Instance.new("Frame"), "Box"
                Instance.new("TextBox").BackgroundColor3 = vb.Settings.DefaultItemColor
                Instance.new("TextBox").Position = UDim2.new(1, -62, 0, 2)
                Instance.new("TextBox").Size = UDim2.new(0, 60, 1, -4)
                Instance.new("TextBox").ClearTextOnFocus = false
                Instance.new("TextBox").Font = vb.Settings.Font
                Instance.new("TextBox").Text = ""
                Instance.new("TextBox").TextColor3 = vb.Settings.TextColor
                Instance.new("TextBox").TextEditable = false
                Instance.new("TextBox").TextSize = vb.Settings.TextSize
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("TextBox"), UDim.new(0, 5)
                Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "ToggleBind_Indicator"
                Instance.new("Frame").BackgroundColor3 = vb.Settings.DefaultItemColor
                Instance.new("Frame").Position = UDim2.new(1, -90, 0, 2)
                Instance.new("Frame").Size = UDim2.new(0, 26, 0, 26)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                ve.InputBegan:Connect(function(a, b)
                  a = a
                  if not b and a.KeyCode == va.Bind and va.Toggled then
                    pcall(va.Function)
                  end
                end)
                {
                  Set = function(a, b)
                    a = a
                    va.Bind = b
                    vb.Text = b.Name
                    vb.Size = UDim2.new(0, vb.TextBounds.X + 10, 1, -4)
                    vb.Position = UDim2.new(1, -vb.AbsoluteSize.X - 2, 0, 2)
                    vc.Position = UDim2.new(1, -vb.AbsoluteSize.X - 30, 0, 2)
                  end,
                  Toggle = function(a, b)
                    a = a
                    if b then
                    end
                    CreateCircularRipple(va, vb.ThemeColor or vc.Settings.DefaultItemColor, b)
                    if b then
                      vc.ColourObjects[va] = "BackgroundColor3"
                    elseif vc.ColourObjects[va] then
                      vc.ColourObjects[va] = nil
                    end
                    vd.Toggled = b
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = e,
                  Toggled = d,
                  Bind = c,
                  Holder = Instance.new("Frame")
                }:Set(c)
                {
                  Set = function(a, b)
                    a = a
                    va.Bind = b
                    vb.Text = b.Name
                    vb.Size = UDim2.new(0, vb.TextBounds.X + 10, 1, -4)
                    vb.Position = UDim2.new(1, -vb.AbsoluteSize.X - 2, 0, 2)
                    vc.Position = UDim2.new(1, -vb.AbsoluteSize.X - 30, 0, 2)
                  end,
                  Toggle = function(a, b)
                    a = a
                    if b then
                    end
                    CreateCircularRipple(va, vb.ThemeColor or vc.Settings.DefaultItemColor, b)
                    if b then
                      vc.ColourObjects[va] = "BackgroundColor3"
                    elseif vc.ColourObjects[va] then
                      vc.ColourObjects[va] = nil
                    end
                    vd.Toggled = b
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = e,
                  Toggled = d,
                  Bind = c,
                  Holder = Instance.new("Frame")
                }:Toggle(d)
                return {
                  Set = function(a, b)
                    a = a
                    va.Bind = b
                    vb.Text = b.Name
                    vb.Size = UDim2.new(0, vb.TextBounds.X + 10, 1, -4)
                    vb.Position = UDim2.new(1, -vb.AbsoluteSize.X - 2, 0, 2)
                    vc.Position = UDim2.new(1, -vb.AbsoluteSize.X - 30, 0, 2)
                  end,
                  Toggle = function(a, b)
                    a = a
                    if b then
                    end
                    CreateCircularRipple(va, vb.ThemeColor or vc.Settings.DefaultItemColor, b)
                    if b then
                      vc.ColourObjects[va] = "BackgroundColor3"
                    elseif vc.ColourObjects[va] then
                      vc.ColourObjects[va] = nil
                    end
                    vd.Toggled = b
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = e,
                  Toggled = d,
                  Bind = c,
                  Holder = Instance.new("Frame")
                }
              end
            }
          end
        })
        return {
          Toggles = {},
          BindToggles = {},
          SliderToggles = {},
          Show = function(a)
            a = a
            for fe, fg in next, va.Tabs, nil do
              fg.Tab.Visible = fg.Tab == vb
              vc:Create(fg.Indicator, TweenInfo.new(0,2), {
                BackgroundColor3 = vd.Settings.TabButtonIndicatorColors["Enabled" or "Disabled"]
              }):Play()
            end
          end,
          Hide = function(a)
            a = a
            va.Visible = false
          end,
          IsShown = function(a)
            a = a
            return va.Visible
          end,
          Indicator = Instance.new("Frame"),
          Tab = Instance.new("ScrollingFrame"),
          Holder = vd,
          AddCategory = function(a, b)
            a = a
            Instance.new("Frame").Name = "Category_Frame"
            Instance.new("Frame").BackgroundColor3 = vb.Settings.CategoryColor
            Instance.new("Frame").Position = UDim2.new(0, 5, 0, 5)
            Instance.new("Frame").Size = UDim2.new(1, 0, 0, 35)
            Instance.new("Frame").Parent = va
            Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
            Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Category_Title"
            Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            Instance.new("TextLabel").BackgroundTransparency = 1
            Instance.new("TextLabel").Position = UDim2.new(0, 2, 0, 8)
            Instance.new("TextLabel").Size = UDim2.new(1, -4, 0, 14)
            Instance.new("TextLabel").Font = vb.Settings.CategoryFont
            Instance.new("TextLabel").Text = b
            Instance.new("TextLabel").TextColor3 = vb.Settings.TextColor
            Instance.new("TextLabel").TextSize = vb.Settings.TextSize
            Instance.new("TextLabel").TextWrapped = true
            Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "Category_List"
            Instance.new("Frame").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            Instance.new("Frame").BackgroundTransparency = 1
            Instance.new("Frame").Position = UDim2.new(0, 0, 0, 30)
            Instance.new("Frame").Size = UDim2.new(1, 0, 1, -30)
            Instance.new("Frame").ChildAdded:Connect(function(a)
              a = a
              if not a.ClassName:find("UI") then
                va.Size = va.Size + UDim2.new(0, 0, 0, a.AbsoluteSize.Y + 5)
                vb.CanvasSize = vb.CanvasSize + UDim2.new(0, 0, 0, a.AbsoluteSize.Y + 5)
              end
            end)
            Instance.new("UIListLayout").Parent = Instance.new("Frame")
            Instance.new("UIListLayout").SortOrder = Enum.SortOrder.LayoutOrder
            Instance.new("UIPadding").Parent, Instance.new("UIListLayout").Padding = Instance.new("Frame"), UDim.new(0, 5)
            Instance.new("UIPadding").PaddingBottom = UDim.new(0, 5)
            Instance.new("UIPadding").PaddingLeft = UDim.new(0, 5)
            Instance.new("UIPadding").PaddingRight = UDim.new(0, 5)
            Instance.new("UIPadding").PaddingTop = UDim.new(0, 5)
            return {
              Frame = Instance.new("Frame"),
              Holder = va,
              AddButton = function(a, b, c)
                a = a
                Instance.new("Frame").Name = "Button_Holder"
                Instance.new("Frame").BackgroundColor3 = va.Settings.ItemHolderColor
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 30)
                Instance.new("Frame").Parent = vb
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("TextButton").Parent, Instance.new("TextButton").Name = Instance.new("Frame"), "Button"
                Instance.new("TextButton").AutoButtonColor = false
                Instance.new("TextButton").BackgroundColor3 = va.Settings.DefaultItemColor
                Instance.new("TextButton").Position = UDim2.new(0, 2, 0, 2)
                Instance.new("TextButton").Size = UDim2.new(1, -4, 1, -4)
                Instance.new("TextButton").Font = va.Settings.Font
                Instance.new("TextButton").Text = b
                Instance.new("TextButton").TextColor3 = va.Settings.TextColor
                Instance.new("TextButton").TextSize = va.Settings.TextSize
                Instance.new("TextButton").TextWrapped = true
                Instance.new("TextButton").MouseButton1Down:Connect(function()
                  va.TextSize = vb.Settings.TextSize - 1
                end)
                Instance.new("TextButton").MouseLeave:Connect(function()
                  va.TextSize = vb.Settings.TextSize
                end)
                Instance.new("TextButton").MouseButton1Up:Connect(function()
                  pcall(va.Function)
                  vb.TextSize = vc.Settings.TextSize
                  CreateWaveRipple(vb, 0,8, Color3.fromRGB(255, 255, 255))
                end)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("TextButton"), UDim.new(0, 5)
                return {
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = c,
                  Button = Instance.new("TextButton"),
                  Holder = Instance.new("Frame")
                }
              end,
              AddToggle = function(a, b, c, d)
                a = a
                vc.Toggles[b] = c
                Instance.new("Frame").Name = b
                Instance.new("Frame").BackgroundColor3 = Color3.fromRGB(20, 20, 20)
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 30)
                Instance.new("Frame").Parent = vd
                Instance.new("Frame").InputBegan:Connect(function(a, b)
                  a = a
                  if not b and a.UserInputType == Enum.UserInputType.MouseButton1 then
                    va.Size = UDim2.new(0, 24, 0, 24)
                    va.Position = UDim2.new(1, -27, 0, 3)
                  end
                end)
                Instance.new("Frame").InputEnded:Connect(function(a, b)
                  a = a
                  if not b and a.UserInputType == Enum.UserInputType.MouseButton1 then
                    va.Toggles[vb] = not va.Toggles[vb]
                    vc:Set(va.Toggles[vb])
                    vd.Size = UDim2.new(0, 26, 0, 26)
                    vd.Position = UDim2.new(1, -28, 0, 2)
                  end
                end)
                Instance.new("Frame").MouseLeave:Connect(function()
                  va.Size = UDim2.new(0, 26, 0, 26)
                  va.Position = UDim2.new(1, -28, 0, 2)
                end)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(0, 5, 0,5, -7)
                Instance.new("TextLabel").Size = UDim2.new(1, -38, 0, 14)
                Instance.new("TextLabel").Font = Enum.Font.SourceSans
                Instance.new("TextLabel").Text = b
                Instance.new("TextLabel").TextColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").TextSize = 14
                Instance.new("TextLabel").TextWrapped = true
                Instance.new("TextLabel").TextXAlignment = Enum.TextXAlignment.Left
                Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "Toggle_Indicator"
                Instance.new("Frame").BackgroundColor3 = vb.Settings.DefaultItemColor
                Instance.new("Frame").Position = UDim2.new(1, -28, 0, 2)
                Instance.new("Frame").Size = UDim2.new(0, 26, 0, 26)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                {
                  Set = function(a, b)
                    a = a
                    if b then
                    end
                    CreateCircularRipple(va, vb.ThemeColor or vc.Settings.DefaultItemColor, b)
                    if b then
                      vc.ColourObjects[va] = "BackgroundColor3"
                    elseif vc.ColourObjects[va] then
                      vc.ColourObjects[va] = nil
                    end
                    vd.Toggled = b
                    pcall(vd.Function, b)
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = d,
                  Toggled = c,
                  Holder = Instance.new("Frame")
                }:Set(c)
                return {
                  Set = function(a, b)
                    a = a
                    if b then
                    end
                    CreateCircularRipple(va, vb.ThemeColor or vc.Settings.DefaultItemColor, b)
                    if b then
                      vc.ColourObjects[va] = "BackgroundColor3"
                    elseif vc.ColourObjects[va] then
                      vc.ColourObjects[va] = nil
                    end
                    vd.Toggled = b
                    pcall(vd.Function, b)
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = d,
                  Toggled = c,
                  Holder = Instance.new("Frame")
                }
              end,
              AddBox = function(a, b, c)
                a = a
                Instance.new("Frame").Name = "Box_Holder"
                Instance.new("Frame").BackgroundColor3 = Color3.fromRGB(20, 20, 20)
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 30)
                Instance.new("Frame").Parent = va
                Instance.new("Frame").MouseEnter:Connect(function()
                  ve:Create(vg, TweenInfo.new(0,2), {
                    Size = UDim2.new(1, -(vc or vd), 1, -4),
                    Position = UDim2.new(0, vc or vd, 0, 2)
                  }):Play()
                end)
                Instance.new("Frame").MouseLeave:Connect(function()
                  if va:IsFocused() then
                    va.FocusLost:Wait()
                  end
                  vb:Create(va, TweenInfo.new(0,2), {
                    Size = UDim2.new(0, vc, 1, -4),
                    Position = UDim2.new(1, -vc - 2, 0, 2)
                  }):Play()
                end)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(0, 5, 0,5, -7)
                Instance.new("TextLabel").Size = UDim2.new(1, -112, 0, 14)
                Instance.new("TextLabel").Font = vc.Settings.Font
                Instance.new("TextLabel").Text = b
                Instance.new("TextLabel").TextColor3 = vc.Settings.TextColor
                Instance.new("TextLabel").TextSize = vc.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                Instance.new("TextLabel").TextXAlignment = Enum.TextXAlignment.Left
                Instance.new("TextLabel").Size = UDim2.new(0, Instance.new("TextLabel").TextBounds.X + 2, 0, 14)
                Instance.new("TextBox").Parent, Instance.new("TextBox").Name = Instance.new("Frame"), "Box"
                Instance.new("TextBox").BackgroundColor3 = vc.Settings.DefaultItemColor
                Instance.new("TextBox").Position = UDim2.new(1, -102, 0, 2)
                Instance.new("TextBox").Size = UDim2.new(0, 100, 1, -4)
                Instance.new("TextBox").Font = vc.Settings.Font
                Instance.new("TextBox").Text = ""
                Instance.new("TextBox").TextColor3 = vc.Settings.TextColor
                Instance.new("TextBox").TextSize = vc.Settings.TextSize
                Instance.new("TextBox").TextWrapped = true
                Instance.new("TextBox").FocusLost:Connect(function()
                  pcall(va.Function, vb.Text)
                end)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("TextBox"), UDim.new(0, 5)
                return {
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = c,
                  Box = Instance.new("TextBox"),
                  Holder = Instance.new("Frame")
                }
              end,
              AddLabel = function(a, b)
                a = a
                Instance.new("Frame").Name = "Label_Holder"
                Instance.new("Frame").BackgroundColor3 = va.Settings.ItemHolderColor
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 18)
                Instance.new("Frame").Parent = vb
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(0, 5, 0,5, -7)
                Instance.new("TextLabel").Size = UDim2.new(1, -10, 0, 14)
                Instance.new("TextLabel").Font = va.Settings.Font
                Instance.new("TextLabel").Text = b
                Instance.new("TextLabel").TextColor3 = va.Settings.TextColor
                Instance.new("TextLabel").TextSize = va.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                return {
                  Label = Instance.new("TextLabel"),
                  Holder = Instance.new("Frame")
                }
              end,
              AddDualLabel = function(a, b)
                a = a
                Instance.new("Frame").Name = "DualLabel_Holder"
                Instance.new("Frame").BackgroundColor3 = va.Settings.ItemHolderColor
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 18)
                Instance.new("Frame").Parent = vb
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label1"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(0, 5, 0,5, -7)
                Instance.new("TextLabel").Size = UDim2.new(0,5, -5, 0, 14)
                Instance.new("TextLabel").Font = va.Settings.Font
                Instance.new("TextLabel").Text = b[1]
                Instance.new("TextLabel").TextColor3 = va.Settings.TextColor
                Instance.new("TextLabel").TextSize = va.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                Instance.new("TextLabel").TextXAlignment = Enum.TextXAlignment.Left
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label2"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(0,5, 0, 0,5, -7)
                Instance.new("TextLabel").Size = UDim2.new(0,5, -5, 0, 14)
                Instance.new("TextLabel").Font = va.Settings.Font
                Instance.new("TextLabel").Text = b[2]
                Instance.new("TextLabel").TextColor3 = va.Settings.TextColor
                Instance.new("TextLabel").TextSize = va.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                Instance.new("TextLabel").TextXAlignment = Enum.TextXAlignment.Right
                return {
                  Label2 = Instance.new("TextLabel"),
                  Label1 = Instance.new("TextLabel"),
                  Holder = Instance.new("Frame")
                }
              end,
              AddSlider = function(a, b, c, d, e, g, h)
                a = a
                Instance.new("Frame").Name = "Slider_Holder"
                Instance.new("Frame").BackgroundColor3 = vb.Settings.ItemHolderColor
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 30)
                Instance.new("Frame").Parent = vc
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "Slider_Background"
                Instance.new("Frame").BackgroundColor3 = vb.Settings.DefaultItemColor
                Instance.new("Frame").ClipsDescendants = true
                Instance.new("Frame").Position = UDim2.new(0, 5, 0, 18)
                Instance.new("Frame").Size = UDim2.new(1, -10, 1, -20)
                Instance.new("Frame").InputBegan:Connect(function(a, b)
                  a = a
                  repeat
                    if not b and a.UserInputType == Enum.UserInputType.MouseButton1 then
                      wait()
                      vc:Set(math.floor((vd + math.clamp((va.X - vb.AbsolutePosition.X) / vb.AbsoluteSize.X, 0, 1) * (ve - vd)) * 10) / 10)
                    end
                  until not vg:IsMouseButtonPressed(Enum.UserInputType.MouseButton1)
                end)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "Slider"
                Instance.new("Frame").BackgroundColor3 = vg.ThemeColor
                Instance.new("Frame").Size = UDim2.new(0,75, 0, 1, 0)
                vb.ColourObjects[Instance.new("Frame")] = "BackgroundColor3"
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(0, 5, 0, 2)
                Instance.new("TextLabel").Size = UDim2.new(1, -10, 0, 14)
                Instance.new("TextLabel").Font = vb.Settings.Font
                Instance.new("TextLabel").Text = ""
                Instance.new("TextLabel").TextColor3 = vb.Settings.TextColor
                Instance.new("TextLabel").TextSize = vb.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                {
                  Set = function(a, b)
                    a = a
                    b = va or vb
                    b = vb or vb
                    vd.Text = ve .. " - " .. tostring(vg.Value)
                    vh:Create(vj, TweenInfo.new(0,2, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                      Size = UDim2.new(1 - (va - b) / (va - vb), 0, 1, 0)
                    }):Play()
                    vg.Value = b
                    pcall(vg.Function, b)
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = h,
                  Value = e,
                  Holder = Instance.new("Frame")
                }:Set(e)
                return {
                  Set = function(a, b)
                    a = a
                    b = va or vb
                    b = vb or vb
                    vd.Text = ve .. " - " .. tostring(vg.Value)
                    vh:Create(vj, TweenInfo.new(0,2, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                      Size = UDim2.new(1 - (va - b) / (va - vb), 0, 1, 0)
                    }):Play()
                    vg.Value = b
                    pcall(vg.Function, b)
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = h,
                  Value = e,
                  Holder = Instance.new("Frame")
                }
              end,
              AddToggleSlider = function(a, b, c, d, e, g, h, j)
                a = a
                Instance.new("Frame").Name = "ToggleSlider_Holder"
                Instance.new("Frame").BackgroundColor3 = vc.Settings.ItemHolderColor
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 30)
                Instance.new("Frame").Parent = vd
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "Slider_Background"
                Instance.new("Frame").BackgroundColor3 = vc.Settings.DefaultItemColor
                Instance.new("Frame").ClipsDescendants = true
                Instance.new("Frame").Position = UDim2.new(0, 30, 0, 18)
                Instance.new("Frame").Size = UDim2.new(1, -35, 1, -20)
                Instance.new("Frame").InputBegan:Connect(function(a, b)
                  a = a
                  repeat
                    if not b and a.UserInputType == Enum.UserInputType.MouseButton1 then
                      wait()
                      vc:Set(math.floor((vd + math.clamp((va.X - vb.AbsolutePosition.X) / vb.AbsoluteSize.X, 0, 1) * (ve - vd)) * 10) / 10)
                    end
                  until not vg:IsMouseButtonPressed(Enum.UserInputType.MouseButton1)
                end)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "Slider"
                Instance.new("Frame").BackgroundColor3 = vb.ThemeColor
                Instance.new("Frame").Size = UDim2.new(0,75, 0, 1, 0)
                vc.ColourObjects[Instance.new("Frame")] = "BackgroundColor3"
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(0, 30, 0, 2)
                Instance.new("TextLabel").Size = UDim2.new(1, -35, 0, 14)
                Instance.new("TextLabel").Font = vc.Settings.Font
                Instance.new("TextLabel").Text = ""
                Instance.new("TextLabel").TextColor3 = vc.Settings.TextColor
                Instance.new("TextLabel").TextSize = vc.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                Instance.new("TextButton").Parent, Instance.new("TextButton").Name = Instance.new("Frame"), "ToggleSlider_Indicator"
                Instance.new("TextButton").BackgroundColor3 = vc.Settings.DefaultItemColor
                Instance.new("TextButton").Position = UDim2.new(0, 2, 0, 2)
                Instance.new("TextButton").Size = UDim2.new(0, 26, 0, 26)
                Instance.new("TextButton").AutoButtonColor = false
                Instance.new("TextButton").Font = vc.Settings.Font
                Instance.new("TextButton").Text = ""
                Instance.new("TextButton").MouseButton1Down:Connect(function()
                  va.Size = UDim2.new(0, 24, 0, 24)
                  va.Position = UDim2.new(0, 3, 0, 3)
                end)
                Instance.new("TextButton").MouseButton1Up:Connect(function()
                  va.Toggled = not va.Toggled
                  va:Toggle(va.Toggled)
                  vb.Size = UDim2.new(0, 26, 0, 26)
                  vb.Position = UDim2.new(0, 2, 0, 2)
                end)
                Instance.new("Frame").MouseLeave:Connect(function()
                  va.Size = UDim2.new(0, 26, 0, 26)
                  va.Position = UDim2.new(0, 2, 0, 2)
                end)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("TextButton"), UDim.new(0, 5)
                {
                  Set = function(a, b)
                    a = a
                    b = va or vb
                    b = vb or vb
                    if b == ve then
                      vg.Text = vh .. " - " .. tostring(vd.Value)
                      vj:Create(vk, TweenInfo.new(0,2, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                        Size = UDim2.new(1 - (va - b) / (va - vb), 0, 1, 0)
                      }):Play()
                      vd.Value = b
                      pcall(vd.Function, b)
                    end
                  end,
                  Toggle = function(a, b)
                    a = a
                    if b then
                    end
                    CreateCircularRipple(va, vb.ThemeColor or vc.Settings.DefaultItemColor, b)
                    if b then
                      vc.ColourObjects[va] = "BackgroundColor3"
                    elseif vc.ColourObjects[va] then
                      vc.ColourObjects[va] = nil
                    end
                    vd.Toggled = b
                    vd:Set(vd.Value)
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = j,
                  Toggled = h,
                  Value = e,
                  Holder = Instance.new("Frame")
                }:Set(e)
                return {
                  Set = function(a, b)
                    a = a
                    b = va or vb
                    b = vb or vb
                    if b == ve then
                      vg.Text = vh .. " - " .. tostring(vd.Value)
                      vj:Create(vk, TweenInfo.new(0,2, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                        Size = UDim2.new(1 - (va - b) / (va - vb), 0, 1, 0)
                      }):Play()
                      vd.Value = b
                      pcall(vd.Function, b)
                    end
                  end,
                  Toggle = function(a, b)
                    a = a
                    if b then
                    end
                    CreateCircularRipple(va, vb.ThemeColor or vc.Settings.DefaultItemColor, b)
                    if b then
                      vc.ColourObjects[va] = "BackgroundColor3"
                    elseif vc.ColourObjects[va] then
                      vc.ColourObjects[va] = nil
                    end
                    vd.Toggled = b
                    vd:Set(vd.Value)
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = j,
                  Toggled = h,
                  Value = e,
                  Holder = Instance.new("Frame")
                }
              end,
              AddDropdown = function(a, b, c, d)
                a = a
                Instance.new("Frame").Name = "Dropdown_Holder"
                Instance.new("Frame").BackgroundColor3 = vd.Settings.ItemHolderColor
                Instance.new("Frame").ClipsDescendants = true
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 30)
                Instance.new("Frame").Parent = ve
                Instance.new("Frame").InputBegan:Connect(function(a, b)
                  a = a
                  if not b and a.UserInputType == Enum.UserInputType.MouseButton1 and not va then
                    vb = not vb
                    vc:Toggle(vb)
                  end
                end)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "Labels_Holder"
                Instance.new("Frame").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("Frame").BackgroundTransparency = 1
                Instance.new("Frame").Position = UDim2.new(0, 2, 0, 0)
                Instance.new("Frame").Size = UDim2.new(1, -30, 0, 30)
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").BorderColor3 = Color3.fromRGB(27, 42, 53)
                Instance.new("TextLabel").Position = UDim2.new(0, 5, 0,5, -7)
                Instance.new("TextLabel").Size = UDim2.new(0,5, -2, 0, 14)
                Instance.new("TextLabel").Font = vd.Settings.Font
                Instance.new("TextLabel").Text = b
                Instance.new("TextLabel").TextColor3 = vd.Settings.TextColor
                Instance.new("TextLabel").TextSize = vd.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                Instance.new("TextLabel").TextXAlignment = Enum.TextXAlignment.Left
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Selected_Display"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").BorderColor3 = Color3.fromRGB(27, 42, 53)
                Instance.new("TextLabel").Position = UDim2.new(0,5, 3, 0, 8)
                Instance.new("TextLabel").Size = UDim2.new(0,5, -5, 0, 14)
                Instance.new("TextLabel").Font = vd.Settings.Font
                Instance.new("TextLabel").Text = ""
                Instance.new("TextLabel").TextColor3 = vd.Settings.TextColor
                Instance.new("TextLabel").TextSize = vd.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                Instance.new("TextLabel").TextXAlignment = Enum.TextXAlignment.Right
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Dropdown_Indicator"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(1, -28, 0, 2)
                Instance.new("TextLabel").Rotation = -90
                Instance.new("TextLabel").Size = UDim2.new(0, 26, 0, 26)
                Instance.new("TextLabel").Font = vd.Settings.DropdownIndicatorFont
                Instance.new("TextLabel").Text = "<"
                Instance.new("TextLabel").TextColor3 = vd.Settings.TextColor
                Instance.new("TextLabel").TextSize = vd.Settings.DropdownIndicatorTextSize
                Instance.new("ScrollingFrame").Parent, Instance.new("ScrollingFrame").Name = Instance.new("Frame"), "Dropdown_List"
                Instance.new("ScrollingFrame").Active = true
                Instance.new("ScrollingFrame").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("ScrollingFrame").BackgroundTransparency = 1
                Instance.new("ScrollingFrame").BorderSizePixel = 0
                Instance.new("ScrollingFrame").Position = UDim2.new(0, 0, 0, 30)
                Instance.new("ScrollingFrame").Size = UDim2.new(1, 0, 1, -30)
                Instance.new("ScrollingFrame").CanvasSize = UDim2.new(0, 0, 0, 2)
                Instance.new("ScrollingFrame").ScrollBarImageColor3 = Color3.fromRGB(0, 0, 0)
                Instance.new("ScrollingFrame").ScrollBarThickness = 5
                Instance.new("ScrollingFrame").ChildAdded:Connect(function(a)
                  a = a
                  if not a.ClassName:find("UI") then
                    va(UDim2.new(0, 0, 0, a.AbsoluteSize.Y + 2))
                  end
                end)
                Instance.new("ScrollingFrame").ChildRemoved:Connect(function(a)
                  a = a
                  if not a.ClassName:find("UI") then
                    va(UDim2.new(0, 0, 0, -a.AbsoluteSize.Y - 2))
                  end
                end)
                Instance.new("UIPadding").Parent = Instance.new("ScrollingFrame")
                Instance.new("UIPadding").PaddingBottom = UDim.new(0, 2)
                Instance.new("UIPadding").PaddingLeft = UDim.new(0, 2)
                Instance.new("UIPadding").PaddingRight = UDim.new(0, 2)
                Instance.new("UIListLayout").Parent, Instance.new("UIPadding").PaddingTop = Instance.new("ScrollingFrame"), UDim.new(0, 2)
                Instance.new("UIListLayout").SortOrder = Enum.SortOrder.LayoutOrder
                Instance.new("UIListLayout").Padding = UDim.new(0, 2)
                for fQ, fW in next, c, nil do
                  {
                    Toggle = function(a, b)
                      a = a
                      if not va then
                        va = true
                        if b then
                        end
                        if b then
                        end
                        vc:Create(vd, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                          Rotation = 0 or -90
                        }):Play()
                        vc:Create(ve, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                          Size = ve.Size + UDim2.new(0, 0, 0, 2 + (vb.MaxVisibleItems or #vb.Items) * 22 or -(2 + (vb.MaxVisibleItems or #vb.Items) * 22))
                        }):Play()
                        vc:Create(vg, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                          Size = vg.Size + UDim2.new(0, 0, 0, 2 + (vb.MaxVisibleItems or #vb.Items) * 22 or -(2 + (vb.MaxVisibleItems or #vb.Items) * 22))
                        }):Play()
                        vc:Create(vh, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                          CanvasSize = vh.CanvasSize + UDim2.new(0, 0, 0, 2 + (vb.MaxVisibleItems or #vb.Items) * 22 or -(2 + (vb.MaxVisibleItems or #vb.Items) * 22))
                        }):Play()
                        wait(0,5)
                        va = false
                        vj()
                        vk()
                      end
                    end,
                    AddItem = function(a, b)
                      a = a
                      if va then
                        table.insert(vb.Add, {
                          Name = b,
                          Holder = Instance.new("TextButton")
                        })
                        return
                      end
                      Instance.new("TextButton").Name = "Dropdown_Item"
                      Instance.new("TextButton").BackgroundColor3 = Color3.fromRGB(25, 25, 25)
                      Instance.new("TextButton").Size = UDim2.new(1, 0, 0, 20)
                      Instance.new("TextButton").Font = vc.Settings.Font
                      Instance.new("TextButton").Text = b
                      Instance.new("TextButton").TextColor3 = vc.Settings.TextColor
                      Instance.new("TextButton").TextSize = vc.Settings.TextSize
                      Instance.new("TextButton").TextWrapped = true
                      Instance.new("TextButton").Parent = vd
                      Instance.new("TextButton").MouseButton1Click:Connect(function()
                        va.Text = vb
                        vc.Selected = vb
                        pcall(vc.Function, vb)
                      end)
                      Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("TextButton"), UDim.new(0, 5)
                      table.insert(vg.Items, {
                        Name = b,
                        Holder = Instance.new("TextButton")
                      })
                    end,
                    RemoveItem = function(a, b)
                      a = a
                      if va then
                        for fg, fh in next, vb.Items, nil do
                          if fh.Name == b then
                            table.insert(vc.Remove, fh)
                          else
                          end
                        end
                        return
                      end
                      for fg, fh in next, vb.Items, nil do
                        if fh.Name == b then
                          table.remove(vb.Items, fg)
                          fh.Holder:Destroy()
                        else
                        end
                      end
                    end,
                    AddToolTip = function(a, b)
                      a = a
                      AddToolTip(va, vb, b)
                    end,
                    Function = d,
                    MaxVisibleItems = 10,
                    Selected = nil,
                    Items = {},
                    Holder = Instance.new("Frame")
                  }:AddItem(fW)
                end
                return {
                  Toggle = function(a, b)
                    a = a
                    if not va then
                      va = true
                      if b then
                      end
                      if b then
                      end
                      vc:Create(vd, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                        Rotation = 0 or -90
                      }):Play()
                      vc:Create(ve, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                        Size = ve.Size + UDim2.new(0, 0, 0, 2 + (vb.MaxVisibleItems or #vb.Items) * 22 or -(2 + (vb.MaxVisibleItems or #vb.Items) * 22))
                      }):Play()
                      vc:Create(vg, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                        Size = vg.Size + UDim2.new(0, 0, 0, 2 + (vb.MaxVisibleItems or #vb.Items) * 22 or -(2 + (vb.MaxVisibleItems or #vb.Items) * 22))
                      }):Play()
                      vc:Create(vh, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                        CanvasSize = vh.CanvasSize + UDim2.new(0, 0, 0, 2 + (vb.MaxVisibleItems or #vb.Items) * 22 or -(2 + (vb.MaxVisibleItems or #vb.Items) * 22))
                      }):Play()
                      wait(0,5)
                      va = false
                      vj()
                      vk()
                    end
                  end,
                  AddItem = function(a, b)
                    a = a
                    if va then
                      table.insert(vb.Add, {
                        Name = b,
                        Holder = Instance.new("TextButton")
                      })
                      return
                    end
                    Instance.new("TextButton").Name = "Dropdown_Item"
                    Instance.new("TextButton").BackgroundColor3 = Color3.fromRGB(25, 25, 25)
                    Instance.new("TextButton").Size = UDim2.new(1, 0, 0, 20)
                    Instance.new("TextButton").Font = vc.Settings.Font
                    Instance.new("TextButton").Text = b
                    Instance.new("TextButton").TextColor3 = vc.Settings.TextColor
                    Instance.new("TextButton").TextSize = vc.Settings.TextSize
                    Instance.new("TextButton").TextWrapped = true
                    Instance.new("TextButton").Parent = vd
                    Instance.new("TextButton").MouseButton1Click:Connect(function()
                      va.Text = vb
                      vc.Selected = vb
                      pcall(vc.Function, vb)
                    end)
                    Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("TextButton"), UDim.new(0, 5)
                    table.insert(vg.Items, {
                      Name = b,
                      Holder = Instance.new("TextButton")
                    })
                  end,
                  RemoveItem = function(a, b)
                    a = a
                    if va then
                      for fg, fh in next, vb.Items, nil do
                        if fh.Name == b then
                          table.insert(vc.Remove, fh)
                        else
                        end
                      end
                      return
                    end
                    for fg, fh in next, vb.Items, nil do
                      if fh.Name == b then
                        table.remove(vb.Items, fg)
                        fh.Holder:Destroy()
                      else
                      end
                    end
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = d,
                  MaxVisibleItems = 10,
                  Selected = nil,
                  Items = {},
                  Holder = Instance.new("Frame")
                }
              end,
              AddBind = function(a, b, c, d)
                a = a
                Instance.new("Frame").Name = "Bind_Holder"
                Instance.new("Frame").BackgroundColor3 = va.Settings.ItemHolderColor
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 30)
                Instance.new("Frame").Parent = vb
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(0, 5, 0,5, -7)
                Instance.new("TextLabel").Size = UDim2.new(1, -112, 0, 14)
                Instance.new("TextLabel").Font = va.Settings.Font
                Instance.new("TextLabel").Text = b
                Instance.new("TextLabel").TextColor3 = va.Settings.TextColor
                Instance.new("TextLabel").TextSize = va.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                Instance.new("TextLabel").TextXAlignment = Enum.TextXAlignment.Left
                Instance.new("TextBox").Parent, Instance.new("TextBox").Name = Instance.new("Frame"), "Box"
                Instance.new("TextBox").BackgroundColor3 = Color3.fromRGB(25, 25, 25)
                Instance.new("TextBox").Position = UDim2.new(1, -62, 0, 2)
                Instance.new("TextBox").Size = UDim2.new(0, 60, 1, -4)
                Instance.new("TextBox").ClearTextOnFocus = false
                Instance.new("TextBox").Font = va.Settings.Font
                Instance.new("TextBox").Text = ""
                Instance.new("TextBox").TextColor3 = va.Settings.TextColor
                Instance.new("TextBox").TextEditable = false
                Instance.new("TextBox").TextSize = va.Settings.TextSize
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("TextBox"), UDim.new(0, 5)
                vc.InputBegan:Connect(function(a, b)
                  a = a
                  if not b and a.KeyCode == va.Bind then
                    pcall(va.Function)
                  end
                end)
                {
                  Set = function(a, b)
                    a = a
                    va.Bind = b
                    vb.Text = b.Name
                    vb.Size = UDim2.new(0, vb.TextBounds.X + 10, 1, -4)
                    vb.Position = UDim2.new(1, -vb.AbsoluteSize.X - 2, 0, 2)
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = d,
                  Bind = c,
                  Holder = Instance.new("Frame")
                }:Set(c)
                return {
                  Set = function(a, b)
                    a = a
                    va.Bind = b
                    vb.Text = b.Name
                    vb.Size = UDim2.new(0, vb.TextBounds.X + 10, 1, -4)
                    vb.Position = UDim2.new(1, -vb.AbsoluteSize.X - 2, 0, 2)
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = d,
                  Bind = c,
                  Holder = Instance.new("Frame")
                }
              end,
              AddToggleBind = function(a, b, c, d, e)
                a = a
                vc.BindToggles[b] = d
                Instance.new("Frame").Name = "ToggleBind_Holder"
                Instance.new("Frame").BackgroundColor3 = vb.Settings.ItemHolderColor
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 30)
                Instance.new("Frame").Parent = vd
                Instance.new("Frame").InputBegan:Connect(function(a, b)
                  a = a
                  if not b and a.UserInputType == Enum.UserInputType.MouseButton1 then
                    va.Size = UDim2.new(0, 24, 0, 24)
                    va.Position = UDim2.new(1, -vb.AbsoluteSize.X - 29, 0, 3)
                  end
                end)
                Instance.new("Frame").InputEnded:Connect(function(a, b)
                  a = a
                  if not b and a.UserInputType == Enum.UserInputType.MouseButton1 then
                    va.BindToggles[vb] = not va.BindToggles[vb]
                    vc:Toggle(va.BindToggles[vb])
                    vd.Size = UDim2.new(0, 26, 0, 26)
                    vd.Position = UDim2.new(1, -ve.AbsoluteSize.X - 30, 0, 2)
                  end
                end)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(0, 5, 0,5, -7)
                Instance.new("TextLabel").Size = UDim2.new(1, -112, 0, 14)
                Instance.new("TextLabel").Font = vb.Settings.Font
                Instance.new("TextLabel").Text = b
                Instance.new("TextLabel").TextColor3 = vb.Settings.TextColor
                Instance.new("TextLabel").TextSize = vb.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                Instance.new("TextLabel").TextXAlignment = Enum.TextXAlignment.Left
                Instance.new("TextBox").Parent, Instance.new("TextBox").Name = Instance.new("Frame"), "Box"
                Instance.new("TextBox").BackgroundColor3 = vb.Settings.DefaultItemColor
                Instance.new("TextBox").Position = UDim2.new(1, -62, 0, 2)
                Instance.new("TextBox").Size = UDim2.new(0, 60, 1, -4)
                Instance.new("TextBox").ClearTextOnFocus = false
                Instance.new("TextBox").Font = vb.Settings.Font
                Instance.new("TextBox").Text = ""
                Instance.new("TextBox").TextColor3 = vb.Settings.TextColor
                Instance.new("TextBox").TextEditable = false
                Instance.new("TextBox").TextSize = vb.Settings.TextSize
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("TextBox"), UDim.new(0, 5)
                Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "ToggleBind_Indicator"
                Instance.new("Frame").BackgroundColor3 = vb.Settings.DefaultItemColor
                Instance.new("Frame").Position = UDim2.new(1, -90, 0, 2)
                Instance.new("Frame").Size = UDim2.new(0, 26, 0, 26)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                ve.InputBegan:Connect(function(a, b)
                  a = a
                  if not b and a.KeyCode == va.Bind and va.Toggled then
                    pcall(va.Function)
                  end
                end)
                {
                  Set = function(a, b)
                    a = a
                    va.Bind = b
                    vb.Text = b.Name
                    vb.Size = UDim2.new(0, vb.TextBounds.X + 10, 1, -4)
                    vb.Position = UDim2.new(1, -vb.AbsoluteSize.X - 2, 0, 2)
                    vc.Position = UDim2.new(1, -vb.AbsoluteSize.X - 30, 0, 2)
                  end,
                  Toggle = function(a, b)
                    a = a
                    if b then
                    end
                    CreateCircularRipple(va, vb.ThemeColor or vc.Settings.DefaultItemColor, b)
                    if b then
                      vc.ColourObjects[va] = "BackgroundColor3"
                    elseif vc.ColourObjects[va] then
                      vc.ColourObjects[va] = nil
                    end
                    vd.Toggled = b
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = e,
                  Toggled = d,
                  Bind = c,
                  Holder = Instance.new("Frame")
                }:Set(c)
                {
                  Set = function(a, b)
                    a = a
                    va.Bind = b
                    vb.Text = b.Name
                    vb.Size = UDim2.new(0, vb.TextBounds.X + 10, 1, -4)
                    vb.Position = UDim2.new(1, -vb.AbsoluteSize.X - 2, 0, 2)
                    vc.Position = UDim2.new(1, -vb.AbsoluteSize.X - 30, 0, 2)
                  end,
                  Toggle = function(a, b)
                    a = a
                    if b then
                    end
                    CreateCircularRipple(va, vb.ThemeColor or vc.Settings.DefaultItemColor, b)
                    if b then
                      vc.ColourObjects[va] = "BackgroundColor3"
                    elseif vc.ColourObjects[va] then
                      vc.ColourObjects[va] = nil
                    end
                    vd.Toggled = b
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = e,
                  Toggled = d,
                  Bind = c,
                  Holder = Instance.new("Frame")
                }:Toggle(d)
                return {
                  Set = function(a, b)
                    a = a
                    va.Bind = b
                    vb.Text = b.Name
                    vb.Size = UDim2.new(0, vb.TextBounds.X + 10, 1, -4)
                    vb.Position = UDim2.new(1, -vb.AbsoluteSize.X - 2, 0, 2)
                    vc.Position = UDim2.new(1, -vb.AbsoluteSize.X - 30, 0, 2)
                  end,
                  Toggle = function(a, b)
                    a = a
                    if b then
                    end
                    CreateCircularRipple(va, vb.ThemeColor or vc.Settings.DefaultItemColor, b)
                    if b then
                      vc.ColourObjects[va] = "BackgroundColor3"
                    elseif vc.ColourObjects[va] then
                      vc.ColourObjects[va] = nil
                    end
                    vd.Toggled = b
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = e,
                  Toggled = d,
                  Bind = c,
                  Holder = Instance.new("Frame")
                }
              end
            }
          end
        }
      end
    }:SetTheme({
      Tabs = {},
      Toggle = function(a, b)
        a = a
        if b then
        end
        va:Create(vb, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
          Size = UDim2.new(0, 440 or vc.TextBounds.X + 3 + vd.TextBounds.X + 20, 0, 40)
        }):Play()
        if b then
        end
        va:Create(ve, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
          Size = UDim2.new(1, 0, 0, 350 or 0)
        }):Play()
        if b then
        end
        va:Create(vg, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
          Position = UDim2.new(0, 0, 1, -5 or -10)
        }):Play()
      end,
      SetTheme = function(a, b)
        a = a
        va.ThemeColor, vb.ThemeColor = b, b
        for fg, fh in next, va.ColourObjects, nil do
          fg[fh] = b
        end
      end,
      SetStartupTab = function(a, b)
        a = a
        for fg, fh in next, va.Tabs, nil do
          if fh == b then
            fh:Show()
          end
        end
      end,
      ThemeColor = b.ThemeColor,
      Toggled = true,
      ToggleKey = b.ToggleKey,
      Gui = vc,
      AddTab = function(a, b)
        a = a
        Instance.new("ScrollingFrame").Name = "Tab"
        Instance.new("ScrollingFrame").Parent = vd
        Instance.new("ScrollingFrame").Active = true
        Instance.new("ScrollingFrame").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        Instance.new("ScrollingFrame").BackgroundTransparency = 1
        Instance.new("ScrollingFrame").BorderSizePixel = 0
        Instance.new("ScrollingFrame").Size = UDim2.new(1, 0, 1, 0)
        Instance.new("ScrollingFrame").CanvasSize = UDim2.new(0, 0, 0, 0)
        Instance.new("ScrollingFrame").ScrollBarImageColor3 = Color3.fromRGB(0, 0, 0)
        Instance.new("ScrollingFrame").ScrollBarThickness = 5
        Instance.new("ScrollingFrame").Visible = false
        Instance.new("ScrollingFrame").ChildAdded:Connect(function(a)
          a = a
          if not a.ClassName:find("UI") then
            va.CanvasSize = va.CanvasSize + UDim2.new(0, 0, 0, a.AbsoluteSize.Y + 5)
          end
        end)
        Instance.new("UIListLayout").Parent = Instance.new("ScrollingFrame")
        Instance.new("UIListLayout").SortOrder = Enum.SortOrder.LayoutOrder
        Instance.new("UIListLayout").Padding = UDim.new(0, 5)
        Instance.new("UIPadding").Parent, Instance.new("UIPadding").Archivable = Instance.new("ScrollingFrame"), false
        Instance.new("UIPadding").PaddingBottom = UDim.new(0, 5)
        Instance.new("UIPadding").PaddingLeft = UDim.new(0, 5)
        Instance.new("UIPadding").PaddingRight = UDim.new(0, 5)
        Instance.new("UIPadding").PaddingTop = UDim.new(0, 5)
        Instance.new("Frame").Name = "Button_Holder"
        Instance.new("Frame").BackgroundColor3 = vc.Settings.TabButtonColor
        Instance.new("Frame").Size = UDim2.new(1, -10, 0, 30)
        Instance.new("Frame").Parent = ve
        Instance.new("Frame").MouseEnter:Connect(function()
          if not va:IsShown() then
            vb:Create(vc, TweenInfo.new(0,2), {
              BackgroundColor3 = vd.Settings.TabButtonIndicatorColors.Hover
            }):Play()
          end
        end)
        Instance.new("Frame").MouseLeave:Connect(function()
          if not va:IsShown() then
            vb:Create(vc, TweenInfo.new(0,2), {
              BackgroundColor3 = vd.Settings.TabButtonIndicatorColors.Disabled
            }):Play()
          end
        end)
        Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
        Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "Indicator"
        Instance.new("Frame").BackgroundColor3 = vc.Settings.TabButtonIndicatorColors.Disabled
        Instance.new("Frame").Position = UDim2.new(0, 4, 0, 8)
        Instance.new("Frame").Size = UDim2.new(0, 2, 1, -16)
        Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
        Instance.new("TextButton").Parent, Instance.new("TextButton").Name = Instance.new("Frame"), "Button"
        Instance.new("TextButton").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        Instance.new("TextButton").BackgroundTransparency = 1
        Instance.new("TextButton").Position = UDim2.new(0, 10, 0, 0)
        Instance.new("TextButton").Size = UDim2.new(1, -10, 1, 0)
        Instance.new("TextButton").Font = vc.Settings.Font
        Instance.new("TextButton").Text = b
        Instance.new("TextButton").TextColor3 = vc.Settings.TextColor
        Instance.new("TextButton").TextSize = vc.Settings.TextSize
        Instance.new("TextButton").MouseButton1Click:Connect(function()
          va:Show()
        end)
        table.insert(va.Tabs, {
          Toggles = {},
          BindToggles = {},
          SliderToggles = {},
          Show = function(a)
            a = a
            for fe, fg in next, va.Tabs, nil do
              fg.Tab.Visible = fg.Tab == vb
              vc:Create(fg.Indicator, TweenInfo.new(0,2), {
                BackgroundColor3 = vd.Settings.TabButtonIndicatorColors["Enabled" or "Disabled"]
              }):Play()
            end
          end,
          Hide = function(a)
            a = a
            va.Visible = false
          end,
          IsShown = function(a)
            a = a
            return va.Visible
          end,
          Indicator = Instance.new("Frame"),
          Tab = Instance.new("ScrollingFrame"),
          Holder = vd,
          AddCategory = function(a, b)
            a = a
            Instance.new("Frame").Name = "Category_Frame"
            Instance.new("Frame").BackgroundColor3 = vb.Settings.CategoryColor
            Instance.new("Frame").Position = UDim2.new(0, 5, 0, 5)
            Instance.new("Frame").Size = UDim2.new(1, 0, 0, 35)
            Instance.new("Frame").Parent = va
            Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
            Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Category_Title"
            Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            Instance.new("TextLabel").BackgroundTransparency = 1
            Instance.new("TextLabel").Position = UDim2.new(0, 2, 0, 8)
            Instance.new("TextLabel").Size = UDim2.new(1, -4, 0, 14)
            Instance.new("TextLabel").Font = vb.Settings.CategoryFont
            Instance.new("TextLabel").Text = b
            Instance.new("TextLabel").TextColor3 = vb.Settings.TextColor
            Instance.new("TextLabel").TextSize = vb.Settings.TextSize
            Instance.new("TextLabel").TextWrapped = true
            Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "Category_List"
            Instance.new("Frame").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            Instance.new("Frame").BackgroundTransparency = 1
            Instance.new("Frame").Position = UDim2.new(0, 0, 0, 30)
            Instance.new("Frame").Size = UDim2.new(1, 0, 1, -30)
            Instance.new("Frame").ChildAdded:Connect(function(a)
              a = a
              if not a.ClassName:find("UI") then
                va.Size = va.Size + UDim2.new(0, 0, 0, a.AbsoluteSize.Y + 5)
                vb.CanvasSize = vb.CanvasSize + UDim2.new(0, 0, 0, a.AbsoluteSize.Y + 5)
              end
            end)
            Instance.new("UIListLayout").Parent = Instance.new("Frame")
            Instance.new("UIListLayout").SortOrder = Enum.SortOrder.LayoutOrder
            Instance.new("UIPadding").Parent, Instance.new("UIListLayout").Padding = Instance.new("Frame"), UDim.new(0, 5)
            Instance.new("UIPadding").PaddingBottom = UDim.new(0, 5)
            Instance.new("UIPadding").PaddingLeft = UDim.new(0, 5)
            Instance.new("UIPadding").PaddingRight = UDim.new(0, 5)
            Instance.new("UIPadding").PaddingTop = UDim.new(0, 5)
            return {
              Frame = Instance.new("Frame"),
              Holder = va,
              AddButton = function(a, b, c)
                a = a
                Instance.new("Frame").Name = "Button_Holder"
                Instance.new("Frame").BackgroundColor3 = va.Settings.ItemHolderColor
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 30)
                Instance.new("Frame").Parent = vb
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("TextButton").Parent, Instance.new("TextButton").Name = Instance.new("Frame"), "Button"
                Instance.new("TextButton").AutoButtonColor = false
                Instance.new("TextButton").BackgroundColor3 = va.Settings.DefaultItemColor
                Instance.new("TextButton").Position = UDim2.new(0, 2, 0, 2)
                Instance.new("TextButton").Size = UDim2.new(1, -4, 1, -4)
                Instance.new("TextButton").Font = va.Settings.Font
                Instance.new("TextButton").Text = b
                Instance.new("TextButton").TextColor3 = va.Settings.TextColor
                Instance.new("TextButton").TextSize = va.Settings.TextSize
                Instance.new("TextButton").TextWrapped = true
                Instance.new("TextButton").MouseButton1Down:Connect(function()
                  va.TextSize = vb.Settings.TextSize - 1
                end)
                Instance.new("TextButton").MouseLeave:Connect(function()
                  va.TextSize = vb.Settings.TextSize
                end)
                Instance.new("TextButton").MouseButton1Up:Connect(function()
                  pcall(va.Function)
                  vb.TextSize = vc.Settings.TextSize
                  CreateWaveRipple(vb, 0,8, Color3.fromRGB(255, 255, 255))
                end)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("TextButton"), UDim.new(0, 5)
                return {
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = c,
                  Button = Instance.new("TextButton"),
                  Holder = Instance.new("Frame")
                }
              end,
              AddToggle = function(a, b, c, d)
                a = a
                vc.Toggles[b] = c
                Instance.new("Frame").Name = b
                Instance.new("Frame").BackgroundColor3 = Color3.fromRGB(20, 20, 20)
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 30)
                Instance.new("Frame").Parent = vd
                Instance.new("Frame").InputBegan:Connect(function(a, b)
                  a = a
                  if not b and a.UserInputType == Enum.UserInputType.MouseButton1 then
                    va.Size = UDim2.new(0, 24, 0, 24)
                    va.Position = UDim2.new(1, -27, 0, 3)
                  end
                end)
                Instance.new("Frame").InputEnded:Connect(function(a, b)
                  a = a
                  if not b and a.UserInputType == Enum.UserInputType.MouseButton1 then
                    va.Toggles[vb] = not va.Toggles[vb]
                    vc:Set(va.Toggles[vb])
                    vd.Size = UDim2.new(0, 26, 0, 26)
                    vd.Position = UDim2.new(1, -28, 0, 2)
                  end
                end)
                Instance.new("Frame").MouseLeave:Connect(function()
                  va.Size = UDim2.new(0, 26, 0, 26)
                  va.Position = UDim2.new(1, -28, 0, 2)
                end)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(0, 5, 0,5, -7)
                Instance.new("TextLabel").Size = UDim2.new(1, -38, 0, 14)
                Instance.new("TextLabel").Font = Enum.Font.SourceSans
                Instance.new("TextLabel").Text = b
                Instance.new("TextLabel").TextColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").TextSize = 14
                Instance.new("TextLabel").TextWrapped = true
                Instance.new("TextLabel").TextXAlignment = Enum.TextXAlignment.Left
                Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "Toggle_Indicator"
                Instance.new("Frame").BackgroundColor3 = vb.Settings.DefaultItemColor
                Instance.new("Frame").Position = UDim2.new(1, -28, 0, 2)
                Instance.new("Frame").Size = UDim2.new(0, 26, 0, 26)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                {
                  Set = function(a, b)
                    a = a
                    if b then
                    end
                    CreateCircularRipple(va, vb.ThemeColor or vc.Settings.DefaultItemColor, b)
                    if b then
                      vc.ColourObjects[va] = "BackgroundColor3"
                    elseif vc.ColourObjects[va] then
                      vc.ColourObjects[va] = nil
                    end
                    vd.Toggled = b
                    pcall(vd.Function, b)
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = d,
                  Toggled = c,
                  Holder = Instance.new("Frame")
                }:Set(c)
                return {
                  Set = function(a, b)
                    a = a
                    if b then
                    end
                    CreateCircularRipple(va, vb.ThemeColor or vc.Settings.DefaultItemColor, b)
                    if b then
                      vc.ColourObjects[va] = "BackgroundColor3"
                    elseif vc.ColourObjects[va] then
                      vc.ColourObjects[va] = nil
                    end
                    vd.Toggled = b
                    pcall(vd.Function, b)
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = d,
                  Toggled = c,
                  Holder = Instance.new("Frame")
                }
              end,
              AddBox = function(a, b, c)
                a = a
                Instance.new("Frame").Name = "Box_Holder"
                Instance.new("Frame").BackgroundColor3 = Color3.fromRGB(20, 20, 20)
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 30)
                Instance.new("Frame").Parent = va
                Instance.new("Frame").MouseEnter:Connect(function()
                  ve:Create(vg, TweenInfo.new(0,2), {
                    Size = UDim2.new(1, -(vc or vd), 1, -4),
                    Position = UDim2.new(0, vc or vd, 0, 2)
                  }):Play()
                end)
                Instance.new("Frame").MouseLeave:Connect(function()
                  if va:IsFocused() then
                    va.FocusLost:Wait()
                  end
                  vb:Create(va, TweenInfo.new(0,2), {
                    Size = UDim2.new(0, vc, 1, -4),
                    Position = UDim2.new(1, -vc - 2, 0, 2)
                  }):Play()
                end)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(0, 5, 0,5, -7)
                Instance.new("TextLabel").Size = UDim2.new(1, -112, 0, 14)
                Instance.new("TextLabel").Font = vc.Settings.Font
                Instance.new("TextLabel").Text = b
                Instance.new("TextLabel").TextColor3 = vc.Settings.TextColor
                Instance.new("TextLabel").TextSize = vc.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                Instance.new("TextLabel").TextXAlignment = Enum.TextXAlignment.Left
                Instance.new("TextLabel").Size = UDim2.new(0, Instance.new("TextLabel").TextBounds.X + 2, 0, 14)
                Instance.new("TextBox").Parent, Instance.new("TextBox").Name = Instance.new("Frame"), "Box"
                Instance.new("TextBox").BackgroundColor3 = vc.Settings.DefaultItemColor
                Instance.new("TextBox").Position = UDim2.new(1, -102, 0, 2)
                Instance.new("TextBox").Size = UDim2.new(0, 100, 1, -4)
                Instance.new("TextBox").Font = vc.Settings.Font
                Instance.new("TextBox").Text = ""
                Instance.new("TextBox").TextColor3 = vc.Settings.TextColor
                Instance.new("TextBox").TextSize = vc.Settings.TextSize
                Instance.new("TextBox").TextWrapped = true
                Instance.new("TextBox").FocusLost:Connect(function()
                  pcall(va.Function, vb.Text)
                end)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("TextBox"), UDim.new(0, 5)
                return {
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = c,
                  Box = Instance.new("TextBox"),
                  Holder = Instance.new("Frame")
                }
              end,
              AddLabel = function(a, b)
                a = a
                Instance.new("Frame").Name = "Label_Holder"
                Instance.new("Frame").BackgroundColor3 = va.Settings.ItemHolderColor
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 18)
                Instance.new("Frame").Parent = vb
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(0, 5, 0,5, -7)
                Instance.new("TextLabel").Size = UDim2.new(1, -10, 0, 14)
                Instance.new("TextLabel").Font = va.Settings.Font
                Instance.new("TextLabel").Text = b
                Instance.new("TextLabel").TextColor3 = va.Settings.TextColor
                Instance.new("TextLabel").TextSize = va.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                return {
                  Label = Instance.new("TextLabel"),
                  Holder = Instance.new("Frame")
                }
              end,
              AddDualLabel = function(a, b)
                a = a
                Instance.new("Frame").Name = "DualLabel_Holder"
                Instance.new("Frame").BackgroundColor3 = va.Settings.ItemHolderColor
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 18)
                Instance.new("Frame").Parent = vb
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label1"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(0, 5, 0,5, -7)
                Instance.new("TextLabel").Size = UDim2.new(0,5, -5, 0, 14)
                Instance.new("TextLabel").Font = va.Settings.Font
                Instance.new("TextLabel").Text = b[1]
                Instance.new("TextLabel").TextColor3 = va.Settings.TextColor
                Instance.new("TextLabel").TextSize = va.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                Instance.new("TextLabel").TextXAlignment = Enum.TextXAlignment.Left
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label2"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(0,5, 0, 0,5, -7)
                Instance.new("TextLabel").Size = UDim2.new(0,5, -5, 0, 14)
                Instance.new("TextLabel").Font = va.Settings.Font
                Instance.new("TextLabel").Text = b[2]
                Instance.new("TextLabel").TextColor3 = va.Settings.TextColor
                Instance.new("TextLabel").TextSize = va.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                Instance.new("TextLabel").TextXAlignment = Enum.TextXAlignment.Right
                return {
                  Label2 = Instance.new("TextLabel"),
                  Label1 = Instance.new("TextLabel"),
                  Holder = Instance.new("Frame")
                }
              end,
              AddSlider = function(a, b, c, d, e, g, h)
                a = a
                Instance.new("Frame").Name = "Slider_Holder"
                Instance.new("Frame").BackgroundColor3 = vb.Settings.ItemHolderColor
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 30)
                Instance.new("Frame").Parent = vc
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "Slider_Background"
                Instance.new("Frame").BackgroundColor3 = vb.Settings.DefaultItemColor
                Instance.new("Frame").ClipsDescendants = true
                Instance.new("Frame").Position = UDim2.new(0, 5, 0, 18)
                Instance.new("Frame").Size = UDim2.new(1, -10, 1, -20)
                Instance.new("Frame").InputBegan:Connect(function(a, b)
                  a = a
                  repeat
                    if not b and a.UserInputType == Enum.UserInputType.MouseButton1 then
                      wait()
                      vc:Set(math.floor((vd + math.clamp((va.X - vb.AbsolutePosition.X) / vb.AbsoluteSize.X, 0, 1) * (ve - vd)) * 10) / 10)
                    end
                  until not vg:IsMouseButtonPressed(Enum.UserInputType.MouseButton1)
                end)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "Slider"
                Instance.new("Frame").BackgroundColor3 = vg.ThemeColor
                Instance.new("Frame").Size = UDim2.new(0,75, 0, 1, 0)
                vb.ColourObjects[Instance.new("Frame")] = "BackgroundColor3"
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(0, 5, 0, 2)
                Instance.new("TextLabel").Size = UDim2.new(1, -10, 0, 14)
                Instance.new("TextLabel").Font = vb.Settings.Font
                Instance.new("TextLabel").Text = ""
                Instance.new("TextLabel").TextColor3 = vb.Settings.TextColor
                Instance.new("TextLabel").TextSize = vb.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                {
                  Set = function(a, b)
                    a = a
                    b = va or vb
                    b = vb or vb
                    vd.Text = ve .. " - " .. tostring(vg.Value)
                    vh:Create(vj, TweenInfo.new(0,2, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                      Size = UDim2.new(1 - (va - b) / (va - vb), 0, 1, 0)
                    }):Play()
                    vg.Value = b
                    pcall(vg.Function, b)
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = h,
                  Value = e,
                  Holder = Instance.new("Frame")
                }:Set(e)
                return {
                  Set = function(a, b)
                    a = a
                    b = va or vb
                    b = vb or vb
                    vd.Text = ve .. " - " .. tostring(vg.Value)
                    vh:Create(vj, TweenInfo.new(0,2, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                      Size = UDim2.new(1 - (va - b) / (va - vb), 0, 1, 0)
                    }):Play()
                    vg.Value = b
                    pcall(vg.Function, b)
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = h,
                  Value = e,
                  Holder = Instance.new("Frame")
                }
              end,
              AddToggleSlider = function(a, b, c, d, e, g, h, j)
                a = a
                Instance.new("Frame").Name = "ToggleSlider_Holder"
                Instance.new("Frame").BackgroundColor3 = vc.Settings.ItemHolderColor
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 30)
                Instance.new("Frame").Parent = vd
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "Slider_Background"
                Instance.new("Frame").BackgroundColor3 = vc.Settings.DefaultItemColor
                Instance.new("Frame").ClipsDescendants = true
                Instance.new("Frame").Position = UDim2.new(0, 30, 0, 18)
                Instance.new("Frame").Size = UDim2.new(1, -35, 1, -20)
                Instance.new("Frame").InputBegan:Connect(function(a, b)
                  a = a
                  repeat
                    if not b and a.UserInputType == Enum.UserInputType.MouseButton1 then
                      wait()
                      vc:Set(math.floor((vd + math.clamp((va.X - vb.AbsolutePosition.X) / vb.AbsoluteSize.X, 0, 1) * (ve - vd)) * 10) / 10)
                    end
                  until not vg:IsMouseButtonPressed(Enum.UserInputType.MouseButton1)
                end)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "Slider"
                Instance.new("Frame").BackgroundColor3 = vb.ThemeColor
                Instance.new("Frame").Size = UDim2.new(0,75, 0, 1, 0)
                vc.ColourObjects[Instance.new("Frame")] = "BackgroundColor3"
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(0, 30, 0, 2)
                Instance.new("TextLabel").Size = UDim2.new(1, -35, 0, 14)
                Instance.new("TextLabel").Font = vc.Settings.Font
                Instance.new("TextLabel").Text = ""
                Instance.new("TextLabel").TextColor3 = vc.Settings.TextColor
                Instance.new("TextLabel").TextSize = vc.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                Instance.new("TextButton").Parent, Instance.new("TextButton").Name = Instance.new("Frame"), "ToggleSlider_Indicator"
                Instance.new("TextButton").BackgroundColor3 = vc.Settings.DefaultItemColor
                Instance.new("TextButton").Position = UDim2.new(0, 2, 0, 2)
                Instance.new("TextButton").Size = UDim2.new(0, 26, 0, 26)
                Instance.new("TextButton").AutoButtonColor = false
                Instance.new("TextButton").Font = vc.Settings.Font
                Instance.new("TextButton").Text = ""
                Instance.new("TextButton").MouseButton1Down:Connect(function()
                  va.Size = UDim2.new(0, 24, 0, 24)
                  va.Position = UDim2.new(0, 3, 0, 3)
                end)
                Instance.new("TextButton").MouseButton1Up:Connect(function()
                  va.Toggled = not va.Toggled
                  va:Toggle(va.Toggled)
                  vb.Size = UDim2.new(0, 26, 0, 26)
                  vb.Position = UDim2.new(0, 2, 0, 2)
                end)
                Instance.new("Frame").MouseLeave:Connect(function()
                  va.Size = UDim2.new(0, 26, 0, 26)
                  va.Position = UDim2.new(0, 2, 0, 2)
                end)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("TextButton"), UDim.new(0, 5)
                {
                  Set = function(a, b)
                    a = a
                    b = va or vb
                    b = vb or vb
                    if b == ve then
                      vg.Text = vh .. " - " .. tostring(vd.Value)
                      vj:Create(vk, TweenInfo.new(0,2, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                        Size = UDim2.new(1 - (va - b) / (va - vb), 0, 1, 0)
                      }):Play()
                      vd.Value = b
                      pcall(vd.Function, b)
                    end
                  end,
                  Toggle = function(a, b)
                    a = a
                    if b then
                    end
                    CreateCircularRipple(va, vb.ThemeColor or vc.Settings.DefaultItemColor, b)
                    if b then
                      vc.ColourObjects[va] = "BackgroundColor3"
                    elseif vc.ColourObjects[va] then
                      vc.ColourObjects[va] = nil
                    end
                    vd.Toggled = b
                    vd:Set(vd.Value)
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = j,
                  Toggled = h,
                  Value = e,
                  Holder = Instance.new("Frame")
                }:Set(e)
                return {
                  Set = function(a, b)
                    a = a
                    b = va or vb
                    b = vb or vb
                    if b == ve then
                      vg.Text = vh .. " - " .. tostring(vd.Value)
                      vj:Create(vk, TweenInfo.new(0,2, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                        Size = UDim2.new(1 - (va - b) / (va - vb), 0, 1, 0)
                      }):Play()
                      vd.Value = b
                      pcall(vd.Function, b)
                    end
                  end,
                  Toggle = function(a, b)
                    a = a
                    if b then
                    end
                    CreateCircularRipple(va, vb.ThemeColor or vc.Settings.DefaultItemColor, b)
                    if b then
                      vc.ColourObjects[va] = "BackgroundColor3"
                    elseif vc.ColourObjects[va] then
                      vc.ColourObjects[va] = nil
                    end
                    vd.Toggled = b
                    vd:Set(vd.Value)
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = j,
                  Toggled = h,
                  Value = e,
                  Holder = Instance.new("Frame")
                }
              end,
              AddDropdown = function(a, b, c, d)
                a = a
                Instance.new("Frame").Name = "Dropdown_Holder"
                Instance.new("Frame").BackgroundColor3 = vd.Settings.ItemHolderColor
                Instance.new("Frame").ClipsDescendants = true
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 30)
                Instance.new("Frame").Parent = ve
                Instance.new("Frame").InputBegan:Connect(function(a, b)
                  a = a
                  if not b and a.UserInputType == Enum.UserInputType.MouseButton1 and not va then
                    vb = not vb
                    vc:Toggle(vb)
                  end
                end)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "Labels_Holder"
                Instance.new("Frame").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("Frame").BackgroundTransparency = 1
                Instance.new("Frame").Position = UDim2.new(0, 2, 0, 0)
                Instance.new("Frame").Size = UDim2.new(1, -30, 0, 30)
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").BorderColor3 = Color3.fromRGB(27, 42, 53)
                Instance.new("TextLabel").Position = UDim2.new(0, 5, 0,5, -7)
                Instance.new("TextLabel").Size = UDim2.new(0,5, -2, 0, 14)
                Instance.new("TextLabel").Font = vd.Settings.Font
                Instance.new("TextLabel").Text = b
                Instance.new("TextLabel").TextColor3 = vd.Settings.TextColor
                Instance.new("TextLabel").TextSize = vd.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                Instance.new("TextLabel").TextXAlignment = Enum.TextXAlignment.Left
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Selected_Display"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").BorderColor3 = Color3.fromRGB(27, 42, 53)
                Instance.new("TextLabel").Position = UDim2.new(0,5, 3, 0, 8)
                Instance.new("TextLabel").Size = UDim2.new(0,5, -5, 0, 14)
                Instance.new("TextLabel").Font = vd.Settings.Font
                Instance.new("TextLabel").Text = ""
                Instance.new("TextLabel").TextColor3 = vd.Settings.TextColor
                Instance.new("TextLabel").TextSize = vd.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                Instance.new("TextLabel").TextXAlignment = Enum.TextXAlignment.Right
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Dropdown_Indicator"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(1, -28, 0, 2)
                Instance.new("TextLabel").Rotation = -90
                Instance.new("TextLabel").Size = UDim2.new(0, 26, 0, 26)
                Instance.new("TextLabel").Font = vd.Settings.DropdownIndicatorFont
                Instance.new("TextLabel").Text = "<"
                Instance.new("TextLabel").TextColor3 = vd.Settings.TextColor
                Instance.new("TextLabel").TextSize = vd.Settings.DropdownIndicatorTextSize
                Instance.new("ScrollingFrame").Parent, Instance.new("ScrollingFrame").Name = Instance.new("Frame"), "Dropdown_List"
                Instance.new("ScrollingFrame").Active = true
                Instance.new("ScrollingFrame").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("ScrollingFrame").BackgroundTransparency = 1
                Instance.new("ScrollingFrame").BorderSizePixel = 0
                Instance.new("ScrollingFrame").Position = UDim2.new(0, 0, 0, 30)
                Instance.new("ScrollingFrame").Size = UDim2.new(1, 0, 1, -30)
                Instance.new("ScrollingFrame").CanvasSize = UDim2.new(0, 0, 0, 2)
                Instance.new("ScrollingFrame").ScrollBarImageColor3 = Color3.fromRGB(0, 0, 0)
                Instance.new("ScrollingFrame").ScrollBarThickness = 5
                Instance.new("ScrollingFrame").ChildAdded:Connect(function(a)
                  a = a
                  if not a.ClassName:find("UI") then
                    va(UDim2.new(0, 0, 0, a.AbsoluteSize.Y + 2))
                  end
                end)
                Instance.new("ScrollingFrame").ChildRemoved:Connect(function(a)
                  a = a
                  if not a.ClassName:find("UI") then
                    va(UDim2.new(0, 0, 0, -a.AbsoluteSize.Y - 2))
                  end
                end)
                Instance.new("UIPadding").Parent = Instance.new("ScrollingFrame")
                Instance.new("UIPadding").PaddingBottom = UDim.new(0, 2)
                Instance.new("UIPadding").PaddingLeft = UDim.new(0, 2)
                Instance.new("UIPadding").PaddingRight = UDim.new(0, 2)
                Instance.new("UIListLayout").Parent, Instance.new("UIPadding").PaddingTop = Instance.new("ScrollingFrame"), UDim.new(0, 2)
                Instance.new("UIListLayout").SortOrder = Enum.SortOrder.LayoutOrder
                Instance.new("UIListLayout").Padding = UDim.new(0, 2)
                for fQ, fW in next, c, nil do
                  {
                    Toggle = function(a, b)
                      a = a
                      if not va then
                        va = true
                        if b then
                        end
                        if b then
                        end
                        vc:Create(vd, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                          Rotation = 0 or -90
                        }):Play()
                        vc:Create(ve, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                          Size = ve.Size + UDim2.new(0, 0, 0, 2 + (vb.MaxVisibleItems or #vb.Items) * 22 or -(2 + (vb.MaxVisibleItems or #vb.Items) * 22))
                        }):Play()
                        vc:Create(vg, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                          Size = vg.Size + UDim2.new(0, 0, 0, 2 + (vb.MaxVisibleItems or #vb.Items) * 22 or -(2 + (vb.MaxVisibleItems or #vb.Items) * 22))
                        }):Play()
                        vc:Create(vh, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                          CanvasSize = vh.CanvasSize + UDim2.new(0, 0, 0, 2 + (vb.MaxVisibleItems or #vb.Items) * 22 or -(2 + (vb.MaxVisibleItems or #vb.Items) * 22))
                        }):Play()
                        wait(0,5)
                        va = false
                        vj()
                        vk()
                      end
                    end,
                    AddItem = function(a, b)
                      a = a
                      if va then
                        table.insert(vb.Add, {
                          Name = b,
                          Holder = Instance.new("TextButton")
                        })
                        return
                      end
                      Instance.new("TextButton").Name = "Dropdown_Item"
                      Instance.new("TextButton").BackgroundColor3 = Color3.fromRGB(25, 25, 25)
                      Instance.new("TextButton").Size = UDim2.new(1, 0, 0, 20)
                      Instance.new("TextButton").Font = vc.Settings.Font
                      Instance.new("TextButton").Text = b
                      Instance.new("TextButton").TextColor3 = vc.Settings.TextColor
                      Instance.new("TextButton").TextSize = vc.Settings.TextSize
                      Instance.new("TextButton").TextWrapped = true
                      Instance.new("TextButton").Parent = vd
                      Instance.new("TextButton").MouseButton1Click:Connect(function()
                        va.Text = vb
                        vc.Selected = vb
                        pcall(vc.Function, vb)
                      end)
                      Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("TextButton"), UDim.new(0, 5)
                      table.insert(vg.Items, {
                        Name = b,
                        Holder = Instance.new("TextButton")
                      })
                    end,
                    RemoveItem = function(a, b)
                      a = a
                      if va then
                        for fg, fh in next, vb.Items, nil do
                          if fh.Name == b then
                            table.insert(vc.Remove, fh)
                          else
                          end
                        end
                        return
                      end
                      for fg, fh in next, vb.Items, nil do
                        if fh.Name == b then
                          table.remove(vb.Items, fg)
                          fh.Holder:Destroy()
                        else
                        end
                      end
                    end,
                    AddToolTip = function(a, b)
                      a = a
                      AddToolTip(va, vb, b)
                    end,
                    Function = d,
                    MaxVisibleItems = 10,
                    Selected = nil,
                    Items = {},
                    Holder = Instance.new("Frame")
                  }:AddItem(fW)
                end
                return {
                  Toggle = function(a, b)
                    a = a
                    if not va then
                      va = true
                      if b then
                      end
                      if b then
                      end
                      vc:Create(vd, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                        Rotation = 0 or -90
                      }):Play()
                      vc:Create(ve, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                        Size = ve.Size + UDim2.new(0, 0, 0, 2 + (vb.MaxVisibleItems or #vb.Items) * 22 or -(2 + (vb.MaxVisibleItems or #vb.Items) * 22))
                      }):Play()
                      vc:Create(vg, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                        Size = vg.Size + UDim2.new(0, 0, 0, 2 + (vb.MaxVisibleItems or #vb.Items) * 22 or -(2 + (vb.MaxVisibleItems or #vb.Items) * 22))
                      }):Play()
                      vc:Create(vh, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                        CanvasSize = vh.CanvasSize + UDim2.new(0, 0, 0, 2 + (vb.MaxVisibleItems or #vb.Items) * 22 or -(2 + (vb.MaxVisibleItems or #vb.Items) * 22))
                      }):Play()
                      wait(0,5)
                      va = false
                      vj()
                      vk()
                    end
                  end,
                  AddItem = function(a, b)
                    a = a
                    if va then
                      table.insert(vb.Add, {
                        Name = b,
                        Holder = Instance.new("TextButton")
                      })
                      return
                    end
                    Instance.new("TextButton").Name = "Dropdown_Item"
                    Instance.new("TextButton").BackgroundColor3 = Color3.fromRGB(25, 25, 25)
                    Instance.new("TextButton").Size = UDim2.new(1, 0, 0, 20)
                    Instance.new("TextButton").Font = vc.Settings.Font
                    Instance.new("TextButton").Text = b
                    Instance.new("TextButton").TextColor3 = vc.Settings.TextColor
                    Instance.new("TextButton").TextSize = vc.Settings.TextSize
                    Instance.new("TextButton").TextWrapped = true
                    Instance.new("TextButton").Parent = vd
                    Instance.new("TextButton").MouseButton1Click:Connect(function()
                      va.Text = vb
                      vc.Selected = vb
                      pcall(vc.Function, vb)
                    end)
                    Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("TextButton"), UDim.new(0, 5)
                    table.insert(vg.Items, {
                      Name = b,
                      Holder = Instance.new("TextButton")
                    })
                  end,
                  RemoveItem = function(a, b)
                    a = a
                    if va then
                      for fg, fh in next, vb.Items, nil do
                        if fh.Name == b then
                          table.insert(vc.Remove, fh)
                        else
                        end
                      end
                      return
                    end
                    for fg, fh in next, vb.Items, nil do
                      if fh.Name == b then
                        table.remove(vb.Items, fg)
                        fh.Holder:Destroy()
                      else
                      end
                    end
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = d,
                  MaxVisibleItems = 10,
                  Selected = nil,
                  Items = {},
                  Holder = Instance.new("Frame")
                }
              end,
              AddBind = function(a, b, c, d)
                a = a
                Instance.new("Frame").Name = "Bind_Holder"
                Instance.new("Frame").BackgroundColor3 = va.Settings.ItemHolderColor
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 30)
                Instance.new("Frame").Parent = vb
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(0, 5, 0,5, -7)
                Instance.new("TextLabel").Size = UDim2.new(1, -112, 0, 14)
                Instance.new("TextLabel").Font = va.Settings.Font
                Instance.new("TextLabel").Text = b
                Instance.new("TextLabel").TextColor3 = va.Settings.TextColor
                Instance.new("TextLabel").TextSize = va.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                Instance.new("TextLabel").TextXAlignment = Enum.TextXAlignment.Left
                Instance.new("TextBox").Parent, Instance.new("TextBox").Name = Instance.new("Frame"), "Box"
                Instance.new("TextBox").BackgroundColor3 = Color3.fromRGB(25, 25, 25)
                Instance.new("TextBox").Position = UDim2.new(1, -62, 0, 2)
                Instance.new("TextBox").Size = UDim2.new(0, 60, 1, -4)
                Instance.new("TextBox").ClearTextOnFocus = false
                Instance.new("TextBox").Font = va.Settings.Font
                Instance.new("TextBox").Text = ""
                Instance.new("TextBox").TextColor3 = va.Settings.TextColor
                Instance.new("TextBox").TextEditable = false
                Instance.new("TextBox").TextSize = va.Settings.TextSize
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("TextBox"), UDim.new(0, 5)
                vc.InputBegan:Connect(function(a, b)
                  a = a
                  if not b and a.KeyCode == va.Bind then
                    pcall(va.Function)
                  end
                end)
                {
                  Set = function(a, b)
                    a = a
                    va.Bind = b
                    vb.Text = b.Name
                    vb.Size = UDim2.new(0, vb.TextBounds.X + 10, 1, -4)
                    vb.Position = UDim2.new(1, -vb.AbsoluteSize.X - 2, 0, 2)
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = d,
                  Bind = c,
                  Holder = Instance.new("Frame")
                }:Set(c)
                return {
                  Set = function(a, b)
                    a = a
                    va.Bind = b
                    vb.Text = b.Name
                    vb.Size = UDim2.new(0, vb.TextBounds.X + 10, 1, -4)
                    vb.Position = UDim2.new(1, -vb.AbsoluteSize.X - 2, 0, 2)
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = d,
                  Bind = c,
                  Holder = Instance.new("Frame")
                }
              end,
              AddToggleBind = function(a, b, c, d, e)
                a = a
                vc.BindToggles[b] = d
                Instance.new("Frame").Name = "ToggleBind_Holder"
                Instance.new("Frame").BackgroundColor3 = vb.Settings.ItemHolderColor
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 30)
                Instance.new("Frame").Parent = vd
                Instance.new("Frame").InputBegan:Connect(function(a, b)
                  a = a
                  if not b and a.UserInputType == Enum.UserInputType.MouseButton1 then
                    va.Size = UDim2.new(0, 24, 0, 24)
                    va.Position = UDim2.new(1, -vb.AbsoluteSize.X - 29, 0, 3)
                  end
                end)
                Instance.new("Frame").InputEnded:Connect(function(a, b)
                  a = a
                  if not b and a.UserInputType == Enum.UserInputType.MouseButton1 then
                    va.BindToggles[vb] = not va.BindToggles[vb]
                    vc:Toggle(va.BindToggles[vb])
                    vd.Size = UDim2.new(0, 26, 0, 26)
                    vd.Position = UDim2.new(1, -ve.AbsoluteSize.X - 30, 0, 2)
                  end
                end)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(0, 5, 0,5, -7)
                Instance.new("TextLabel").Size = UDim2.new(1, -112, 0, 14)
                Instance.new("TextLabel").Font = vb.Settings.Font
                Instance.new("TextLabel").Text = b
                Instance.new("TextLabel").TextColor3 = vb.Settings.TextColor
                Instance.new("TextLabel").TextSize = vb.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                Instance.new("TextLabel").TextXAlignment = Enum.TextXAlignment.Left
                Instance.new("TextBox").Parent, Instance.new("TextBox").Name = Instance.new("Frame"), "Box"
                Instance.new("TextBox").BackgroundColor3 = vb.Settings.DefaultItemColor
                Instance.new("TextBox").Position = UDim2.new(1, -62, 0, 2)
                Instance.new("TextBox").Size = UDim2.new(0, 60, 1, -4)
                Instance.new("TextBox").ClearTextOnFocus = false
                Instance.new("TextBox").Font = vb.Settings.Font
                Instance.new("TextBox").Text = ""
                Instance.new("TextBox").TextColor3 = vb.Settings.TextColor
                Instance.new("TextBox").TextEditable = false
                Instance.new("TextBox").TextSize = vb.Settings.TextSize
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("TextBox"), UDim.new(0, 5)
                Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "ToggleBind_Indicator"
                Instance.new("Frame").BackgroundColor3 = vb.Settings.DefaultItemColor
                Instance.new("Frame").Position = UDim2.new(1, -90, 0, 2)
                Instance.new("Frame").Size = UDim2.new(0, 26, 0, 26)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                ve.InputBegan:Connect(function(a, b)
                  a = a
                  if not b and a.KeyCode == va.Bind and va.Toggled then
                    pcall(va.Function)
                  end
                end)
                {
                  Set = function(a, b)
                    a = a
                    va.Bind = b
                    vb.Text = b.Name
                    vb.Size = UDim2.new(0, vb.TextBounds.X + 10, 1, -4)
                    vb.Position = UDim2.new(1, -vb.AbsoluteSize.X - 2, 0, 2)
                    vc.Position = UDim2.new(1, -vb.AbsoluteSize.X - 30, 0, 2)
                  end,
                  Toggle = function(a, b)
                    a = a
                    if b then
                    end
                    CreateCircularRipple(va, vb.ThemeColor or vc.Settings.DefaultItemColor, b)
                    if b then
                      vc.ColourObjects[va] = "BackgroundColor3"
                    elseif vc.ColourObjects[va] then
                      vc.ColourObjects[va] = nil
                    end
                    vd.Toggled = b
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = e,
                  Toggled = d,
                  Bind = c,
                  Holder = Instance.new("Frame")
                }:Set(c)
                {
                  Set = function(a, b)
                    a = a
                    va.Bind = b
                    vb.Text = b.Name
                    vb.Size = UDim2.new(0, vb.TextBounds.X + 10, 1, -4)
                    vb.Position = UDim2.new(1, -vb.AbsoluteSize.X - 2, 0, 2)
                    vc.Position = UDim2.new(1, -vb.AbsoluteSize.X - 30, 0, 2)
                  end,
                  Toggle = function(a, b)
                    a = a
                    if b then
                    end
                    CreateCircularRipple(va, vb.ThemeColor or vc.Settings.DefaultItemColor, b)
                    if b then
                      vc.ColourObjects[va] = "BackgroundColor3"
                    elseif vc.ColourObjects[va] then
                      vc.ColourObjects[va] = nil
                    end
                    vd.Toggled = b
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = e,
                  Toggled = d,
                  Bind = c,
                  Holder = Instance.new("Frame")
                }:Toggle(d)
                return {
                  Set = function(a, b)
                    a = a
                    va.Bind = b
                    vb.Text = b.Name
                    vb.Size = UDim2.new(0, vb.TextBounds.X + 10, 1, -4)
                    vb.Position = UDim2.new(1, -vb.AbsoluteSize.X - 2, 0, 2)
                    vc.Position = UDim2.new(1, -vb.AbsoluteSize.X - 30, 0, 2)
                  end,
                  Toggle = function(a, b)
                    a = a
                    if b then
                    end
                    CreateCircularRipple(va, vb.ThemeColor or vc.Settings.DefaultItemColor, b)
                    if b then
                      vc.ColourObjects[va] = "BackgroundColor3"
                    elseif vc.ColourObjects[va] then
                      vc.ColourObjects[va] = nil
                    end
                    vd.Toggled = b
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = e,
                  Toggled = d,
                  Bind = c,
                  Holder = Instance.new("Frame")
                }
              end
            }
          end
        })
        return {
          Toggles = {},
          BindToggles = {},
          SliderToggles = {},
          Show = function(a)
            a = a
            for fe, fg in next, va.Tabs, nil do
              fg.Tab.Visible = fg.Tab == vb
              vc:Create(fg.Indicator, TweenInfo.new(0,2), {
                BackgroundColor3 = vd.Settings.TabButtonIndicatorColors["Enabled" or "Disabled"]
              }):Play()
            end
          end,
          Hide = function(a)
            a = a
            va.Visible = false
          end,
          IsShown = function(a)
            a = a
            return va.Visible
          end,
          Indicator = Instance.new("Frame"),
          Tab = Instance.new("ScrollingFrame"),
          Holder = vd,
          AddCategory = function(a, b)
            a = a
            Instance.new("Frame").Name = "Category_Frame"
            Instance.new("Frame").BackgroundColor3 = vb.Settings.CategoryColor
            Instance.new("Frame").Position = UDim2.new(0, 5, 0, 5)
            Instance.new("Frame").Size = UDim2.new(1, 0, 0, 35)
            Instance.new("Frame").Parent = va
            Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
            Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Category_Title"
            Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            Instance.new("TextLabel").BackgroundTransparency = 1
            Instance.new("TextLabel").Position = UDim2.new(0, 2, 0, 8)
            Instance.new("TextLabel").Size = UDim2.new(1, -4, 0, 14)
            Instance.new("TextLabel").Font = vb.Settings.CategoryFont
            Instance.new("TextLabel").Text = b
            Instance.new("TextLabel").TextColor3 = vb.Settings.TextColor
            Instance.new("TextLabel").TextSize = vb.Settings.TextSize
            Instance.new("TextLabel").TextWrapped = true
            Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "Category_List"
            Instance.new("Frame").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            Instance.new("Frame").BackgroundTransparency = 1
            Instance.new("Frame").Position = UDim2.new(0, 0, 0, 30)
            Instance.new("Frame").Size = UDim2.new(1, 0, 1, -30)
            Instance.new("Frame").ChildAdded:Connect(function(a)
              a = a
              if not a.ClassName:find("UI") then
                va.Size = va.Size + UDim2.new(0, 0, 0, a.AbsoluteSize.Y + 5)
                vb.CanvasSize = vb.CanvasSize + UDim2.new(0, 0, 0, a.AbsoluteSize.Y + 5)
              end
            end)
            Instance.new("UIListLayout").Parent = Instance.new("Frame")
            Instance.new("UIListLayout").SortOrder = Enum.SortOrder.LayoutOrder
            Instance.new("UIPadding").Parent, Instance.new("UIListLayout").Padding = Instance.new("Frame"), UDim.new(0, 5)
            Instance.new("UIPadding").PaddingBottom = UDim.new(0, 5)
            Instance.new("UIPadding").PaddingLeft = UDim.new(0, 5)
            Instance.new("UIPadding").PaddingRight = UDim.new(0, 5)
            Instance.new("UIPadding").PaddingTop = UDim.new(0, 5)
            return {
              Frame = Instance.new("Frame"),
              Holder = va,
              AddButton = function(a, b, c)
                a = a
                Instance.new("Frame").Name = "Button_Holder"
                Instance.new("Frame").BackgroundColor3 = va.Settings.ItemHolderColor
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 30)
                Instance.new("Frame").Parent = vb
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("TextButton").Parent, Instance.new("TextButton").Name = Instance.new("Frame"), "Button"
                Instance.new("TextButton").AutoButtonColor = false
                Instance.new("TextButton").BackgroundColor3 = va.Settings.DefaultItemColor
                Instance.new("TextButton").Position = UDim2.new(0, 2, 0, 2)
                Instance.new("TextButton").Size = UDim2.new(1, -4, 1, -4)
                Instance.new("TextButton").Font = va.Settings.Font
                Instance.new("TextButton").Text = b
                Instance.new("TextButton").TextColor3 = va.Settings.TextColor
                Instance.new("TextButton").TextSize = va.Settings.TextSize
                Instance.new("TextButton").TextWrapped = true
                Instance.new("TextButton").MouseButton1Down:Connect(function()
                  va.TextSize = vb.Settings.TextSize - 1
                end)
                Instance.new("TextButton").MouseLeave:Connect(function()
                  va.TextSize = vb.Settings.TextSize
                end)
                Instance.new("TextButton").MouseButton1Up:Connect(function()
                  pcall(va.Function)
                  vb.TextSize = vc.Settings.TextSize
                  CreateWaveRipple(vb, 0,8, Color3.fromRGB(255, 255, 255))
                end)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("TextButton"), UDim.new(0, 5)
                return {
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = c,
                  Button = Instance.new("TextButton"),
                  Holder = Instance.new("Frame")
                }
              end,
              AddToggle = function(a, b, c, d)
                a = a
                vc.Toggles[b] = c
                Instance.new("Frame").Name = b
                Instance.new("Frame").BackgroundColor3 = Color3.fromRGB(20, 20, 20)
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 30)
                Instance.new("Frame").Parent = vd
                Instance.new("Frame").InputBegan:Connect(function(a, b)
                  a = a
                  if not b and a.UserInputType == Enum.UserInputType.MouseButton1 then
                    va.Size = UDim2.new(0, 24, 0, 24)
                    va.Position = UDim2.new(1, -27, 0, 3)
                  end
                end)
                Instance.new("Frame").InputEnded:Connect(function(a, b)
                  a = a
                  if not b and a.UserInputType == Enum.UserInputType.MouseButton1 then
                    va.Toggles[vb] = not va.Toggles[vb]
                    vc:Set(va.Toggles[vb])
                    vd.Size = UDim2.new(0, 26, 0, 26)
                    vd.Position = UDim2.new(1, -28, 0, 2)
                  end
                end)
                Instance.new("Frame").MouseLeave:Connect(function()
                  va.Size = UDim2.new(0, 26, 0, 26)
                  va.Position = UDim2.new(1, -28, 0, 2)
                end)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(0, 5, 0,5, -7)
                Instance.new("TextLabel").Size = UDim2.new(1, -38, 0, 14)
                Instance.new("TextLabel").Font = Enum.Font.SourceSans
                Instance.new("TextLabel").Text = b
                Instance.new("TextLabel").TextColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").TextSize = 14
                Instance.new("TextLabel").TextWrapped = true
                Instance.new("TextLabel").TextXAlignment = Enum.TextXAlignment.Left
                Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "Toggle_Indicator"
                Instance.new("Frame").BackgroundColor3 = vb.Settings.DefaultItemColor
                Instance.new("Frame").Position = UDim2.new(1, -28, 0, 2)
                Instance.new("Frame").Size = UDim2.new(0, 26, 0, 26)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                {
                  Set = function(a, b)
                    a = a
                    if b then
                    end
                    CreateCircularRipple(va, vb.ThemeColor or vc.Settings.DefaultItemColor, b)
                    if b then
                      vc.ColourObjects[va] = "BackgroundColor3"
                    elseif vc.ColourObjects[va] then
                      vc.ColourObjects[va] = nil
                    end
                    vd.Toggled = b
                    pcall(vd.Function, b)
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = d,
                  Toggled = c,
                  Holder = Instance.new("Frame")
                }:Set(c)
                return {
                  Set = function(a, b)
                    a = a
                    if b then
                    end
                    CreateCircularRipple(va, vb.ThemeColor or vc.Settings.DefaultItemColor, b)
                    if b then
                      vc.ColourObjects[va] = "BackgroundColor3"
                    elseif vc.ColourObjects[va] then
                      vc.ColourObjects[va] = nil
                    end
                    vd.Toggled = b
                    pcall(vd.Function, b)
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = d,
                  Toggled = c,
                  Holder = Instance.new("Frame")
                }
              end,
              AddBox = function(a, b, c)
                a = a
                Instance.new("Frame").Name = "Box_Holder"
                Instance.new("Frame").BackgroundColor3 = Color3.fromRGB(20, 20, 20)
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 30)
                Instance.new("Frame").Parent = va
                Instance.new("Frame").MouseEnter:Connect(function()
                  ve:Create(vg, TweenInfo.new(0,2), {
                    Size = UDim2.new(1, -(vc or vd), 1, -4),
                    Position = UDim2.new(0, vc or vd, 0, 2)
                  }):Play()
                end)
                Instance.new("Frame").MouseLeave:Connect(function()
                  if va:IsFocused() then
                    va.FocusLost:Wait()
                  end
                  vb:Create(va, TweenInfo.new(0,2), {
                    Size = UDim2.new(0, vc, 1, -4),
                    Position = UDim2.new(1, -vc - 2, 0, 2)
                  }):Play()
                end)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(0, 5, 0,5, -7)
                Instance.new("TextLabel").Size = UDim2.new(1, -112, 0, 14)
                Instance.new("TextLabel").Font = vc.Settings.Font
                Instance.new("TextLabel").Text = b
                Instance.new("TextLabel").TextColor3 = vc.Settings.TextColor
                Instance.new("TextLabel").TextSize = vc.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                Instance.new("TextLabel").TextXAlignment = Enum.TextXAlignment.Left
                Instance.new("TextLabel").Size = UDim2.new(0, Instance.new("TextLabel").TextBounds.X + 2, 0, 14)
                Instance.new("TextBox").Parent, Instance.new("TextBox").Name = Instance.new("Frame"), "Box"
                Instance.new("TextBox").BackgroundColor3 = vc.Settings.DefaultItemColor
                Instance.new("TextBox").Position = UDim2.new(1, -102, 0, 2)
                Instance.new("TextBox").Size = UDim2.new(0, 100, 1, -4)
                Instance.new("TextBox").Font = vc.Settings.Font
                Instance.new("TextBox").Text = ""
                Instance.new("TextBox").TextColor3 = vc.Settings.TextColor
                Instance.new("TextBox").TextSize = vc.Settings.TextSize
                Instance.new("TextBox").TextWrapped = true
                Instance.new("TextBox").FocusLost:Connect(function()
                  pcall(va.Function, vb.Text)
                end)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("TextBox"), UDim.new(0, 5)
                return {
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = c,
                  Box = Instance.new("TextBox"),
                  Holder = Instance.new("Frame")
                }
              end,
              AddLabel = function(a, b)
                a = a
                Instance.new("Frame").Name = "Label_Holder"
                Instance.new("Frame").BackgroundColor3 = va.Settings.ItemHolderColor
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 18)
                Instance.new("Frame").Parent = vb
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(0, 5, 0,5, -7)
                Instance.new("TextLabel").Size = UDim2.new(1, -10, 0, 14)
                Instance.new("TextLabel").Font = va.Settings.Font
                Instance.new("TextLabel").Text = b
                Instance.new("TextLabel").TextColor3 = va.Settings.TextColor
                Instance.new("TextLabel").TextSize = va.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                return {
                  Label = Instance.new("TextLabel"),
                  Holder = Instance.new("Frame")
                }
              end,
              AddDualLabel = function(a, b)
                a = a
                Instance.new("Frame").Name = "DualLabel_Holder"
                Instance.new("Frame").BackgroundColor3 = va.Settings.ItemHolderColor
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 18)
                Instance.new("Frame").Parent = vb
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label1"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(0, 5, 0,5, -7)
                Instance.new("TextLabel").Size = UDim2.new(0,5, -5, 0, 14)
                Instance.new("TextLabel").Font = va.Settings.Font
                Instance.new("TextLabel").Text = b[1]
                Instance.new("TextLabel").TextColor3 = va.Settings.TextColor
                Instance.new("TextLabel").TextSize = va.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                Instance.new("TextLabel").TextXAlignment = Enum.TextXAlignment.Left
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label2"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(0,5, 0, 0,5, -7)
                Instance.new("TextLabel").Size = UDim2.new(0,5, -5, 0, 14)
                Instance.new("TextLabel").Font = va.Settings.Font
                Instance.new("TextLabel").Text = b[2]
                Instance.new("TextLabel").TextColor3 = va.Settings.TextColor
                Instance.new("TextLabel").TextSize = va.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                Instance.new("TextLabel").TextXAlignment = Enum.TextXAlignment.Right
                return {
                  Label2 = Instance.new("TextLabel"),
                  Label1 = Instance.new("TextLabel"),
                  Holder = Instance.new("Frame")
                }
              end,
              AddSlider = function(a, b, c, d, e, g, h)
                a = a
                Instance.new("Frame").Name = "Slider_Holder"
                Instance.new("Frame").BackgroundColor3 = vb.Settings.ItemHolderColor
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 30)
                Instance.new("Frame").Parent = vc
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "Slider_Background"
                Instance.new("Frame").BackgroundColor3 = vb.Settings.DefaultItemColor
                Instance.new("Frame").ClipsDescendants = true
                Instance.new("Frame").Position = UDim2.new(0, 5, 0, 18)
                Instance.new("Frame").Size = UDim2.new(1, -10, 1, -20)
                Instance.new("Frame").InputBegan:Connect(function(a, b)
                  a = a
                  repeat
                    if not b and a.UserInputType == Enum.UserInputType.MouseButton1 then
                      wait()
                      vc:Set(math.floor((vd + math.clamp((va.X - vb.AbsolutePosition.X) / vb.AbsoluteSize.X, 0, 1) * (ve - vd)) * 10) / 10)
                    end
                  until not vg:IsMouseButtonPressed(Enum.UserInputType.MouseButton1)
                end)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "Slider"
                Instance.new("Frame").BackgroundColor3 = vg.ThemeColor
                Instance.new("Frame").Size = UDim2.new(0,75, 0, 1, 0)
                vb.ColourObjects[Instance.new("Frame")] = "BackgroundColor3"
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(0, 5, 0, 2)
                Instance.new("TextLabel").Size = UDim2.new(1, -10, 0, 14)
                Instance.new("TextLabel").Font = vb.Settings.Font
                Instance.new("TextLabel").Text = ""
                Instance.new("TextLabel").TextColor3 = vb.Settings.TextColor
                Instance.new("TextLabel").TextSize = vb.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                {
                  Set = function(a, b)
                    a = a
                    b = va or vb
                    b = vb or vb
                    vd.Text = ve .. " - " .. tostring(vg.Value)
                    vh:Create(vj, TweenInfo.new(0,2, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                      Size = UDim2.new(1 - (va - b) / (va - vb), 0, 1, 0)
                    }):Play()
                    vg.Value = b
                    pcall(vg.Function, b)
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = h,
                  Value = e,
                  Holder = Instance.new("Frame")
                }:Set(e)
                return {
                  Set = function(a, b)
                    a = a
                    b = va or vb
                    b = vb or vb
                    vd.Text = ve .. " - " .. tostring(vg.Value)
                    vh:Create(vj, TweenInfo.new(0,2, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                      Size = UDim2.new(1 - (va - b) / (va - vb), 0, 1, 0)
                    }):Play()
                    vg.Value = b
                    pcall(vg.Function, b)
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = h,
                  Value = e,
                  Holder = Instance.new("Frame")
                }
              end,
              AddToggleSlider = function(a, b, c, d, e, g, h, j)
                a = a
                Instance.new("Frame").Name = "ToggleSlider_Holder"
                Instance.new("Frame").BackgroundColor3 = vc.Settings.ItemHolderColor
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 30)
                Instance.new("Frame").Parent = vd
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "Slider_Background"
                Instance.new("Frame").BackgroundColor3 = vc.Settings.DefaultItemColor
                Instance.new("Frame").ClipsDescendants = true
                Instance.new("Frame").Position = UDim2.new(0, 30, 0, 18)
                Instance.new("Frame").Size = UDim2.new(1, -35, 1, -20)
                Instance.new("Frame").InputBegan:Connect(function(a, b)
                  a = a
                  repeat
                    if not b and a.UserInputType == Enum.UserInputType.MouseButton1 then
                      wait()
                      vc:Set(math.floor((vd + math.clamp((va.X - vb.AbsolutePosition.X) / vb.AbsoluteSize.X, 0, 1) * (ve - vd)) * 10) / 10)
                    end
                  until not vg:IsMouseButtonPressed(Enum.UserInputType.MouseButton1)
                end)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "Slider"
                Instance.new("Frame").BackgroundColor3 = vb.ThemeColor
                Instance.new("Frame").Size = UDim2.new(0,75, 0, 1, 0)
                vc.ColourObjects[Instance.new("Frame")] = "BackgroundColor3"
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(0, 30, 0, 2)
                Instance.new("TextLabel").Size = UDim2.new(1, -35, 0, 14)
                Instance.new("TextLabel").Font = vc.Settings.Font
                Instance.new("TextLabel").Text = ""
                Instance.new("TextLabel").TextColor3 = vc.Settings.TextColor
                Instance.new("TextLabel").TextSize = vc.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                Instance.new("TextButton").Parent, Instance.new("TextButton").Name = Instance.new("Frame"), "ToggleSlider_Indicator"
                Instance.new("TextButton").BackgroundColor3 = vc.Settings.DefaultItemColor
                Instance.new("TextButton").Position = UDim2.new(0, 2, 0, 2)
                Instance.new("TextButton").Size = UDim2.new(0, 26, 0, 26)
                Instance.new("TextButton").AutoButtonColor = false
                Instance.new("TextButton").Font = vc.Settings.Font
                Instance.new("TextButton").Text = ""
                Instance.new("TextButton").MouseButton1Down:Connect(function()
                  va.Size = UDim2.new(0, 24, 0, 24)
                  va.Position = UDim2.new(0, 3, 0, 3)
                end)
                Instance.new("TextButton").MouseButton1Up:Connect(function()
                  va.Toggled = not va.Toggled
                  va:Toggle(va.Toggled)
                  vb.Size = UDim2.new(0, 26, 0, 26)
                  vb.Position = UDim2.new(0, 2, 0, 2)
                end)
                Instance.new("Frame").MouseLeave:Connect(function()
                  va.Size = UDim2.new(0, 26, 0, 26)
                  va.Position = UDim2.new(0, 2, 0, 2)
                end)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("TextButton"), UDim.new(0, 5)
                {
                  Set = function(a, b)
                    a = a
                    b = va or vb
                    b = vb or vb
                    if b == ve then
                      vg.Text = vh .. " - " .. tostring(vd.Value)
                      vj:Create(vk, TweenInfo.new(0,2, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                        Size = UDim2.new(1 - (va - b) / (va - vb), 0, 1, 0)
                      }):Play()
                      vd.Value = b
                      pcall(vd.Function, b)
                    end
                  end,
                  Toggle = function(a, b)
                    a = a
                    if b then
                    end
                    CreateCircularRipple(va, vb.ThemeColor or vc.Settings.DefaultItemColor, b)
                    if b then
                      vc.ColourObjects[va] = "BackgroundColor3"
                    elseif vc.ColourObjects[va] then
                      vc.ColourObjects[va] = nil
                    end
                    vd.Toggled = b
                    vd:Set(vd.Value)
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = j,
                  Toggled = h,
                  Value = e,
                  Holder = Instance.new("Frame")
                }:Set(e)
                return {
                  Set = function(a, b)
                    a = a
                    b = va or vb
                    b = vb or vb
                    if b == ve then
                      vg.Text = vh .. " - " .. tostring(vd.Value)
                      vj:Create(vk, TweenInfo.new(0,2, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                        Size = UDim2.new(1 - (va - b) / (va - vb), 0, 1, 0)
                      }):Play()
                      vd.Value = b
                      pcall(vd.Function, b)
                    end
                  end,
                  Toggle = function(a, b)
                    a = a
                    if b then
                    end
                    CreateCircularRipple(va, vb.ThemeColor or vc.Settings.DefaultItemColor, b)
                    if b then
                      vc.ColourObjects[va] = "BackgroundColor3"
                    elseif vc.ColourObjects[va] then
                      vc.ColourObjects[va] = nil
                    end
                    vd.Toggled = b
                    vd:Set(vd.Value)
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = j,
                  Toggled = h,
                  Value = e,
                  Holder = Instance.new("Frame")
                }
              end,
              AddDropdown = function(a, b, c, d)
                a = a
                Instance.new("Frame").Name = "Dropdown_Holder"
                Instance.new("Frame").BackgroundColor3 = vd.Settings.ItemHolderColor
                Instance.new("Frame").ClipsDescendants = true
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 30)
                Instance.new("Frame").Parent = ve
                Instance.new("Frame").InputBegan:Connect(function(a, b)
                  a = a
                  if not b and a.UserInputType == Enum.UserInputType.MouseButton1 and not va then
                    vb = not vb
                    vc:Toggle(vb)
                  end
                end)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "Labels_Holder"
                Instance.new("Frame").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("Frame").BackgroundTransparency = 1
                Instance.new("Frame").Position = UDim2.new(0, 2, 0, 0)
                Instance.new("Frame").Size = UDim2.new(1, -30, 0, 30)
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").BorderColor3 = Color3.fromRGB(27, 42, 53)
                Instance.new("TextLabel").Position = UDim2.new(0, 5, 0,5, -7)
                Instance.new("TextLabel").Size = UDim2.new(0,5, -2, 0, 14)
                Instance.new("TextLabel").Font = vd.Settings.Font
                Instance.new("TextLabel").Text = b
                Instance.new("TextLabel").TextColor3 = vd.Settings.TextColor
                Instance.new("TextLabel").TextSize = vd.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                Instance.new("TextLabel").TextXAlignment = Enum.TextXAlignment.Left
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Selected_Display"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").BorderColor3 = Color3.fromRGB(27, 42, 53)
                Instance.new("TextLabel").Position = UDim2.new(0,5, 3, 0, 8)
                Instance.new("TextLabel").Size = UDim2.new(0,5, -5, 0, 14)
                Instance.new("TextLabel").Font = vd.Settings.Font
                Instance.new("TextLabel").Text = ""
                Instance.new("TextLabel").TextColor3 = vd.Settings.TextColor
                Instance.new("TextLabel").TextSize = vd.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                Instance.new("TextLabel").TextXAlignment = Enum.TextXAlignment.Right
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Dropdown_Indicator"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(1, -28, 0, 2)
                Instance.new("TextLabel").Rotation = -90
                Instance.new("TextLabel").Size = UDim2.new(0, 26, 0, 26)
                Instance.new("TextLabel").Font = vd.Settings.DropdownIndicatorFont
                Instance.new("TextLabel").Text = "<"
                Instance.new("TextLabel").TextColor3 = vd.Settings.TextColor
                Instance.new("TextLabel").TextSize = vd.Settings.DropdownIndicatorTextSize
                Instance.new("ScrollingFrame").Parent, Instance.new("ScrollingFrame").Name = Instance.new("Frame"), "Dropdown_List"
                Instance.new("ScrollingFrame").Active = true
                Instance.new("ScrollingFrame").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("ScrollingFrame").BackgroundTransparency = 1
                Instance.new("ScrollingFrame").BorderSizePixel = 0
                Instance.new("ScrollingFrame").Position = UDim2.new(0, 0, 0, 30)
                Instance.new("ScrollingFrame").Size = UDim2.new(1, 0, 1, -30)
                Instance.new("ScrollingFrame").CanvasSize = UDim2.new(0, 0, 0, 2)
                Instance.new("ScrollingFrame").ScrollBarImageColor3 = Color3.fromRGB(0, 0, 0)
                Instance.new("ScrollingFrame").ScrollBarThickness = 5
                Instance.new("ScrollingFrame").ChildAdded:Connect(function(a)
                  a = a
                  if not a.ClassName:find("UI") then
                    va(UDim2.new(0, 0, 0, a.AbsoluteSize.Y + 2))
                  end
                end)
                Instance.new("ScrollingFrame").ChildRemoved:Connect(function(a)
                  a = a
                  if not a.ClassName:find("UI") then
                    va(UDim2.new(0, 0, 0, -a.AbsoluteSize.Y - 2))
                  end
                end)
                Instance.new("UIPadding").Parent = Instance.new("ScrollingFrame")
                Instance.new("UIPadding").PaddingBottom = UDim.new(0, 2)
                Instance.new("UIPadding").PaddingLeft = UDim.new(0, 2)
                Instance.new("UIPadding").PaddingRight = UDim.new(0, 2)
                Instance.new("UIListLayout").Parent, Instance.new("UIPadding").PaddingTop = Instance.new("ScrollingFrame"), UDim.new(0, 2)
                Instance.new("UIListLayout").SortOrder = Enum.SortOrder.LayoutOrder
                Instance.new("UIListLayout").Padding = UDim.new(0, 2)
                for fQ, fW in next, c, nil do
                  {
                    Toggle = function(a, b)
                      a = a
                      if not va then
                        va = true
                        if b then
                        end
                        if b then
                        end
                        vc:Create(vd, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                          Rotation = 0 or -90
                        }):Play()
                        vc:Create(ve, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                          Size = ve.Size + UDim2.new(0, 0, 0, 2 + (vb.MaxVisibleItems or #vb.Items) * 22 or -(2 + (vb.MaxVisibleItems or #vb.Items) * 22))
                        }):Play()
                        vc:Create(vg, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                          Size = vg.Size + UDim2.new(0, 0, 0, 2 + (vb.MaxVisibleItems or #vb.Items) * 22 or -(2 + (vb.MaxVisibleItems or #vb.Items) * 22))
                        }):Play()
                        vc:Create(vh, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                          CanvasSize = vh.CanvasSize + UDim2.new(0, 0, 0, 2 + (vb.MaxVisibleItems or #vb.Items) * 22 or -(2 + (vb.MaxVisibleItems or #vb.Items) * 22))
                        }):Play()
                        wait(0,5)
                        va = false
                        vj()
                        vk()
                      end
                    end,
                    AddItem = function(a, b)
                      a = a
                      if va then
                        table.insert(vb.Add, {
                          Name = b,
                          Holder = Instance.new("TextButton")
                        })
                        return
                      end
                      Instance.new("TextButton").Name = "Dropdown_Item"
                      Instance.new("TextButton").BackgroundColor3 = Color3.fromRGB(25, 25, 25)
                      Instance.new("TextButton").Size = UDim2.new(1, 0, 0, 20)
                      Instance.new("TextButton").Font = vc.Settings.Font
                      Instance.new("TextButton").Text = b
                      Instance.new("TextButton").TextColor3 = vc.Settings.TextColor
                      Instance.new("TextButton").TextSize = vc.Settings.TextSize
                      Instance.new("TextButton").TextWrapped = true
                      Instance.new("TextButton").Parent = vd
                      Instance.new("TextButton").MouseButton1Click:Connect(function()
                        va.Text = vb
                        vc.Selected = vb
                        pcall(vc.Function, vb)
                      end)
                      Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("TextButton"), UDim.new(0, 5)
                      table.insert(vg.Items, {
                        Name = b,
                        Holder = Instance.new("TextButton")
                      })
                    end,
                    RemoveItem = function(a, b)
                      a = a
                      if va then
                        for fg, fh in next, vb.Items, nil do
                          if fh.Name == b then
                            table.insert(vc.Remove, fh)
                          else
                          end
                        end
                        return
                      end
                      for fg, fh in next, vb.Items, nil do
                        if fh.Name == b then
                          table.remove(vb.Items, fg)
                          fh.Holder:Destroy()
                        else
                        end
                      end
                    end,
                    AddToolTip = function(a, b)
                      a = a
                      AddToolTip(va, vb, b)
                    end,
                    Function = d,
                    MaxVisibleItems = 10,
                    Selected = nil,
                    Items = {},
                    Holder = Instance.new("Frame")
                  }:AddItem(fW)
                end
                return {
                  Toggle = function(a, b)
                    a = a
                    if not va then
                      va = true
                      if b then
                      end
                      if b then
                      end
                      vc:Create(vd, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                        Rotation = 0 or -90
                      }):Play()
                      vc:Create(ve, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                        Size = ve.Size + UDim2.new(0, 0, 0, 2 + (vb.MaxVisibleItems or #vb.Items) * 22 or -(2 + (vb.MaxVisibleItems or #vb.Items) * 22))
                      }):Play()
                      vc:Create(vg, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                        Size = vg.Size + UDim2.new(0, 0, 0, 2 + (vb.MaxVisibleItems or #vb.Items) * 22 or -(2 + (vb.MaxVisibleItems or #vb.Items) * 22))
                      }):Play()
                      vc:Create(vh, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                        CanvasSize = vh.CanvasSize + UDim2.new(0, 0, 0, 2 + (vb.MaxVisibleItems or #vb.Items) * 22 or -(2 + (vb.MaxVisibleItems or #vb.Items) * 22))
                      }):Play()
                      wait(0,5)
                      va = false
                      vj()
                      vk()
                    end
                  end,
                  AddItem = function(a, b)
                    a = a
                    if va then
                      table.insert(vb.Add, {
                        Name = b,
                        Holder = Instance.new("TextButton")
                      })
                      return
                    end
                    Instance.new("TextButton").Name = "Dropdown_Item"
                    Instance.new("TextButton").BackgroundColor3 = Color3.fromRGB(25, 25, 25)
                    Instance.new("TextButton").Size = UDim2.new(1, 0, 0, 20)
                    Instance.new("TextButton").Font = vc.Settings.Font
                    Instance.new("TextButton").Text = b
                    Instance.new("TextButton").TextColor3 = vc.Settings.TextColor
                    Instance.new("TextButton").TextSize = vc.Settings.TextSize
                    Instance.new("TextButton").TextWrapped = true
                    Instance.new("TextButton").Parent = vd
                    Instance.new("TextButton").MouseButton1Click:Connect(function()
                      va.Text = vb
                      vc.Selected = vb
                      pcall(vc.Function, vb)
                    end)
                    Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("TextButton"), UDim.new(0, 5)
                    table.insert(vg.Items, {
                      Name = b,
                      Holder = Instance.new("TextButton")
                    })
                  end,
                  RemoveItem = function(a, b)
                    a = a
                    if va then
                      for fg, fh in next, vb.Items, nil do
                        if fh.Name == b then
                          table.insert(vc.Remove, fh)
                        else
                        end
                      end
                      return
                    end
                    for fg, fh in next, vb.Items, nil do
                      if fh.Name == b then
                        table.remove(vb.Items, fg)
                        fh.Holder:Destroy()
                      else
                      end
                    end
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = d,
                  MaxVisibleItems = 10,
                  Selected = nil,
                  Items = {},
                  Holder = Instance.new("Frame")
                }
              end,
              AddBind = function(a, b, c, d)
                a = a
                Instance.new("Frame").Name = "Bind_Holder"
                Instance.new("Frame").BackgroundColor3 = va.Settings.ItemHolderColor
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 30)
                Instance.new("Frame").Parent = vb
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(0, 5, 0,5, -7)
                Instance.new("TextLabel").Size = UDim2.new(1, -112, 0, 14)
                Instance.new("TextLabel").Font = va.Settings.Font
                Instance.new("TextLabel").Text = b
                Instance.new("TextLabel").TextColor3 = va.Settings.TextColor
                Instance.new("TextLabel").TextSize = va.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                Instance.new("TextLabel").TextXAlignment = Enum.TextXAlignment.Left
                Instance.new("TextBox").Parent, Instance.new("TextBox").Name = Instance.new("Frame"), "Box"
                Instance.new("TextBox").BackgroundColor3 = Color3.fromRGB(25, 25, 25)
                Instance.new("TextBox").Position = UDim2.new(1, -62, 0, 2)
                Instance.new("TextBox").Size = UDim2.new(0, 60, 1, -4)
                Instance.new("TextBox").ClearTextOnFocus = false
                Instance.new("TextBox").Font = va.Settings.Font
                Instance.new("TextBox").Text = ""
                Instance.new("TextBox").TextColor3 = va.Settings.TextColor
                Instance.new("TextBox").TextEditable = false
                Instance.new("TextBox").TextSize = va.Settings.TextSize
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("TextBox"), UDim.new(0, 5)
                vc.InputBegan:Connect(function(a, b)
                  a = a
                  if not b and a.KeyCode == va.Bind then
                    pcall(va.Function)
                  end
                end)
                {
                  Set = function(a, b)
                    a = a
                    va.Bind = b
                    vb.Text = b.Name
                    vb.Size = UDim2.new(0, vb.TextBounds.X + 10, 1, -4)
                    vb.Position = UDim2.new(1, -vb.AbsoluteSize.X - 2, 0, 2)
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = d,
                  Bind = c,
                  Holder = Instance.new("Frame")
                }:Set(c)
                return {
                  Set = function(a, b)
                    a = a
                    va.Bind = b
                    vb.Text = b.Name
                    vb.Size = UDim2.new(0, vb.TextBounds.X + 10, 1, -4)
                    vb.Position = UDim2.new(1, -vb.AbsoluteSize.X - 2, 0, 2)
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = d,
                  Bind = c,
                  Holder = Instance.new("Frame")
                }
              end,
              AddToggleBind = function(a, b, c, d, e)
                a = a
                vc.BindToggles[b] = d
                Instance.new("Frame").Name = "ToggleBind_Holder"
                Instance.new("Frame").BackgroundColor3 = vb.Settings.ItemHolderColor
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 30)
                Instance.new("Frame").Parent = vd
                Instance.new("Frame").InputBegan:Connect(function(a, b)
                  a = a
                  if not b and a.UserInputType == Enum.UserInputType.MouseButton1 then
                    va.Size = UDim2.new(0, 24, 0, 24)
                    va.Position = UDim2.new(1, -vb.AbsoluteSize.X - 29, 0, 3)
                  end
                end)
                Instance.new("Frame").InputEnded:Connect(function(a, b)
                  a = a
                  if not b and a.UserInputType == Enum.UserInputType.MouseButton1 then
                    va.BindToggles[vb] = not va.BindToggles[vb]
                    vc:Toggle(va.BindToggles[vb])
                    vd.Size = UDim2.new(0, 26, 0, 26)
                    vd.Position = UDim2.new(1, -ve.AbsoluteSize.X - 30, 0, 2)
                  end
                end)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(0, 5, 0,5, -7)
                Instance.new("TextLabel").Size = UDim2.new(1, -112, 0, 14)
                Instance.new("TextLabel").Font = vb.Settings.Font
                Instance.new("TextLabel").Text = b
                Instance.new("TextLabel").TextColor3 = vb.Settings.TextColor
                Instance.new("TextLabel").TextSize = vb.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                Instance.new("TextLabel").TextXAlignment = Enum.TextXAlignment.Left
                Instance.new("TextBox").Parent, Instance.new("TextBox").Name = Instance.new("Frame"), "Box"
                Instance.new("TextBox").BackgroundColor3 = vb.Settings.DefaultItemColor
                Instance.new("TextBox").Position = UDim2.new(1, -62, 0, 2)
                Instance.new("TextBox").Size = UDim2.new(0, 60, 1, -4)
                Instance.new("TextBox").ClearTextOnFocus = false
                Instance.new("TextBox").Font = vb.Settings.Font
                Instance.new("TextBox").Text = ""
                Instance.new("TextBox").TextColor3 = vb.Settings.TextColor
                Instance.new("TextBox").TextEditable = false
                Instance.new("TextBox").TextSize = vb.Settings.TextSize
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("TextBox"), UDim.new(0, 5)
                Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "ToggleBind_Indicator"
                Instance.new("Frame").BackgroundColor3 = vb.Settings.DefaultItemColor
                Instance.new("Frame").Position = UDim2.new(1, -90, 0, 2)
                Instance.new("Frame").Size = UDim2.new(0, 26, 0, 26)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                ve.InputBegan:Connect(function(a, b)
                  a = a
                  if not b and a.KeyCode == va.Bind and va.Toggled then
                    pcall(va.Function)
                  end
                end)
                {
                  Set = function(a, b)
                    a = a
                    va.Bind = b
                    vb.Text = b.Name
                    vb.Size = UDim2.new(0, vb.TextBounds.X + 10, 1, -4)
                    vb.Position = UDim2.new(1, -vb.AbsoluteSize.X - 2, 0, 2)
                    vc.Position = UDim2.new(1, -vb.AbsoluteSize.X - 30, 0, 2)
                  end,
                  Toggle = function(a, b)
                    a = a
                    if b then
                    end
                    CreateCircularRipple(va, vb.ThemeColor or vc.Settings.DefaultItemColor, b)
                    if b then
                      vc.ColourObjects[va] = "BackgroundColor3"
                    elseif vc.ColourObjects[va] then
                      vc.ColourObjects[va] = nil
                    end
                    vd.Toggled = b
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = e,
                  Toggled = d,
                  Bind = c,
                  Holder = Instance.new("Frame")
                }:Set(c)
                {
                  Set = function(a, b)
                    a = a
                    va.Bind = b
                    vb.Text = b.Name
                    vb.Size = UDim2.new(0, vb.TextBounds.X + 10, 1, -4)
                    vb.Position = UDim2.new(1, -vb.AbsoluteSize.X - 2, 0, 2)
                    vc.Position = UDim2.new(1, -vb.AbsoluteSize.X - 30, 0, 2)
                  end,
                  Toggle = function(a, b)
                    a = a
                    if b then
                    end
                    CreateCircularRipple(va, vb.ThemeColor or vc.Settings.DefaultItemColor, b)
                    if b then
                      vc.ColourObjects[va] = "BackgroundColor3"
                    elseif vc.ColourObjects[va] then
                      vc.ColourObjects[va] = nil
                    end
                    vd.Toggled = b
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = e,
                  Toggled = d,
                  Bind = c,
                  Holder = Instance.new("Frame")
                }:Toggle(d)
                return {
                  Set = function(a, b)
                    a = a
                    va.Bind = b
                    vb.Text = b.Name
                    vb.Size = UDim2.new(0, vb.TextBounds.X + 10, 1, -4)
                    vb.Position = UDim2.new(1, -vb.AbsoluteSize.X - 2, 0, 2)
                    vc.Position = UDim2.new(1, -vb.AbsoluteSize.X - 30, 0, 2)
                  end,
                  Toggle = function(a, b)
                    a = a
                    if b then
                    end
                    CreateCircularRipple(va, vb.ThemeColor or vc.Settings.DefaultItemColor, b)
                    if b then
                      vc.ColourObjects[va] = "BackgroundColor3"
                    elseif vc.ColourObjects[va] then
                      vc.ColourObjects[va] = nil
                    end
                    vd.Toggled = b
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = e,
                  Toggled = d,
                  Bind = c,
                  Holder = Instance.new("Frame")
                }
              end
            }
          end
        }
      end
    }.ThemeColor)
    vb.Gui = {
      Tabs = {},
      Toggle = function(a, b)
        a = a
        if b then
        end
        va:Create(vb, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
          Size = UDim2.new(0, 440 or vc.TextBounds.X + 3 + vd.TextBounds.X + 20, 0, 40)
        }):Play()
        if b then
        end
        va:Create(ve, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
          Size = UDim2.new(1, 0, 0, 350 or 0)
        }):Play()
        if b then
        end
        va:Create(vg, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
          Position = UDim2.new(0, 0, 1, -5 or -10)
        }):Play()
      end,
      SetTheme = function(a, b)
        a = a
        va.ThemeColor, vb.ThemeColor = b, b
        for fg, fh in next, va.ColourObjects, nil do
          fg[fh] = b
        end
      end,
      SetStartupTab = function(a, b)
        a = a
        for fg, fh in next, va.Tabs, nil do
          if fh == b then
            fh:Show()
          end
        end
      end,
      ThemeColor = b.ThemeColor,
      Toggled = true,
      ToggleKey = b.ToggleKey,
      Gui = vc,
      AddTab = function(a, b)
        a = a
        Instance.new("ScrollingFrame").Name = "Tab"
        Instance.new("ScrollingFrame").Parent = vd
        Instance.new("ScrollingFrame").Active = true
        Instance.new("ScrollingFrame").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        Instance.new("ScrollingFrame").BackgroundTransparency = 1
        Instance.new("ScrollingFrame").BorderSizePixel = 0
        Instance.new("ScrollingFrame").Size = UDim2.new(1, 0, 1, 0)
        Instance.new("ScrollingFrame").CanvasSize = UDim2.new(0, 0, 0, 0)
        Instance.new("ScrollingFrame").ScrollBarImageColor3 = Color3.fromRGB(0, 0, 0)
        Instance.new("ScrollingFrame").ScrollBarThickness = 5
        Instance.new("ScrollingFrame").Visible = false
        Instance.new("ScrollingFrame").ChildAdded:Connect(function(a)
          a = a
          if not a.ClassName:find("UI") then
            va.CanvasSize = va.CanvasSize + UDim2.new(0, 0, 0, a.AbsoluteSize.Y + 5)
          end
        end)
        Instance.new("UIListLayout").Parent = Instance.new("ScrollingFrame")
        Instance.new("UIListLayout").SortOrder = Enum.SortOrder.LayoutOrder
        Instance.new("UIListLayout").Padding = UDim.new(0, 5)
        Instance.new("UIPadding").Parent, Instance.new("UIPadding").Archivable = Instance.new("ScrollingFrame"), false
        Instance.new("UIPadding").PaddingBottom = UDim.new(0, 5)
        Instance.new("UIPadding").PaddingLeft = UDim.new(0, 5)
        Instance.new("UIPadding").PaddingRight = UDim.new(0, 5)
        Instance.new("UIPadding").PaddingTop = UDim.new(0, 5)
        Instance.new("Frame").Name = "Button_Holder"
        Instance.new("Frame").BackgroundColor3 = vc.Settings.TabButtonColor
        Instance.new("Frame").Size = UDim2.new(1, -10, 0, 30)
        Instance.new("Frame").Parent = ve
        Instance.new("Frame").MouseEnter:Connect(function()
          if not va:IsShown() then
            vb:Create(vc, TweenInfo.new(0,2), {
              BackgroundColor3 = vd.Settings.TabButtonIndicatorColors.Hover
            }):Play()
          end
        end)
        Instance.new("Frame").MouseLeave:Connect(function()
          if not va:IsShown() then
            vb:Create(vc, TweenInfo.new(0,2), {
              BackgroundColor3 = vd.Settings.TabButtonIndicatorColors.Disabled
            }):Play()
          end
        end)
        Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
        Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "Indicator"
        Instance.new("Frame").BackgroundColor3 = vc.Settings.TabButtonIndicatorColors.Disabled
        Instance.new("Frame").Position = UDim2.new(0, 4, 0, 8)
        Instance.new("Frame").Size = UDim2.new(0, 2, 1, -16)
        Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
        Instance.new("TextButton").Parent, Instance.new("TextButton").Name = Instance.new("Frame"), "Button"
        Instance.new("TextButton").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        Instance.new("TextButton").BackgroundTransparency = 1
        Instance.new("TextButton").Position = UDim2.new(0, 10, 0, 0)
        Instance.new("TextButton").Size = UDim2.new(1, -10, 1, 0)
        Instance.new("TextButton").Font = vc.Settings.Font
        Instance.new("TextButton").Text = b
        Instance.new("TextButton").TextColor3 = vc.Settings.TextColor
        Instance.new("TextButton").TextSize = vc.Settings.TextSize
        Instance.new("TextButton").MouseButton1Click:Connect(function()
          va:Show()
        end)
        table.insert(va.Tabs, {
          Toggles = {},
          BindToggles = {},
          SliderToggles = {},
          Show = function(a)
            a = a
            for fe, fg in next, va.Tabs, nil do
              fg.Tab.Visible = fg.Tab == vb
              vc:Create(fg.Indicator, TweenInfo.new(0,2), {
                BackgroundColor3 = vd.Settings.TabButtonIndicatorColors["Enabled" or "Disabled"]
              }):Play()
            end
          end,
          Hide = function(a)
            a = a
            va.Visible = false
          end,
          IsShown = function(a)
            a = a
            return va.Visible
          end,
          Indicator = Instance.new("Frame"),
          Tab = Instance.new("ScrollingFrame"),
          Holder = vd,
          AddCategory = function(a, b)
            a = a
            Instance.new("Frame").Name = "Category_Frame"
            Instance.new("Frame").BackgroundColor3 = vb.Settings.CategoryColor
            Instance.new("Frame").Position = UDim2.new(0, 5, 0, 5)
            Instance.new("Frame").Size = UDim2.new(1, 0, 0, 35)
            Instance.new("Frame").Parent = va
            Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
            Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Category_Title"
            Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            Instance.new("TextLabel").BackgroundTransparency = 1
            Instance.new("TextLabel").Position = UDim2.new(0, 2, 0, 8)
            Instance.new("TextLabel").Size = UDim2.new(1, -4, 0, 14)
            Instance.new("TextLabel").Font = vb.Settings.CategoryFont
            Instance.new("TextLabel").Text = b
            Instance.new("TextLabel").TextColor3 = vb.Settings.TextColor
            Instance.new("TextLabel").TextSize = vb.Settings.TextSize
            Instance.new("TextLabel").TextWrapped = true
            Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "Category_List"
            Instance.new("Frame").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            Instance.new("Frame").BackgroundTransparency = 1
            Instance.new("Frame").Position = UDim2.new(0, 0, 0, 30)
            Instance.new("Frame").Size = UDim2.new(1, 0, 1, -30)
            Instance.new("Frame").ChildAdded:Connect(function(a)
              a = a
              if not a.ClassName:find("UI") then
                va.Size = va.Size + UDim2.new(0, 0, 0, a.AbsoluteSize.Y + 5)
                vb.CanvasSize = vb.CanvasSize + UDim2.new(0, 0, 0, a.AbsoluteSize.Y + 5)
              end
            end)
            Instance.new("UIListLayout").Parent = Instance.new("Frame")
            Instance.new("UIListLayout").SortOrder = Enum.SortOrder.LayoutOrder
            Instance.new("UIPadding").Parent, Instance.new("UIListLayout").Padding = Instance.new("Frame"), UDim.new(0, 5)
            Instance.new("UIPadding").PaddingBottom = UDim.new(0, 5)
            Instance.new("UIPadding").PaddingLeft = UDim.new(0, 5)
            Instance.new("UIPadding").PaddingRight = UDim.new(0, 5)
            Instance.new("UIPadding").PaddingTop = UDim.new(0, 5)
            return {
              Frame = Instance.new("Frame"),
              Holder = va,
              AddButton = function(a, b, c)
                a = a
                Instance.new("Frame").Name = "Button_Holder"
                Instance.new("Frame").BackgroundColor3 = va.Settings.ItemHolderColor
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 30)
                Instance.new("Frame").Parent = vb
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("TextButton").Parent, Instance.new("TextButton").Name = Instance.new("Frame"), "Button"
                Instance.new("TextButton").AutoButtonColor = false
                Instance.new("TextButton").BackgroundColor3 = va.Settings.DefaultItemColor
                Instance.new("TextButton").Position = UDim2.new(0, 2, 0, 2)
                Instance.new("TextButton").Size = UDim2.new(1, -4, 1, -4)
                Instance.new("TextButton").Font = va.Settings.Font
                Instance.new("TextButton").Text = b
                Instance.new("TextButton").TextColor3 = va.Settings.TextColor
                Instance.new("TextButton").TextSize = va.Settings.TextSize
                Instance.new("TextButton").TextWrapped = true
                Instance.new("TextButton").MouseButton1Down:Connect(function()
                  va.TextSize = vb.Settings.TextSize - 1
                end)
                Instance.new("TextButton").MouseLeave:Connect(function()
                  va.TextSize = vb.Settings.TextSize
                end)
                Instance.new("TextButton").MouseButton1Up:Connect(function()
                  pcall(va.Function)
                  vb.TextSize = vc.Settings.TextSize
                  CreateWaveRipple(vb, 0,8, Color3.fromRGB(255, 255, 255))
                end)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("TextButton"), UDim.new(0, 5)
                return {
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = c,
                  Button = Instance.new("TextButton"),
                  Holder = Instance.new("Frame")
                }
              end,
              AddToggle = function(a, b, c, d)
                a = a
                vc.Toggles[b] = c
                Instance.new("Frame").Name = b
                Instance.new("Frame").BackgroundColor3 = Color3.fromRGB(20, 20, 20)
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 30)
                Instance.new("Frame").Parent = vd
                Instance.new("Frame").InputBegan:Connect(function(a, b)
                  a = a
                  if not b and a.UserInputType == Enum.UserInputType.MouseButton1 then
                    va.Size = UDim2.new(0, 24, 0, 24)
                    va.Position = UDim2.new(1, -27, 0, 3)
                  end
                end)
                Instance.new("Frame").InputEnded:Connect(function(a, b)
                  a = a
                  if not b and a.UserInputType == Enum.UserInputType.MouseButton1 then
                    va.Toggles[vb] = not va.Toggles[vb]
                    vc:Set(va.Toggles[vb])
                    vd.Size = UDim2.new(0, 26, 0, 26)
                    vd.Position = UDim2.new(1, -28, 0, 2)
                  end
                end)
                Instance.new("Frame").MouseLeave:Connect(function()
                  va.Size = UDim2.new(0, 26, 0, 26)
                  va.Position = UDim2.new(1, -28, 0, 2)
                end)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(0, 5, 0,5, -7)
                Instance.new("TextLabel").Size = UDim2.new(1, -38, 0, 14)
                Instance.new("TextLabel").Font = Enum.Font.SourceSans
                Instance.new("TextLabel").Text = b
                Instance.new("TextLabel").TextColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").TextSize = 14
                Instance.new("TextLabel").TextWrapped = true
                Instance.new("TextLabel").TextXAlignment = Enum.TextXAlignment.Left
                Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "Toggle_Indicator"
                Instance.new("Frame").BackgroundColor3 = vb.Settings.DefaultItemColor
                Instance.new("Frame").Position = UDim2.new(1, -28, 0, 2)
                Instance.new("Frame").Size = UDim2.new(0, 26, 0, 26)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                {
                  Set = function(a, b)
                    a = a
                    if b then
                    end
                    CreateCircularRipple(va, vb.ThemeColor or vc.Settings.DefaultItemColor, b)
                    if b then
                      vc.ColourObjects[va] = "BackgroundColor3"
                    elseif vc.ColourObjects[va] then
                      vc.ColourObjects[va] = nil
                    end
                    vd.Toggled = b
                    pcall(vd.Function, b)
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = d,
                  Toggled = c,
                  Holder = Instance.new("Frame")
                }:Set(c)
                return {
                  Set = function(a, b)
                    a = a
                    if b then
                    end
                    CreateCircularRipple(va, vb.ThemeColor or vc.Settings.DefaultItemColor, b)
                    if b then
                      vc.ColourObjects[va] = "BackgroundColor3"
                    elseif vc.ColourObjects[va] then
                      vc.ColourObjects[va] = nil
                    end
                    vd.Toggled = b
                    pcall(vd.Function, b)
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = d,
                  Toggled = c,
                  Holder = Instance.new("Frame")
                }
              end,
              AddBox = function(a, b, c)
                a = a
                Instance.new("Frame").Name = "Box_Holder"
                Instance.new("Frame").BackgroundColor3 = Color3.fromRGB(20, 20, 20)
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 30)
                Instance.new("Frame").Parent = va
                Instance.new("Frame").MouseEnter:Connect(function()
                  ve:Create(vg, TweenInfo.new(0,2), {
                    Size = UDim2.new(1, -(vc or vd), 1, -4),
                    Position = UDim2.new(0, vc or vd, 0, 2)
                  }):Play()
                end)
                Instance.new("Frame").MouseLeave:Connect(function()
                  if va:IsFocused() then
                    va.FocusLost:Wait()
                  end
                  vb:Create(va, TweenInfo.new(0,2), {
                    Size = UDim2.new(0, vc, 1, -4),
                    Position = UDim2.new(1, -vc - 2, 0, 2)
                  }):Play()
                end)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(0, 5, 0,5, -7)
                Instance.new("TextLabel").Size = UDim2.new(1, -112, 0, 14)
                Instance.new("TextLabel").Font = vc.Settings.Font
                Instance.new("TextLabel").Text = b
                Instance.new("TextLabel").TextColor3 = vc.Settings.TextColor
                Instance.new("TextLabel").TextSize = vc.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                Instance.new("TextLabel").TextXAlignment = Enum.TextXAlignment.Left
                Instance.new("TextLabel").Size = UDim2.new(0, Instance.new("TextLabel").TextBounds.X + 2, 0, 14)
                Instance.new("TextBox").Parent, Instance.new("TextBox").Name = Instance.new("Frame"), "Box"
                Instance.new("TextBox").BackgroundColor3 = vc.Settings.DefaultItemColor
                Instance.new("TextBox").Position = UDim2.new(1, -102, 0, 2)
                Instance.new("TextBox").Size = UDim2.new(0, 100, 1, -4)
                Instance.new("TextBox").Font = vc.Settings.Font
                Instance.new("TextBox").Text = ""
                Instance.new("TextBox").TextColor3 = vc.Settings.TextColor
                Instance.new("TextBox").TextSize = vc.Settings.TextSize
                Instance.new("TextBox").TextWrapped = true
                Instance.new("TextBox").FocusLost:Connect(function()
                  pcall(va.Function, vb.Text)
                end)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("TextBox"), UDim.new(0, 5)
                return {
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = c,
                  Box = Instance.new("TextBox"),
                  Holder = Instance.new("Frame")
                }
              end,
              AddLabel = function(a, b)
                a = a
                Instance.new("Frame").Name = "Label_Holder"
                Instance.new("Frame").BackgroundColor3 = va.Settings.ItemHolderColor
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 18)
                Instance.new("Frame").Parent = vb
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(0, 5, 0,5, -7)
                Instance.new("TextLabel").Size = UDim2.new(1, -10, 0, 14)
                Instance.new("TextLabel").Font = va.Settings.Font
                Instance.new("TextLabel").Text = b
                Instance.new("TextLabel").TextColor3 = va.Settings.TextColor
                Instance.new("TextLabel").TextSize = va.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                return {
                  Label = Instance.new("TextLabel"),
                  Holder = Instance.new("Frame")
                }
              end,
              AddDualLabel = function(a, b)
                a = a
                Instance.new("Frame").Name = "DualLabel_Holder"
                Instance.new("Frame").BackgroundColor3 = va.Settings.ItemHolderColor
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 18)
                Instance.new("Frame").Parent = vb
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label1"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(0, 5, 0,5, -7)
                Instance.new("TextLabel").Size = UDim2.new(0,5, -5, 0, 14)
                Instance.new("TextLabel").Font = va.Settings.Font
                Instance.new("TextLabel").Text = b[1]
                Instance.new("TextLabel").TextColor3 = va.Settings.TextColor
                Instance.new("TextLabel").TextSize = va.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                Instance.new("TextLabel").TextXAlignment = Enum.TextXAlignment.Left
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label2"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(0,5, 0, 0,5, -7)
                Instance.new("TextLabel").Size = UDim2.new(0,5, -5, 0, 14)
                Instance.new("TextLabel").Font = va.Settings.Font
                Instance.new("TextLabel").Text = b[2]
                Instance.new("TextLabel").TextColor3 = va.Settings.TextColor
                Instance.new("TextLabel").TextSize = va.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                Instance.new("TextLabel").TextXAlignment = Enum.TextXAlignment.Right
                return {
                  Label2 = Instance.new("TextLabel"),
                  Label1 = Instance.new("TextLabel"),
                  Holder = Instance.new("Frame")
                }
              end,
              AddSlider = function(a, b, c, d, e, g, h)
                a = a
                Instance.new("Frame").Name = "Slider_Holder"
                Instance.new("Frame").BackgroundColor3 = vb.Settings.ItemHolderColor
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 30)
                Instance.new("Frame").Parent = vc
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "Slider_Background"
                Instance.new("Frame").BackgroundColor3 = vb.Settings.DefaultItemColor
                Instance.new("Frame").ClipsDescendants = true
                Instance.new("Frame").Position = UDim2.new(0, 5, 0, 18)
                Instance.new("Frame").Size = UDim2.new(1, -10, 1, -20)
                Instance.new("Frame").InputBegan:Connect(function(a, b)
                  a = a
                  repeat
                    if not b and a.UserInputType == Enum.UserInputType.MouseButton1 then
                      wait()
                      vc:Set(math.floor((vd + math.clamp((va.X - vb.AbsolutePosition.X) / vb.AbsoluteSize.X, 0, 1) * (ve - vd)) * 10) / 10)
                    end
                  until not vg:IsMouseButtonPressed(Enum.UserInputType.MouseButton1)
                end)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "Slider"
                Instance.new("Frame").BackgroundColor3 = vg.ThemeColor
                Instance.new("Frame").Size = UDim2.new(0,75, 0, 1, 0)
                vb.ColourObjects[Instance.new("Frame")] = "BackgroundColor3"
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(0, 5, 0, 2)
                Instance.new("TextLabel").Size = UDim2.new(1, -10, 0, 14)
                Instance.new("TextLabel").Font = vb.Settings.Font
                Instance.new("TextLabel").Text = ""
                Instance.new("TextLabel").TextColor3 = vb.Settings.TextColor
                Instance.new("TextLabel").TextSize = vb.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                {
                  Set = function(a, b)
                    a = a
                    b = va or vb
                    b = vb or vb
                    vd.Text = ve .. " - " .. tostring(vg.Value)
                    vh:Create(vj, TweenInfo.new(0,2, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                      Size = UDim2.new(1 - (va - b) / (va - vb), 0, 1, 0)
                    }):Play()
                    vg.Value = b
                    pcall(vg.Function, b)
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = h,
                  Value = e,
                  Holder = Instance.new("Frame")
                }:Set(e)
                return {
                  Set = function(a, b)
                    a = a
                    b = va or vb
                    b = vb or vb
                    vd.Text = ve .. " - " .. tostring(vg.Value)
                    vh:Create(vj, TweenInfo.new(0,2, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                      Size = UDim2.new(1 - (va - b) / (va - vb), 0, 1, 0)
                    }):Play()
                    vg.Value = b
                    pcall(vg.Function, b)
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = h,
                  Value = e,
                  Holder = Instance.new("Frame")
                }
              end,
              AddToggleSlider = function(a, b, c, d, e, g, h, j)
                a = a
                Instance.new("Frame").Name = "ToggleSlider_Holder"
                Instance.new("Frame").BackgroundColor3 = vc.Settings.ItemHolderColor
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 30)
                Instance.new("Frame").Parent = vd
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "Slider_Background"
                Instance.new("Frame").BackgroundColor3 = vc.Settings.DefaultItemColor
                Instance.new("Frame").ClipsDescendants = true
                Instance.new("Frame").Position = UDim2.new(0, 30, 0, 18)
                Instance.new("Frame").Size = UDim2.new(1, -35, 1, -20)
                Instance.new("Frame").InputBegan:Connect(function(a, b)
                  a = a
                  repeat
                    if not b and a.UserInputType == Enum.UserInputType.MouseButton1 then
                      wait()
                      vc:Set(math.floor((vd + math.clamp((va.X - vb.AbsolutePosition.X) / vb.AbsoluteSize.X, 0, 1) * (ve - vd)) * 10) / 10)
                    end
                  until not vg:IsMouseButtonPressed(Enum.UserInputType.MouseButton1)
                end)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "Slider"
                Instance.new("Frame").BackgroundColor3 = vb.ThemeColor
                Instance.new("Frame").Size = UDim2.new(0,75, 0, 1, 0)
                vc.ColourObjects[Instance.new("Frame")] = "BackgroundColor3"
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(0, 30, 0, 2)
                Instance.new("TextLabel").Size = UDim2.new(1, -35, 0, 14)
                Instance.new("TextLabel").Font = vc.Settings.Font
                Instance.new("TextLabel").Text = ""
                Instance.new("TextLabel").TextColor3 = vc.Settings.TextColor
                Instance.new("TextLabel").TextSize = vc.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                Instance.new("TextButton").Parent, Instance.new("TextButton").Name = Instance.new("Frame"), "ToggleSlider_Indicator"
                Instance.new("TextButton").BackgroundColor3 = vc.Settings.DefaultItemColor
                Instance.new("TextButton").Position = UDim2.new(0, 2, 0, 2)
                Instance.new("TextButton").Size = UDim2.new(0, 26, 0, 26)
                Instance.new("TextButton").AutoButtonColor = false
                Instance.new("TextButton").Font = vc.Settings.Font
                Instance.new("TextButton").Text = ""
                Instance.new("TextButton").MouseButton1Down:Connect(function()
                  va.Size = UDim2.new(0, 24, 0, 24)
                  va.Position = UDim2.new(0, 3, 0, 3)
                end)
                Instance.new("TextButton").MouseButton1Up:Connect(function()
                  va.Toggled = not va.Toggled
                  va:Toggle(va.Toggled)
                  vb.Size = UDim2.new(0, 26, 0, 26)
                  vb.Position = UDim2.new(0, 2, 0, 2)
                end)
                Instance.new("Frame").MouseLeave:Connect(function()
                  va.Size = UDim2.new(0, 26, 0, 26)
                  va.Position = UDim2.new(0, 2, 0, 2)
                end)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("TextButton"), UDim.new(0, 5)
                {
                  Set = function(a, b)
                    a = a
                    b = va or vb
                    b = vb or vb
                    if b == ve then
                      vg.Text = vh .. " - " .. tostring(vd.Value)
                      vj:Create(vk, TweenInfo.new(0,2, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                        Size = UDim2.new(1 - (va - b) / (va - vb), 0, 1, 0)
                      }):Play()
                      vd.Value = b
                      pcall(vd.Function, b)
                    end
                  end,
                  Toggle = function(a, b)
                    a = a
                    if b then
                    end
                    CreateCircularRipple(va, vb.ThemeColor or vc.Settings.DefaultItemColor, b)
                    if b then
                      vc.ColourObjects[va] = "BackgroundColor3"
                    elseif vc.ColourObjects[va] then
                      vc.ColourObjects[va] = nil
                    end
                    vd.Toggled = b
                    vd:Set(vd.Value)
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = j,
                  Toggled = h,
                  Value = e,
                  Holder = Instance.new("Frame")
                }:Set(e)
                return {
                  Set = function(a, b)
                    a = a
                    b = va or vb
                    b = vb or vb
                    if b == ve then
                      vg.Text = vh .. " - " .. tostring(vd.Value)
                      vj:Create(vk, TweenInfo.new(0,2, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                        Size = UDim2.new(1 - (va - b) / (va - vb), 0, 1, 0)
                      }):Play()
                      vd.Value = b
                      pcall(vd.Function, b)
                    end
                  end,
                  Toggle = function(a, b)
                    a = a
                    if b then
                    end
                    CreateCircularRipple(va, vb.ThemeColor or vc.Settings.DefaultItemColor, b)
                    if b then
                      vc.ColourObjects[va] = "BackgroundColor3"
                    elseif vc.ColourObjects[va] then
                      vc.ColourObjects[va] = nil
                    end
                    vd.Toggled = b
                    vd:Set(vd.Value)
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = j,
                  Toggled = h,
                  Value = e,
                  Holder = Instance.new("Frame")
                }
              end,
              AddDropdown = function(a, b, c, d)
                a = a
                Instance.new("Frame").Name = "Dropdown_Holder"
                Instance.new("Frame").BackgroundColor3 = vd.Settings.ItemHolderColor
                Instance.new("Frame").ClipsDescendants = true
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 30)
                Instance.new("Frame").Parent = ve
                Instance.new("Frame").InputBegan:Connect(function(a, b)
                  a = a
                  if not b and a.UserInputType == Enum.UserInputType.MouseButton1 and not va then
                    vb = not vb
                    vc:Toggle(vb)
                  end
                end)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "Labels_Holder"
                Instance.new("Frame").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("Frame").BackgroundTransparency = 1
                Instance.new("Frame").Position = UDim2.new(0, 2, 0, 0)
                Instance.new("Frame").Size = UDim2.new(1, -30, 0, 30)
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").BorderColor3 = Color3.fromRGB(27, 42, 53)
                Instance.new("TextLabel").Position = UDim2.new(0, 5, 0,5, -7)
                Instance.new("TextLabel").Size = UDim2.new(0,5, -2, 0, 14)
                Instance.new("TextLabel").Font = vd.Settings.Font
                Instance.new("TextLabel").Text = b
                Instance.new("TextLabel").TextColor3 = vd.Settings.TextColor
                Instance.new("TextLabel").TextSize = vd.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                Instance.new("TextLabel").TextXAlignment = Enum.TextXAlignment.Left
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Selected_Display"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").BorderColor3 = Color3.fromRGB(27, 42, 53)
                Instance.new("TextLabel").Position = UDim2.new(0,5, 3, 0, 8)
                Instance.new("TextLabel").Size = UDim2.new(0,5, -5, 0, 14)
                Instance.new("TextLabel").Font = vd.Settings.Font
                Instance.new("TextLabel").Text = ""
                Instance.new("TextLabel").TextColor3 = vd.Settings.TextColor
                Instance.new("TextLabel").TextSize = vd.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                Instance.new("TextLabel").TextXAlignment = Enum.TextXAlignment.Right
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Dropdown_Indicator"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(1, -28, 0, 2)
                Instance.new("TextLabel").Rotation = -90
                Instance.new("TextLabel").Size = UDim2.new(0, 26, 0, 26)
                Instance.new("TextLabel").Font = vd.Settings.DropdownIndicatorFont
                Instance.new("TextLabel").Text = "<"
                Instance.new("TextLabel").TextColor3 = vd.Settings.TextColor
                Instance.new("TextLabel").TextSize = vd.Settings.DropdownIndicatorTextSize
                Instance.new("ScrollingFrame").Parent, Instance.new("ScrollingFrame").Name = Instance.new("Frame"), "Dropdown_List"
                Instance.new("ScrollingFrame").Active = true
                Instance.new("ScrollingFrame").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("ScrollingFrame").BackgroundTransparency = 1
                Instance.new("ScrollingFrame").BorderSizePixel = 0
                Instance.new("ScrollingFrame").Position = UDim2.new(0, 0, 0, 30)
                Instance.new("ScrollingFrame").Size = UDim2.new(1, 0, 1, -30)
                Instance.new("ScrollingFrame").CanvasSize = UDim2.new(0, 0, 0, 2)
                Instance.new("ScrollingFrame").ScrollBarImageColor3 = Color3.fromRGB(0, 0, 0)
                Instance.new("ScrollingFrame").ScrollBarThickness = 5
                Instance.new("ScrollingFrame").ChildAdded:Connect(function(a)
                  a = a
                  if not a.ClassName:find("UI") then
                    va(UDim2.new(0, 0, 0, a.AbsoluteSize.Y + 2))
                  end
                end)
                Instance.new("ScrollingFrame").ChildRemoved:Connect(function(a)
                  a = a
                  if not a.ClassName:find("UI") then
                    va(UDim2.new(0, 0, 0, -a.AbsoluteSize.Y - 2))
                  end
                end)
                Instance.new("UIPadding").Parent = Instance.new("ScrollingFrame")
                Instance.new("UIPadding").PaddingBottom = UDim.new(0, 2)
                Instance.new("UIPadding").PaddingLeft = UDim.new(0, 2)
                Instance.new("UIPadding").PaddingRight = UDim.new(0, 2)
                Instance.new("UIListLayout").Parent, Instance.new("UIPadding").PaddingTop = Instance.new("ScrollingFrame"), UDim.new(0, 2)
                Instance.new("UIListLayout").SortOrder = Enum.SortOrder.LayoutOrder
                Instance.new("UIListLayout").Padding = UDim.new(0, 2)
                for fQ, fW in next, c, nil do
                  {
                    Toggle = function(a, b)
                      a = a
                      if not va then
                        va = true
                        if b then
                        end
                        if b then
                        end
                        vc:Create(vd, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                          Rotation = 0 or -90
                        }):Play()
                        vc:Create(ve, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                          Size = ve.Size + UDim2.new(0, 0, 0, 2 + (vb.MaxVisibleItems or #vb.Items) * 22 or -(2 + (vb.MaxVisibleItems or #vb.Items) * 22))
                        }):Play()
                        vc:Create(vg, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                          Size = vg.Size + UDim2.new(0, 0, 0, 2 + (vb.MaxVisibleItems or #vb.Items) * 22 or -(2 + (vb.MaxVisibleItems or #vb.Items) * 22))
                        }):Play()
                        vc:Create(vh, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                          CanvasSize = vh.CanvasSize + UDim2.new(0, 0, 0, 2 + (vb.MaxVisibleItems or #vb.Items) * 22 or -(2 + (vb.MaxVisibleItems or #vb.Items) * 22))
                        }):Play()
                        wait(0,5)
                        va = false
                        vj()
                        vk()
                      end
                    end,
                    AddItem = function(a, b)
                      a = a
                      if va then
                        table.insert(vb.Add, {
                          Name = b,
                          Holder = Instance.new("TextButton")
                        })
                        return
                      end
                      Instance.new("TextButton").Name = "Dropdown_Item"
                      Instance.new("TextButton").BackgroundColor3 = Color3.fromRGB(25, 25, 25)
                      Instance.new("TextButton").Size = UDim2.new(1, 0, 0, 20)
                      Instance.new("TextButton").Font = vc.Settings.Font
                      Instance.new("TextButton").Text = b
                      Instance.new("TextButton").TextColor3 = vc.Settings.TextColor
                      Instance.new("TextButton").TextSize = vc.Settings.TextSize
                      Instance.new("TextButton").TextWrapped = true
                      Instance.new("TextButton").Parent = vd
                      Instance.new("TextButton").MouseButton1Click:Connect(function()
                        va.Text = vb
                        vc.Selected = vb
                        pcall(vc.Function, vb)
                      end)
                      Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("TextButton"), UDim.new(0, 5)
                      table.insert(vg.Items, {
                        Name = b,
                        Holder = Instance.new("TextButton")
                      })
                    end,
                    RemoveItem = function(a, b)
                      a = a
                      if va then
                        for fg, fh in next, vb.Items, nil do
                          if fh.Name == b then
                            table.insert(vc.Remove, fh)
                          else
                          end
                        end
                        return
                      end
                      for fg, fh in next, vb.Items, nil do
                        if fh.Name == b then
                          table.remove(vb.Items, fg)
                          fh.Holder:Destroy()
                        else
                        end
                      end
                    end,
                    AddToolTip = function(a, b)
                      a = a
                      AddToolTip(va, vb, b)
                    end,
                    Function = d,
                    MaxVisibleItems = 10,
                    Selected = nil,
                    Items = {},
                    Holder = Instance.new("Frame")
                  }:AddItem(fW)
                end
                return {
                  Toggle = function(a, b)
                    a = a
                    if not va then
                      va = true
                      if b then
                      end
                      if b then
                      end
                      vc:Create(vd, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                        Rotation = 0 or -90
                      }):Play()
                      vc:Create(ve, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                        Size = ve.Size + UDim2.new(0, 0, 0, 2 + (vb.MaxVisibleItems or #vb.Items) * 22 or -(2 + (vb.MaxVisibleItems or #vb.Items) * 22))
                      }):Play()
                      vc:Create(vg, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                        Size = vg.Size + UDim2.new(0, 0, 0, 2 + (vb.MaxVisibleItems or #vb.Items) * 22 or -(2 + (vb.MaxVisibleItems or #vb.Items) * 22))
                      }):Play()
                      vc:Create(vh, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                        CanvasSize = vh.CanvasSize + UDim2.new(0, 0, 0, 2 + (vb.MaxVisibleItems or #vb.Items) * 22 or -(2 + (vb.MaxVisibleItems or #vb.Items) * 22))
                      }):Play()
                      wait(0,5)
                      va = false
                      vj()
                      vk()
                    end
                  end,
                  AddItem = function(a, b)
                    a = a
                    if va then
                      table.insert(vb.Add, {
                        Name = b,
                        Holder = Instance.new("TextButton")
                      })
                      return
                    end
                    Instance.new("TextButton").Name = "Dropdown_Item"
                    Instance.new("TextButton").BackgroundColor3 = Color3.fromRGB(25, 25, 25)
                    Instance.new("TextButton").Size = UDim2.new(1, 0, 0, 20)
                    Instance.new("TextButton").Font = vc.Settings.Font
                    Instance.new("TextButton").Text = b
                    Instance.new("TextButton").TextColor3 = vc.Settings.TextColor
                    Instance.new("TextButton").TextSize = vc.Settings.TextSize
                    Instance.new("TextButton").TextWrapped = true
                    Instance.new("TextButton").Parent = vd
                    Instance.new("TextButton").MouseButton1Click:Connect(function()
                      va.Text = vb
                      vc.Selected = vb
                      pcall(vc.Function, vb)
                    end)
                    Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("TextButton"), UDim.new(0, 5)
                    table.insert(vg.Items, {
                      Name = b,
                      Holder = Instance.new("TextButton")
                    })
                  end,
                  RemoveItem = function(a, b)
                    a = a
                    if va then
                      for fg, fh in next, vb.Items, nil do
                        if fh.Name == b then
                          table.insert(vc.Remove, fh)
                        else
                        end
                      end
                      return
                    end
                    for fg, fh in next, vb.Items, nil do
                      if fh.Name == b then
                        table.remove(vb.Items, fg)
                        fh.Holder:Destroy()
                      else
                      end
                    end
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = d,
                  MaxVisibleItems = 10,
                  Selected = nil,
                  Items = {},
                  Holder = Instance.new("Frame")
                }
              end,
              AddBind = function(a, b, c, d)
                a = a
                Instance.new("Frame").Name = "Bind_Holder"
                Instance.new("Frame").BackgroundColor3 = va.Settings.ItemHolderColor
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 30)
                Instance.new("Frame").Parent = vb
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(0, 5, 0,5, -7)
                Instance.new("TextLabel").Size = UDim2.new(1, -112, 0, 14)
                Instance.new("TextLabel").Font = va.Settings.Font
                Instance.new("TextLabel").Text = b
                Instance.new("TextLabel").TextColor3 = va.Settings.TextColor
                Instance.new("TextLabel").TextSize = va.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                Instance.new("TextLabel").TextXAlignment = Enum.TextXAlignment.Left
                Instance.new("TextBox").Parent, Instance.new("TextBox").Name = Instance.new("Frame"), "Box"
                Instance.new("TextBox").BackgroundColor3 = Color3.fromRGB(25, 25, 25)
                Instance.new("TextBox").Position = UDim2.new(1, -62, 0, 2)
                Instance.new("TextBox").Size = UDim2.new(0, 60, 1, -4)
                Instance.new("TextBox").ClearTextOnFocus = false
                Instance.new("TextBox").Font = va.Settings.Font
                Instance.new("TextBox").Text = ""
                Instance.new("TextBox").TextColor3 = va.Settings.TextColor
                Instance.new("TextBox").TextEditable = false
                Instance.new("TextBox").TextSize = va.Settings.TextSize
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("TextBox"), UDim.new(0, 5)
                vc.InputBegan:Connect(function(a, b)
                  a = a
                  if not b and a.KeyCode == va.Bind then
                    pcall(va.Function)
                  end
                end)
                {
                  Set = function(a, b)
                    a = a
                    va.Bind = b
                    vb.Text = b.Name
                    vb.Size = UDim2.new(0, vb.TextBounds.X + 10, 1, -4)
                    vb.Position = UDim2.new(1, -vb.AbsoluteSize.X - 2, 0, 2)
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = d,
                  Bind = c,
                  Holder = Instance.new("Frame")
                }:Set(c)
                return {
                  Set = function(a, b)
                    a = a
                    va.Bind = b
                    vb.Text = b.Name
                    vb.Size = UDim2.new(0, vb.TextBounds.X + 10, 1, -4)
                    vb.Position = UDim2.new(1, -vb.AbsoluteSize.X - 2, 0, 2)
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = d,
                  Bind = c,
                  Holder = Instance.new("Frame")
                }
              end,
              AddToggleBind = function(a, b, c, d, e)
                a = a
                vc.BindToggles[b] = d
                Instance.new("Frame").Name = "ToggleBind_Holder"
                Instance.new("Frame").BackgroundColor3 = vb.Settings.ItemHolderColor
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 30)
                Instance.new("Frame").Parent = vd
                Instance.new("Frame").InputBegan:Connect(function(a, b)
                  a = a
                  if not b and a.UserInputType == Enum.UserInputType.MouseButton1 then
                    va.Size = UDim2.new(0, 24, 0, 24)
                    va.Position = UDim2.new(1, -vb.AbsoluteSize.X - 29, 0, 3)
                  end
                end)
                Instance.new("Frame").InputEnded:Connect(function(a, b)
                  a = a
                  if not b and a.UserInputType == Enum.UserInputType.MouseButton1 then
                    va.BindToggles[vb] = not va.BindToggles[vb]
                    vc:Toggle(va.BindToggles[vb])
                    vd.Size = UDim2.new(0, 26, 0, 26)
                    vd.Position = UDim2.new(1, -ve.AbsoluteSize.X - 30, 0, 2)
                  end
                end)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(0, 5, 0,5, -7)
                Instance.new("TextLabel").Size = UDim2.new(1, -112, 0, 14)
                Instance.new("TextLabel").Font = vb.Settings.Font
                Instance.new("TextLabel").Text = b
                Instance.new("TextLabel").TextColor3 = vb.Settings.TextColor
                Instance.new("TextLabel").TextSize = vb.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                Instance.new("TextLabel").TextXAlignment = Enum.TextXAlignment.Left
                Instance.new("TextBox").Parent, Instance.new("TextBox").Name = Instance.new("Frame"), "Box"
                Instance.new("TextBox").BackgroundColor3 = vb.Settings.DefaultItemColor
                Instance.new("TextBox").Position = UDim2.new(1, -62, 0, 2)
                Instance.new("TextBox").Size = UDim2.new(0, 60, 1, -4)
                Instance.new("TextBox").ClearTextOnFocus = false
                Instance.new("TextBox").Font = vb.Settings.Font
                Instance.new("TextBox").Text = ""
                Instance.new("TextBox").TextColor3 = vb.Settings.TextColor
                Instance.new("TextBox").TextEditable = false
                Instance.new("TextBox").TextSize = vb.Settings.TextSize
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("TextBox"), UDim.new(0, 5)
                Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "ToggleBind_Indicator"
                Instance.new("Frame").BackgroundColor3 = vb.Settings.DefaultItemColor
                Instance.new("Frame").Position = UDim2.new(1, -90, 0, 2)
                Instance.new("Frame").Size = UDim2.new(0, 26, 0, 26)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                ve.InputBegan:Connect(function(a, b)
                  a = a
                  if not b and a.KeyCode == va.Bind and va.Toggled then
                    pcall(va.Function)
                  end
                end)
                {
                  Set = function(a, b)
                    a = a
                    va.Bind = b
                    vb.Text = b.Name
                    vb.Size = UDim2.new(0, vb.TextBounds.X + 10, 1, -4)
                    vb.Position = UDim2.new(1, -vb.AbsoluteSize.X - 2, 0, 2)
                    vc.Position = UDim2.new(1, -vb.AbsoluteSize.X - 30, 0, 2)
                  end,
                  Toggle = function(a, b)
                    a = a
                    if b then
                    end
                    CreateCircularRipple(va, vb.ThemeColor or vc.Settings.DefaultItemColor, b)
                    if b then
                      vc.ColourObjects[va] = "BackgroundColor3"
                    elseif vc.ColourObjects[va] then
                      vc.ColourObjects[va] = nil
                    end
                    vd.Toggled = b
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = e,
                  Toggled = d,
                  Bind = c,
                  Holder = Instance.new("Frame")
                }:Set(c)
                {
                  Set = function(a, b)
                    a = a
                    va.Bind = b
                    vb.Text = b.Name
                    vb.Size = UDim2.new(0, vb.TextBounds.X + 10, 1, -4)
                    vb.Position = UDim2.new(1, -vb.AbsoluteSize.X - 2, 0, 2)
                    vc.Position = UDim2.new(1, -vb.AbsoluteSize.X - 30, 0, 2)
                  end,
                  Toggle = function(a, b)
                    a = a
                    if b then
                    end
                    CreateCircularRipple(va, vb.ThemeColor or vc.Settings.DefaultItemColor, b)
                    if b then
                      vc.ColourObjects[va] = "BackgroundColor3"
                    elseif vc.ColourObjects[va] then
                      vc.ColourObjects[va] = nil
                    end
                    vd.Toggled = b
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = e,
                  Toggled = d,
                  Bind = c,
                  Holder = Instance.new("Frame")
                }:Toggle(d)
                return {
                  Set = function(a, b)
                    a = a
                    va.Bind = b
                    vb.Text = b.Name
                    vb.Size = UDim2.new(0, vb.TextBounds.X + 10, 1, -4)
                    vb.Position = UDim2.new(1, -vb.AbsoluteSize.X - 2, 0, 2)
                    vc.Position = UDim2.new(1, -vb.AbsoluteSize.X - 30, 0, 2)
                  end,
                  Toggle = function(a, b)
                    a = a
                    if b then
                    end
                    CreateCircularRipple(va, vb.ThemeColor or vc.Settings.DefaultItemColor, b)
                    if b then
                      vc.ColourObjects[va] = "BackgroundColor3"
                    elseif vc.ColourObjects[va] then
                      vc.ColourObjects[va] = nil
                    end
                    vd.Toggled = b
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = e,
                  Toggled = d,
                  Bind = c,
                  Holder = Instance.new("Frame")
                }
              end
            }
          end
        })
        return {
          Toggles = {},
          BindToggles = {},
          SliderToggles = {},
          Show = function(a)
            a = a
            for fe, fg in next, va.Tabs, nil do
              fg.Tab.Visible = fg.Tab == vb
              vc:Create(fg.Indicator, TweenInfo.new(0,2), {
                BackgroundColor3 = vd.Settings.TabButtonIndicatorColors["Enabled" or "Disabled"]
              }):Play()
            end
          end,
          Hide = function(a)
            a = a
            va.Visible = false
          end,
          IsShown = function(a)
            a = a
            return va.Visible
          end,
          Indicator = Instance.new("Frame"),
          Tab = Instance.new("ScrollingFrame"),
          Holder = vd,
          AddCategory = function(a, b)
            a = a
            Instance.new("Frame").Name = "Category_Frame"
            Instance.new("Frame").BackgroundColor3 = vb.Settings.CategoryColor
            Instance.new("Frame").Position = UDim2.new(0, 5, 0, 5)
            Instance.new("Frame").Size = UDim2.new(1, 0, 0, 35)
            Instance.new("Frame").Parent = va
            Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
            Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Category_Title"
            Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            Instance.new("TextLabel").BackgroundTransparency = 1
            Instance.new("TextLabel").Position = UDim2.new(0, 2, 0, 8)
            Instance.new("TextLabel").Size = UDim2.new(1, -4, 0, 14)
            Instance.new("TextLabel").Font = vb.Settings.CategoryFont
            Instance.new("TextLabel").Text = b
            Instance.new("TextLabel").TextColor3 = vb.Settings.TextColor
            Instance.new("TextLabel").TextSize = vb.Settings.TextSize
            Instance.new("TextLabel").TextWrapped = true
            Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "Category_List"
            Instance.new("Frame").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            Instance.new("Frame").BackgroundTransparency = 1
            Instance.new("Frame").Position = UDim2.new(0, 0, 0, 30)
            Instance.new("Frame").Size = UDim2.new(1, 0, 1, -30)
            Instance.new("Frame").ChildAdded:Connect(function(a)
              a = a
              if not a.ClassName:find("UI") then
                va.Size = va.Size + UDim2.new(0, 0, 0, a.AbsoluteSize.Y + 5)
                vb.CanvasSize = vb.CanvasSize + UDim2.new(0, 0, 0, a.AbsoluteSize.Y + 5)
              end
            end)
            Instance.new("UIListLayout").Parent = Instance.new("Frame")
            Instance.new("UIListLayout").SortOrder = Enum.SortOrder.LayoutOrder
            Instance.new("UIPadding").Parent, Instance.new("UIListLayout").Padding = Instance.new("Frame"), UDim.new(0, 5)
            Instance.new("UIPadding").PaddingBottom = UDim.new(0, 5)
            Instance.new("UIPadding").PaddingLeft = UDim.new(0, 5)
            Instance.new("UIPadding").PaddingRight = UDim.new(0, 5)
            Instance.new("UIPadding").PaddingTop = UDim.new(0, 5)
            return {
              Frame = Instance.new("Frame"),
              Holder = va,
              AddButton = function(a, b, c)
                a = a
                Instance.new("Frame").Name = "Button_Holder"
                Instance.new("Frame").BackgroundColor3 = va.Settings.ItemHolderColor
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 30)
                Instance.new("Frame").Parent = vb
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("TextButton").Parent, Instance.new("TextButton").Name = Instance.new("Frame"), "Button"
                Instance.new("TextButton").AutoButtonColor = false
                Instance.new("TextButton").BackgroundColor3 = va.Settings.DefaultItemColor
                Instance.new("TextButton").Position = UDim2.new(0, 2, 0, 2)
                Instance.new("TextButton").Size = UDim2.new(1, -4, 1, -4)
                Instance.new("TextButton").Font = va.Settings.Font
                Instance.new("TextButton").Text = b
                Instance.new("TextButton").TextColor3 = va.Settings.TextColor
                Instance.new("TextButton").TextSize = va.Settings.TextSize
                Instance.new("TextButton").TextWrapped = true
                Instance.new("TextButton").MouseButton1Down:Connect(function()
                  va.TextSize = vb.Settings.TextSize - 1
                end)
                Instance.new("TextButton").MouseLeave:Connect(function()
                  va.TextSize = vb.Settings.TextSize
                end)
                Instance.new("TextButton").MouseButton1Up:Connect(function()
                  pcall(va.Function)
                  vb.TextSize = vc.Settings.TextSize
                  CreateWaveRipple(vb, 0,8, Color3.fromRGB(255, 255, 255))
                end)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("TextButton"), UDim.new(0, 5)
                return {
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = c,
                  Button = Instance.new("TextButton"),
                  Holder = Instance.new("Frame")
                }
              end,
              AddToggle = function(a, b, c, d)
                a = a
                vc.Toggles[b] = c
                Instance.new("Frame").Name = b
                Instance.new("Frame").BackgroundColor3 = Color3.fromRGB(20, 20, 20)
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 30)
                Instance.new("Frame").Parent = vd
                Instance.new("Frame").InputBegan:Connect(function(a, b)
                  a = a
                  if not b and a.UserInputType == Enum.UserInputType.MouseButton1 then
                    va.Size = UDim2.new(0, 24, 0, 24)
                    va.Position = UDim2.new(1, -27, 0, 3)
                  end
                end)
                Instance.new("Frame").InputEnded:Connect(function(a, b)
                  a = a
                  if not b and a.UserInputType == Enum.UserInputType.MouseButton1 then
                    va.Toggles[vb] = not va.Toggles[vb]
                    vc:Set(va.Toggles[vb])
                    vd.Size = UDim2.new(0, 26, 0, 26)
                    vd.Position = UDim2.new(1, -28, 0, 2)
                  end
                end)
                Instance.new("Frame").MouseLeave:Connect(function()
                  va.Size = UDim2.new(0, 26, 0, 26)
                  va.Position = UDim2.new(1, -28, 0, 2)
                end)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(0, 5, 0,5, -7)
                Instance.new("TextLabel").Size = UDim2.new(1, -38, 0, 14)
                Instance.new("TextLabel").Font = Enum.Font.SourceSans
                Instance.new("TextLabel").Text = b
                Instance.new("TextLabel").TextColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").TextSize = 14
                Instance.new("TextLabel").TextWrapped = true
                Instance.new("TextLabel").TextXAlignment = Enum.TextXAlignment.Left
                Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "Toggle_Indicator"
                Instance.new("Frame").BackgroundColor3 = vb.Settings.DefaultItemColor
                Instance.new("Frame").Position = UDim2.new(1, -28, 0, 2)
                Instance.new("Frame").Size = UDim2.new(0, 26, 0, 26)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                {
                  Set = function(a, b)
                    a = a
                    if b then
                    end
                    CreateCircularRipple(va, vb.ThemeColor or vc.Settings.DefaultItemColor, b)
                    if b then
                      vc.ColourObjects[va] = "BackgroundColor3"
                    elseif vc.ColourObjects[va] then
                      vc.ColourObjects[va] = nil
                    end
                    vd.Toggled = b
                    pcall(vd.Function, b)
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = d,
                  Toggled = c,
                  Holder = Instance.new("Frame")
                }:Set(c)
                return {
                  Set = function(a, b)
                    a = a
                    if b then
                    end
                    CreateCircularRipple(va, vb.ThemeColor or vc.Settings.DefaultItemColor, b)
                    if b then
                      vc.ColourObjects[va] = "BackgroundColor3"
                    elseif vc.ColourObjects[va] then
                      vc.ColourObjects[va] = nil
                    end
                    vd.Toggled = b
                    pcall(vd.Function, b)
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = d,
                  Toggled = c,
                  Holder = Instance.new("Frame")
                }
              end,
              AddBox = function(a, b, c)
                a = a
                Instance.new("Frame").Name = "Box_Holder"
                Instance.new("Frame").BackgroundColor3 = Color3.fromRGB(20, 20, 20)
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 30)
                Instance.new("Frame").Parent = va
                Instance.new("Frame").MouseEnter:Connect(function()
                  ve:Create(vg, TweenInfo.new(0,2), {
                    Size = UDim2.new(1, -(vc or vd), 1, -4),
                    Position = UDim2.new(0, vc or vd, 0, 2)
                  }):Play()
                end)
                Instance.new("Frame").MouseLeave:Connect(function()
                  if va:IsFocused() then
                    va.FocusLost:Wait()
                  end
                  vb:Create(va, TweenInfo.new(0,2), {
                    Size = UDim2.new(0, vc, 1, -4),
                    Position = UDim2.new(1, -vc - 2, 0, 2)
                  }):Play()
                end)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(0, 5, 0,5, -7)
                Instance.new("TextLabel").Size = UDim2.new(1, -112, 0, 14)
                Instance.new("TextLabel").Font = vc.Settings.Font
                Instance.new("TextLabel").Text = b
                Instance.new("TextLabel").TextColor3 = vc.Settings.TextColor
                Instance.new("TextLabel").TextSize = vc.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                Instance.new("TextLabel").TextXAlignment = Enum.TextXAlignment.Left
                Instance.new("TextLabel").Size = UDim2.new(0, Instance.new("TextLabel").TextBounds.X + 2, 0, 14)
                Instance.new("TextBox").Parent, Instance.new("TextBox").Name = Instance.new("Frame"), "Box"
                Instance.new("TextBox").BackgroundColor3 = vc.Settings.DefaultItemColor
                Instance.new("TextBox").Position = UDim2.new(1, -102, 0, 2)
                Instance.new("TextBox").Size = UDim2.new(0, 100, 1, -4)
                Instance.new("TextBox").Font = vc.Settings.Font
                Instance.new("TextBox").Text = ""
                Instance.new("TextBox").TextColor3 = vc.Settings.TextColor
                Instance.new("TextBox").TextSize = vc.Settings.TextSize
                Instance.new("TextBox").TextWrapped = true
                Instance.new("TextBox").FocusLost:Connect(function()
                  pcall(va.Function, vb.Text)
                end)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("TextBox"), UDim.new(0, 5)
                return {
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = c,
                  Box = Instance.new("TextBox"),
                  Holder = Instance.new("Frame")
                }
              end,
              AddLabel = function(a, b)
                a = a
                Instance.new("Frame").Name = "Label_Holder"
                Instance.new("Frame").BackgroundColor3 = va.Settings.ItemHolderColor
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 18)
                Instance.new("Frame").Parent = vb
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(0, 5, 0,5, -7)
                Instance.new("TextLabel").Size = UDim2.new(1, -10, 0, 14)
                Instance.new("TextLabel").Font = va.Settings.Font
                Instance.new("TextLabel").Text = b
                Instance.new("TextLabel").TextColor3 = va.Settings.TextColor
                Instance.new("TextLabel").TextSize = va.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                return {
                  Label = Instance.new("TextLabel"),
                  Holder = Instance.new("Frame")
                }
              end,
              AddDualLabel = function(a, b)
                a = a
                Instance.new("Frame").Name = "DualLabel_Holder"
                Instance.new("Frame").BackgroundColor3 = va.Settings.ItemHolderColor
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 18)
                Instance.new("Frame").Parent = vb
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label1"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(0, 5, 0,5, -7)
                Instance.new("TextLabel").Size = UDim2.new(0,5, -5, 0, 14)
                Instance.new("TextLabel").Font = va.Settings.Font
                Instance.new("TextLabel").Text = b[1]
                Instance.new("TextLabel").TextColor3 = va.Settings.TextColor
                Instance.new("TextLabel").TextSize = va.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                Instance.new("TextLabel").TextXAlignment = Enum.TextXAlignment.Left
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label2"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(0,5, 0, 0,5, -7)
                Instance.new("TextLabel").Size = UDim2.new(0,5, -5, 0, 14)
                Instance.new("TextLabel").Font = va.Settings.Font
                Instance.new("TextLabel").Text = b[2]
                Instance.new("TextLabel").TextColor3 = va.Settings.TextColor
                Instance.new("TextLabel").TextSize = va.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                Instance.new("TextLabel").TextXAlignment = Enum.TextXAlignment.Right
                return {
                  Label2 = Instance.new("TextLabel"),
                  Label1 = Instance.new("TextLabel"),
                  Holder = Instance.new("Frame")
                }
              end,
              AddSlider = function(a, b, c, d, e, g, h)
                a = a
                Instance.new("Frame").Name = "Slider_Holder"
                Instance.new("Frame").BackgroundColor3 = vb.Settings.ItemHolderColor
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 30)
                Instance.new("Frame").Parent = vc
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "Slider_Background"
                Instance.new("Frame").BackgroundColor3 = vb.Settings.DefaultItemColor
                Instance.new("Frame").ClipsDescendants = true
                Instance.new("Frame").Position = UDim2.new(0, 5, 0, 18)
                Instance.new("Frame").Size = UDim2.new(1, -10, 1, -20)
                Instance.new("Frame").InputBegan:Connect(function(a, b)
                  a = a
                  repeat
                    if not b and a.UserInputType == Enum.UserInputType.MouseButton1 then
                      wait()
                      vc:Set(math.floor((vd + math.clamp((va.X - vb.AbsolutePosition.X) / vb.AbsoluteSize.X, 0, 1) * (ve - vd)) * 10) / 10)
                    end
                  until not vg:IsMouseButtonPressed(Enum.UserInputType.MouseButton1)
                end)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "Slider"
                Instance.new("Frame").BackgroundColor3 = vg.ThemeColor
                Instance.new("Frame").Size = UDim2.new(0,75, 0, 1, 0)
                vb.ColourObjects[Instance.new("Frame")] = "BackgroundColor3"
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(0, 5, 0, 2)
                Instance.new("TextLabel").Size = UDim2.new(1, -10, 0, 14)
                Instance.new("TextLabel").Font = vb.Settings.Font
                Instance.new("TextLabel").Text = ""
                Instance.new("TextLabel").TextColor3 = vb.Settings.TextColor
                Instance.new("TextLabel").TextSize = vb.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                {
                  Set = function(a, b)
                    a = a
                    b = va or vb
                    b = vb or vb
                    vd.Text = ve .. " - " .. tostring(vg.Value)
                    vh:Create(vj, TweenInfo.new(0,2, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                      Size = UDim2.new(1 - (va - b) / (va - vb), 0, 1, 0)
                    }):Play()
                    vg.Value = b
                    pcall(vg.Function, b)
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = h,
                  Value = e,
                  Holder = Instance.new("Frame")
                }:Set(e)
                return {
                  Set = function(a, b)
                    a = a
                    b = va or vb
                    b = vb or vb
                    vd.Text = ve .. " - " .. tostring(vg.Value)
                    vh:Create(vj, TweenInfo.new(0,2, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                      Size = UDim2.new(1 - (va - b) / (va - vb), 0, 1, 0)
                    }):Play()
                    vg.Value = b
                    pcall(vg.Function, b)
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = h,
                  Value = e,
                  Holder = Instance.new("Frame")
                }
              end,
              AddToggleSlider = function(a, b, c, d, e, g, h, j)
                a = a
                Instance.new("Frame").Name = "ToggleSlider_Holder"
                Instance.new("Frame").BackgroundColor3 = vc.Settings.ItemHolderColor
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 30)
                Instance.new("Frame").Parent = vd
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "Slider_Background"
                Instance.new("Frame").BackgroundColor3 = vc.Settings.DefaultItemColor
                Instance.new("Frame").ClipsDescendants = true
                Instance.new("Frame").Position = UDim2.new(0, 30, 0, 18)
                Instance.new("Frame").Size = UDim2.new(1, -35, 1, -20)
                Instance.new("Frame").InputBegan:Connect(function(a, b)
                  a = a
                  repeat
                    if not b and a.UserInputType == Enum.UserInputType.MouseButton1 then
                      wait()
                      vc:Set(math.floor((vd + math.clamp((va.X - vb.AbsolutePosition.X) / vb.AbsoluteSize.X, 0, 1) * (ve - vd)) * 10) / 10)
                    end
                  until not vg:IsMouseButtonPressed(Enum.UserInputType.MouseButton1)
                end)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "Slider"
                Instance.new("Frame").BackgroundColor3 = vb.ThemeColor
                Instance.new("Frame").Size = UDim2.new(0,75, 0, 1, 0)
                vc.ColourObjects[Instance.new("Frame")] = "BackgroundColor3"
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(0, 30, 0, 2)
                Instance.new("TextLabel").Size = UDim2.new(1, -35, 0, 14)
                Instance.new("TextLabel").Font = vc.Settings.Font
                Instance.new("TextLabel").Text = ""
                Instance.new("TextLabel").TextColor3 = vc.Settings.TextColor
                Instance.new("TextLabel").TextSize = vc.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                Instance.new("TextButton").Parent, Instance.new("TextButton").Name = Instance.new("Frame"), "ToggleSlider_Indicator"
                Instance.new("TextButton").BackgroundColor3 = vc.Settings.DefaultItemColor
                Instance.new("TextButton").Position = UDim2.new(0, 2, 0, 2)
                Instance.new("TextButton").Size = UDim2.new(0, 26, 0, 26)
                Instance.new("TextButton").AutoButtonColor = false
                Instance.new("TextButton").Font = vc.Settings.Font
                Instance.new("TextButton").Text = ""
                Instance.new("TextButton").MouseButton1Down:Connect(function()
                  va.Size = UDim2.new(0, 24, 0, 24)
                  va.Position = UDim2.new(0, 3, 0, 3)
                end)
                Instance.new("TextButton").MouseButton1Up:Connect(function()
                  va.Toggled = not va.Toggled
                  va:Toggle(va.Toggled)
                  vb.Size = UDim2.new(0, 26, 0, 26)
                  vb.Position = UDim2.new(0, 2, 0, 2)
                end)
                Instance.new("Frame").MouseLeave:Connect(function()
                  va.Size = UDim2.new(0, 26, 0, 26)
                  va.Position = UDim2.new(0, 2, 0, 2)
                end)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("TextButton"), UDim.new(0, 5)
                {
                  Set = function(a, b)
                    a = a
                    b = va or vb
                    b = vb or vb
                    if b == ve then
                      vg.Text = vh .. " - " .. tostring(vd.Value)
                      vj:Create(vk, TweenInfo.new(0,2, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                        Size = UDim2.new(1 - (va - b) / (va - vb), 0, 1, 0)
                      }):Play()
                      vd.Value = b
                      pcall(vd.Function, b)
                    end
                  end,
                  Toggle = function(a, b)
                    a = a
                    if b then
                    end
                    CreateCircularRipple(va, vb.ThemeColor or vc.Settings.DefaultItemColor, b)
                    if b then
                      vc.ColourObjects[va] = "BackgroundColor3"
                    elseif vc.ColourObjects[va] then
                      vc.ColourObjects[va] = nil
                    end
                    vd.Toggled = b
                    vd:Set(vd.Value)
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = j,
                  Toggled = h,
                  Value = e,
                  Holder = Instance.new("Frame")
                }:Set(e)
                return {
                  Set = function(a, b)
                    a = a
                    b = va or vb
                    b = vb or vb
                    if b == ve then
                      vg.Text = vh .. " - " .. tostring(vd.Value)
                      vj:Create(vk, TweenInfo.new(0,2, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                        Size = UDim2.new(1 - (va - b) / (va - vb), 0, 1, 0)
                      }):Play()
                      vd.Value = b
                      pcall(vd.Function, b)
                    end
                  end,
                  Toggle = function(a, b)
                    a = a
                    if b then
                    end
                    CreateCircularRipple(va, vb.ThemeColor or vc.Settings.DefaultItemColor, b)
                    if b then
                      vc.ColourObjects[va] = "BackgroundColor3"
                    elseif vc.ColourObjects[va] then
                      vc.ColourObjects[va] = nil
                    end
                    vd.Toggled = b
                    vd:Set(vd.Value)
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = j,
                  Toggled = h,
                  Value = e,
                  Holder = Instance.new("Frame")
                }
              end,
              AddDropdown = function(a, b, c, d)
                a = a
                Instance.new("Frame").Name = "Dropdown_Holder"
                Instance.new("Frame").BackgroundColor3 = vd.Settings.ItemHolderColor
                Instance.new("Frame").ClipsDescendants = true
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 30)
                Instance.new("Frame").Parent = ve
                Instance.new("Frame").InputBegan:Connect(function(a, b)
                  a = a
                  if not b and a.UserInputType == Enum.UserInputType.MouseButton1 and not va then
                    vb = not vb
                    vc:Toggle(vb)
                  end
                end)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "Labels_Holder"
                Instance.new("Frame").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("Frame").BackgroundTransparency = 1
                Instance.new("Frame").Position = UDim2.new(0, 2, 0, 0)
                Instance.new("Frame").Size = UDim2.new(1, -30, 0, 30)
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").BorderColor3 = Color3.fromRGB(27, 42, 53)
                Instance.new("TextLabel").Position = UDim2.new(0, 5, 0,5, -7)
                Instance.new("TextLabel").Size = UDim2.new(0,5, -2, 0, 14)
                Instance.new("TextLabel").Font = vd.Settings.Font
                Instance.new("TextLabel").Text = b
                Instance.new("TextLabel").TextColor3 = vd.Settings.TextColor
                Instance.new("TextLabel").TextSize = vd.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                Instance.new("TextLabel").TextXAlignment = Enum.TextXAlignment.Left
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Selected_Display"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").BorderColor3 = Color3.fromRGB(27, 42, 53)
                Instance.new("TextLabel").Position = UDim2.new(0,5, 3, 0, 8)
                Instance.new("TextLabel").Size = UDim2.new(0,5, -5, 0, 14)
                Instance.new("TextLabel").Font = vd.Settings.Font
                Instance.new("TextLabel").Text = ""
                Instance.new("TextLabel").TextColor3 = vd.Settings.TextColor
                Instance.new("TextLabel").TextSize = vd.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                Instance.new("TextLabel").TextXAlignment = Enum.TextXAlignment.Right
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Dropdown_Indicator"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(1, -28, 0, 2)
                Instance.new("TextLabel").Rotation = -90
                Instance.new("TextLabel").Size = UDim2.new(0, 26, 0, 26)
                Instance.new("TextLabel").Font = vd.Settings.DropdownIndicatorFont
                Instance.new("TextLabel").Text = "<"
                Instance.new("TextLabel").TextColor3 = vd.Settings.TextColor
                Instance.new("TextLabel").TextSize = vd.Settings.DropdownIndicatorTextSize
                Instance.new("ScrollingFrame").Parent, Instance.new("ScrollingFrame").Name = Instance.new("Frame"), "Dropdown_List"
                Instance.new("ScrollingFrame").Active = true
                Instance.new("ScrollingFrame").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("ScrollingFrame").BackgroundTransparency = 1
                Instance.new("ScrollingFrame").BorderSizePixel = 0
                Instance.new("ScrollingFrame").Position = UDim2.new(0, 0, 0, 30)
                Instance.new("ScrollingFrame").Size = UDim2.new(1, 0, 1, -30)
                Instance.new("ScrollingFrame").CanvasSize = UDim2.new(0, 0, 0, 2)
                Instance.new("ScrollingFrame").ScrollBarImageColor3 = Color3.fromRGB(0, 0, 0)
                Instance.new("ScrollingFrame").ScrollBarThickness = 5
                Instance.new("ScrollingFrame").ChildAdded:Connect(function(a)
                  a = a
                  if not a.ClassName:find("UI") then
                    va(UDim2.new(0, 0, 0, a.AbsoluteSize.Y + 2))
                  end
                end)
                Instance.new("ScrollingFrame").ChildRemoved:Connect(function(a)
                  a = a
                  if not a.ClassName:find("UI") then
                    va(UDim2.new(0, 0, 0, -a.AbsoluteSize.Y - 2))
                  end
                end)
                Instance.new("UIPadding").Parent = Instance.new("ScrollingFrame")
                Instance.new("UIPadding").PaddingBottom = UDim.new(0, 2)
                Instance.new("UIPadding").PaddingLeft = UDim.new(0, 2)
                Instance.new("UIPadding").PaddingRight = UDim.new(0, 2)
                Instance.new("UIListLayout").Parent, Instance.new("UIPadding").PaddingTop = Instance.new("ScrollingFrame"), UDim.new(0, 2)
                Instance.new("UIListLayout").SortOrder = Enum.SortOrder.LayoutOrder
                Instance.new("UIListLayout").Padding = UDim.new(0, 2)
                for fQ, fW in next, c, nil do
                  {
                    Toggle = function(a, b)
                      a = a
                      if not va then
                        va = true
                        if b then
                        end
                        if b then
                        end
                        vc:Create(vd, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                          Rotation = 0 or -90
                        }):Play()
                        vc:Create(ve, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                          Size = ve.Size + UDim2.new(0, 0, 0, 2 + (vb.MaxVisibleItems or #vb.Items) * 22 or -(2 + (vb.MaxVisibleItems or #vb.Items) * 22))
                        }):Play()
                        vc:Create(vg, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                          Size = vg.Size + UDim2.new(0, 0, 0, 2 + (vb.MaxVisibleItems or #vb.Items) * 22 or -(2 + (vb.MaxVisibleItems or #vb.Items) * 22))
                        }):Play()
                        vc:Create(vh, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                          CanvasSize = vh.CanvasSize + UDim2.new(0, 0, 0, 2 + (vb.MaxVisibleItems or #vb.Items) * 22 or -(2 + (vb.MaxVisibleItems or #vb.Items) * 22))
                        }):Play()
                        wait(0,5)
                        va = false
                        vj()
                        vk()
                      end
                    end,
                    AddItem = function(a, b)
                      a = a
                      if va then
                        table.insert(vb.Add, {
                          Name = b,
                          Holder = Instance.new("TextButton")
                        })
                        return
                      end
                      Instance.new("TextButton").Name = "Dropdown_Item"
                      Instance.new("TextButton").BackgroundColor3 = Color3.fromRGB(25, 25, 25)
                      Instance.new("TextButton").Size = UDim2.new(1, 0, 0, 20)
                      Instance.new("TextButton").Font = vc.Settings.Font
                      Instance.new("TextButton").Text = b
                      Instance.new("TextButton").TextColor3 = vc.Settings.TextColor
                      Instance.new("TextButton").TextSize = vc.Settings.TextSize
                      Instance.new("TextButton").TextWrapped = true
                      Instance.new("TextButton").Parent = vd
                      Instance.new("TextButton").MouseButton1Click:Connect(function()
                        va.Text = vb
                        vc.Selected = vb
                        pcall(vc.Function, vb)
                      end)
                      Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("TextButton"), UDim.new(0, 5)
                      table.insert(vg.Items, {
                        Name = b,
                        Holder = Instance.new("TextButton")
                      })
                    end,
                    RemoveItem = function(a, b)
                      a = a
                      if va then
                        for fg, fh in next, vb.Items, nil do
                          if fh.Name == b then
                            table.insert(vc.Remove, fh)
                          else
                          end
                        end
                        return
                      end
                      for fg, fh in next, vb.Items, nil do
                        if fh.Name == b then
                          table.remove(vb.Items, fg)
                          fh.Holder:Destroy()
                        else
                        end
                      end
                    end,
                    AddToolTip = function(a, b)
                      a = a
                      AddToolTip(va, vb, b)
                    end,
                    Function = d,
                    MaxVisibleItems = 10,
                    Selected = nil,
                    Items = {},
                    Holder = Instance.new("Frame")
                  }:AddItem(fW)
                end
                return {
                  Toggle = function(a, b)
                    a = a
                    if not va then
                      va = true
                      if b then
                      end
                      if b then
                      end
                      vc:Create(vd, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                        Rotation = 0 or -90
                      }):Play()
                      vc:Create(ve, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                        Size = ve.Size + UDim2.new(0, 0, 0, 2 + (vb.MaxVisibleItems or #vb.Items) * 22 or -(2 + (vb.MaxVisibleItems or #vb.Items) * 22))
                      }):Play()
                      vc:Create(vg, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                        Size = vg.Size + UDim2.new(0, 0, 0, 2 + (vb.MaxVisibleItems or #vb.Items) * 22 or -(2 + (vb.MaxVisibleItems or #vb.Items) * 22))
                      }):Play()
                      vc:Create(vh, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                        CanvasSize = vh.CanvasSize + UDim2.new(0, 0, 0, 2 + (vb.MaxVisibleItems or #vb.Items) * 22 or -(2 + (vb.MaxVisibleItems or #vb.Items) * 22))
                      }):Play()
                      wait(0,5)
                      va = false
                      vj()
                      vk()
                    end
                  end,
                  AddItem = function(a, b)
                    a = a
                    if va then
                      table.insert(vb.Add, {
                        Name = b,
                        Holder = Instance.new("TextButton")
                      })
                      return
                    end
                    Instance.new("TextButton").Name = "Dropdown_Item"
                    Instance.new("TextButton").BackgroundColor3 = Color3.fromRGB(25, 25, 25)
                    Instance.new("TextButton").Size = UDim2.new(1, 0, 0, 20)
                    Instance.new("TextButton").Font = vc.Settings.Font
                    Instance.new("TextButton").Text = b
                    Instance.new("TextButton").TextColor3 = vc.Settings.TextColor
                    Instance.new("TextButton").TextSize = vc.Settings.TextSize
                    Instance.new("TextButton").TextWrapped = true
                    Instance.new("TextButton").Parent = vd
                    Instance.new("TextButton").MouseButton1Click:Connect(function()
                      va.Text = vb
                      vc.Selected = vb
                      pcall(vc.Function, vb)
                    end)
                    Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("TextButton"), UDim.new(0, 5)
                    table.insert(vg.Items, {
                      Name = b,
                      Holder = Instance.new("TextButton")
                    })
                  end,
                  RemoveItem = function(a, b)
                    a = a
                    if va then
                      for fg, fh in next, vb.Items, nil do
                        if fh.Name == b then
                          table.insert(vc.Remove, fh)
                        else
                        end
                      end
                      return
                    end
                    for fg, fh in next, vb.Items, nil do
                      if fh.Name == b then
                        table.remove(vb.Items, fg)
                        fh.Holder:Destroy()
                      else
                      end
                    end
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = d,
                  MaxVisibleItems = 10,
                  Selected = nil,
                  Items = {},
                  Holder = Instance.new("Frame")
                }
              end,
              AddBind = function(a, b, c, d)
                a = a
                Instance.new("Frame").Name = "Bind_Holder"
                Instance.new("Frame").BackgroundColor3 = va.Settings.ItemHolderColor
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 30)
                Instance.new("Frame").Parent = vb
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(0, 5, 0,5, -7)
                Instance.new("TextLabel").Size = UDim2.new(1, -112, 0, 14)
                Instance.new("TextLabel").Font = va.Settings.Font
                Instance.new("TextLabel").Text = b
                Instance.new("TextLabel").TextColor3 = va.Settings.TextColor
                Instance.new("TextLabel").TextSize = va.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                Instance.new("TextLabel").TextXAlignment = Enum.TextXAlignment.Left
                Instance.new("TextBox").Parent, Instance.new("TextBox").Name = Instance.new("Frame"), "Box"
                Instance.new("TextBox").BackgroundColor3 = Color3.fromRGB(25, 25, 25)
                Instance.new("TextBox").Position = UDim2.new(1, -62, 0, 2)
                Instance.new("TextBox").Size = UDim2.new(0, 60, 1, -4)
                Instance.new("TextBox").ClearTextOnFocus = false
                Instance.new("TextBox").Font = va.Settings.Font
                Instance.new("TextBox").Text = ""
                Instance.new("TextBox").TextColor3 = va.Settings.TextColor
                Instance.new("TextBox").TextEditable = false
                Instance.new("TextBox").TextSize = va.Settings.TextSize
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("TextBox"), UDim.new(0, 5)
                vc.InputBegan:Connect(function(a, b)
                  a = a
                  if not b and a.KeyCode == va.Bind then
                    pcall(va.Function)
                  end
                end)
                {
                  Set = function(a, b)
                    a = a
                    va.Bind = b
                    vb.Text = b.Name
                    vb.Size = UDim2.new(0, vb.TextBounds.X + 10, 1, -4)
                    vb.Position = UDim2.new(1, -vb.AbsoluteSize.X - 2, 0, 2)
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = d,
                  Bind = c,
                  Holder = Instance.new("Frame")
                }:Set(c)
                return {
                  Set = function(a, b)
                    a = a
                    va.Bind = b
                    vb.Text = b.Name
                    vb.Size = UDim2.new(0, vb.TextBounds.X + 10, 1, -4)
                    vb.Position = UDim2.new(1, -vb.AbsoluteSize.X - 2, 0, 2)
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = d,
                  Bind = c,
                  Holder = Instance.new("Frame")
                }
              end,
              AddToggleBind = function(a, b, c, d, e)
                a = a
                vc.BindToggles[b] = d
                Instance.new("Frame").Name = "ToggleBind_Holder"
                Instance.new("Frame").BackgroundColor3 = vb.Settings.ItemHolderColor
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 30)
                Instance.new("Frame").Parent = vd
                Instance.new("Frame").InputBegan:Connect(function(a, b)
                  a = a
                  if not b and a.UserInputType == Enum.UserInputType.MouseButton1 then
                    va.Size = UDim2.new(0, 24, 0, 24)
                    va.Position = UDim2.new(1, -vb.AbsoluteSize.X - 29, 0, 3)
                  end
                end)
                Instance.new("Frame").InputEnded:Connect(function(a, b)
                  a = a
                  if not b and a.UserInputType == Enum.UserInputType.MouseButton1 then
                    va.BindToggles[vb] = not va.BindToggles[vb]
                    vc:Toggle(va.BindToggles[vb])
                    vd.Size = UDim2.new(0, 26, 0, 26)
                    vd.Position = UDim2.new(1, -ve.AbsoluteSize.X - 30, 0, 2)
                  end
                end)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(0, 5, 0,5, -7)
                Instance.new("TextLabel").Size = UDim2.new(1, -112, 0, 14)
                Instance.new("TextLabel").Font = vb.Settings.Font
                Instance.new("TextLabel").Text = b
                Instance.new("TextLabel").TextColor3 = vb.Settings.TextColor
                Instance.new("TextLabel").TextSize = vb.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                Instance.new("TextLabel").TextXAlignment = Enum.TextXAlignment.Left
                Instance.new("TextBox").Parent, Instance.new("TextBox").Name = Instance.new("Frame"), "Box"
                Instance.new("TextBox").BackgroundColor3 = vb.Settings.DefaultItemColor
                Instance.new("TextBox").Position = UDim2.new(1, -62, 0, 2)
                Instance.new("TextBox").Size = UDim2.new(0, 60, 1, -4)
                Instance.new("TextBox").ClearTextOnFocus = false
                Instance.new("TextBox").Font = vb.Settings.Font
                Instance.new("TextBox").Text = ""
                Instance.new("TextBox").TextColor3 = vb.Settings.TextColor
                Instance.new("TextBox").TextEditable = false
                Instance.new("TextBox").TextSize = vb.Settings.TextSize
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("TextBox"), UDim.new(0, 5)
                Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "ToggleBind_Indicator"
                Instance.new("Frame").BackgroundColor3 = vb.Settings.DefaultItemColor
                Instance.new("Frame").Position = UDim2.new(1, -90, 0, 2)
                Instance.new("Frame").Size = UDim2.new(0, 26, 0, 26)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                ve.InputBegan:Connect(function(a, b)
                  a = a
                  if not b and a.KeyCode == va.Bind and va.Toggled then
                    pcall(va.Function)
                  end
                end)
                {
                  Set = function(a, b)
                    a = a
                    va.Bind = b
                    vb.Text = b.Name
                    vb.Size = UDim2.new(0, vb.TextBounds.X + 10, 1, -4)
                    vb.Position = UDim2.new(1, -vb.AbsoluteSize.X - 2, 0, 2)
                    vc.Position = UDim2.new(1, -vb.AbsoluteSize.X - 30, 0, 2)
                  end,
                  Toggle = function(a, b)
                    a = a
                    if b then
                    end
                    CreateCircularRipple(va, vb.ThemeColor or vc.Settings.DefaultItemColor, b)
                    if b then
                      vc.ColourObjects[va] = "BackgroundColor3"
                    elseif vc.ColourObjects[va] then
                      vc.ColourObjects[va] = nil
                    end
                    vd.Toggled = b
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = e,
                  Toggled = d,
                  Bind = c,
                  Holder = Instance.new("Frame")
                }:Set(c)
                {
                  Set = function(a, b)
                    a = a
                    va.Bind = b
                    vb.Text = b.Name
                    vb.Size = UDim2.new(0, vb.TextBounds.X + 10, 1, -4)
                    vb.Position = UDim2.new(1, -vb.AbsoluteSize.X - 2, 0, 2)
                    vc.Position = UDim2.new(1, -vb.AbsoluteSize.X - 30, 0, 2)
                  end,
                  Toggle = function(a, b)
                    a = a
                    if b then
                    end
                    CreateCircularRipple(va, vb.ThemeColor or vc.Settings.DefaultItemColor, b)
                    if b then
                      vc.ColourObjects[va] = "BackgroundColor3"
                    elseif vc.ColourObjects[va] then
                      vc.ColourObjects[va] = nil
                    end
                    vd.Toggled = b
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = e,
                  Toggled = d,
                  Bind = c,
                  Holder = Instance.new("Frame")
                }:Toggle(d)
                return {
                  Set = function(a, b)
                    a = a
                    va.Bind = b
                    vb.Text = b.Name
                    vb.Size = UDim2.new(0, vb.TextBounds.X + 10, 1, -4)
                    vb.Position = UDim2.new(1, -vb.AbsoluteSize.X - 2, 0, 2)
                    vc.Position = UDim2.new(1, -vb.AbsoluteSize.X - 30, 0, 2)
                  end,
                  Toggle = function(a, b)
                    a = a
                    if b then
                    end
                    CreateCircularRipple(va, vb.ThemeColor or vc.Settings.DefaultItemColor, b)
                    if b then
                      vc.ColourObjects[va] = "BackgroundColor3"
                    elseif vc.ColourObjects[va] then
                      vc.ColourObjects[va] = nil
                    end
                    vd.Toggled = b
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = e,
                  Toggled = d,
                  Bind = c,
                  Holder = Instance.new("Frame")
                }
              end
            }
          end
        }
      end
    }
    return {
      Tabs = {},
      Toggle = function(a, b)
        a = a
        if b then
        end
        va:Create(vb, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
          Size = UDim2.new(0, 440 or vc.TextBounds.X + 3 + vd.TextBounds.X + 20, 0, 40)
        }):Play()
        if b then
        end
        va:Create(ve, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
          Size = UDim2.new(1, 0, 0, 350 or 0)
        }):Play()
        if b then
        end
        va:Create(vg, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
          Position = UDim2.new(0, 0, 1, -5 or -10)
        }):Play()
      end,
      SetTheme = function(a, b)
        a = a
        va.ThemeColor, vb.ThemeColor = b, b
        for fg, fh in next, va.ColourObjects, nil do
          fg[fh] = b
        end
      end,
      SetStartupTab = function(a, b)
        a = a
        for fg, fh in next, va.Tabs, nil do
          if fh == b then
            fh:Show()
          end
        end
      end,
      ThemeColor = b.ThemeColor,
      Toggled = true,
      ToggleKey = b.ToggleKey,
      Gui = vc,
      AddTab = function(a, b)
        a = a
        Instance.new("ScrollingFrame").Name = "Tab"
        Instance.new("ScrollingFrame").Parent = vd
        Instance.new("ScrollingFrame").Active = true
        Instance.new("ScrollingFrame").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        Instance.new("ScrollingFrame").BackgroundTransparency = 1
        Instance.new("ScrollingFrame").BorderSizePixel = 0
        Instance.new("ScrollingFrame").Size = UDim2.new(1, 0, 1, 0)
        Instance.new("ScrollingFrame").CanvasSize = UDim2.new(0, 0, 0, 0)
        Instance.new("ScrollingFrame").ScrollBarImageColor3 = Color3.fromRGB(0, 0, 0)
        Instance.new("ScrollingFrame").ScrollBarThickness = 5
        Instance.new("ScrollingFrame").Visible = false
        Instance.new("ScrollingFrame").ChildAdded:Connect(function(a)
          a = a
          if not a.ClassName:find("UI") then
            va.CanvasSize = va.CanvasSize + UDim2.new(0, 0, 0, a.AbsoluteSize.Y + 5)
          end
        end)
        Instance.new("UIListLayout").Parent = Instance.new("ScrollingFrame")
        Instance.new("UIListLayout").SortOrder = Enum.SortOrder.LayoutOrder
        Instance.new("UIListLayout").Padding = UDim.new(0, 5)
        Instance.new("UIPadding").Parent, Instance.new("UIPadding").Archivable = Instance.new("ScrollingFrame"), false
        Instance.new("UIPadding").PaddingBottom = UDim.new(0, 5)
        Instance.new("UIPadding").PaddingLeft = UDim.new(0, 5)
        Instance.new("UIPadding").PaddingRight = UDim.new(0, 5)
        Instance.new("UIPadding").PaddingTop = UDim.new(0, 5)
        Instance.new("Frame").Name = "Button_Holder"
        Instance.new("Frame").BackgroundColor3 = vc.Settings.TabButtonColor
        Instance.new("Frame").Size = UDim2.new(1, -10, 0, 30)
        Instance.new("Frame").Parent = ve
        Instance.new("Frame").MouseEnter:Connect(function()
          if not va:IsShown() then
            vb:Create(vc, TweenInfo.new(0,2), {
              BackgroundColor3 = vd.Settings.TabButtonIndicatorColors.Hover
            }):Play()
          end
        end)
        Instance.new("Frame").MouseLeave:Connect(function()
          if not va:IsShown() then
            vb:Create(vc, TweenInfo.new(0,2), {
              BackgroundColor3 = vd.Settings.TabButtonIndicatorColors.Disabled
            }):Play()
          end
        end)
        Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
        Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "Indicator"
        Instance.new("Frame").BackgroundColor3 = vc.Settings.TabButtonIndicatorColors.Disabled
        Instance.new("Frame").Position = UDim2.new(0, 4, 0, 8)
        Instance.new("Frame").Size = UDim2.new(0, 2, 1, -16)
        Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
        Instance.new("TextButton").Parent, Instance.new("TextButton").Name = Instance.new("Frame"), "Button"
        Instance.new("TextButton").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        Instance.new("TextButton").BackgroundTransparency = 1
        Instance.new("TextButton").Position = UDim2.new(0, 10, 0, 0)
        Instance.new("TextButton").Size = UDim2.new(1, -10, 1, 0)
        Instance.new("TextButton").Font = vc.Settings.Font
        Instance.new("TextButton").Text = b
        Instance.new("TextButton").TextColor3 = vc.Settings.TextColor
        Instance.new("TextButton").TextSize = vc.Settings.TextSize
        Instance.new("TextButton").MouseButton1Click:Connect(function()
          va:Show()
        end)
        table.insert(va.Tabs, {
          Toggles = {},
          BindToggles = {},
          SliderToggles = {},
          Show = function(a)
            a = a
            for fe, fg in next, va.Tabs, nil do
              fg.Tab.Visible = fg.Tab == vb
              vc:Create(fg.Indicator, TweenInfo.new(0,2), {
                BackgroundColor3 = vd.Settings.TabButtonIndicatorColors["Enabled" or "Disabled"]
              }):Play()
            end
          end,
          Hide = function(a)
            a = a
            va.Visible = false
          end,
          IsShown = function(a)
            a = a
            return va.Visible
          end,
          Indicator = Instance.new("Frame"),
          Tab = Instance.new("ScrollingFrame"),
          Holder = vd,
          AddCategory = function(a, b)
            a = a
            Instance.new("Frame").Name = "Category_Frame"
            Instance.new("Frame").BackgroundColor3 = vb.Settings.CategoryColor
            Instance.new("Frame").Position = UDim2.new(0, 5, 0, 5)
            Instance.new("Frame").Size = UDim2.new(1, 0, 0, 35)
            Instance.new("Frame").Parent = va
            Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
            Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Category_Title"
            Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            Instance.new("TextLabel").BackgroundTransparency = 1
            Instance.new("TextLabel").Position = UDim2.new(0, 2, 0, 8)
            Instance.new("TextLabel").Size = UDim2.new(1, -4, 0, 14)
            Instance.new("TextLabel").Font = vb.Settings.CategoryFont
            Instance.new("TextLabel").Text = b
            Instance.new("TextLabel").TextColor3 = vb.Settings.TextColor
            Instance.new("TextLabel").TextSize = vb.Settings.TextSize
            Instance.new("TextLabel").TextWrapped = true
            Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "Category_List"
            Instance.new("Frame").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            Instance.new("Frame").BackgroundTransparency = 1
            Instance.new("Frame").Position = UDim2.new(0, 0, 0, 30)
            Instance.new("Frame").Size = UDim2.new(1, 0, 1, -30)
            Instance.new("Frame").ChildAdded:Connect(function(a)
              a = a
              if not a.ClassName:find("UI") then
                va.Size = va.Size + UDim2.new(0, 0, 0, a.AbsoluteSize.Y + 5)
                vb.CanvasSize = vb.CanvasSize + UDim2.new(0, 0, 0, a.AbsoluteSize.Y + 5)
              end
            end)
            Instance.new("UIListLayout").Parent = Instance.new("Frame")
            Instance.new("UIListLayout").SortOrder = Enum.SortOrder.LayoutOrder
            Instance.new("UIPadding").Parent, Instance.new("UIListLayout").Padding = Instance.new("Frame"), UDim.new(0, 5)
            Instance.new("UIPadding").PaddingBottom = UDim.new(0, 5)
            Instance.new("UIPadding").PaddingLeft = UDim.new(0, 5)
            Instance.new("UIPadding").PaddingRight = UDim.new(0, 5)
            Instance.new("UIPadding").PaddingTop = UDim.new(0, 5)
            return {
              Frame = Instance.new("Frame"),
              Holder = va,
              AddButton = function(a, b, c)
                a = a
                Instance.new("Frame").Name = "Button_Holder"
                Instance.new("Frame").BackgroundColor3 = va.Settings.ItemHolderColor
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 30)
                Instance.new("Frame").Parent = vb
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("TextButton").Parent, Instance.new("TextButton").Name = Instance.new("Frame"), "Button"
                Instance.new("TextButton").AutoButtonColor = false
                Instance.new("TextButton").BackgroundColor3 = va.Settings.DefaultItemColor
                Instance.new("TextButton").Position = UDim2.new(0, 2, 0, 2)
                Instance.new("TextButton").Size = UDim2.new(1, -4, 1, -4)
                Instance.new("TextButton").Font = va.Settings.Font
                Instance.new("TextButton").Text = b
                Instance.new("TextButton").TextColor3 = va.Settings.TextColor
                Instance.new("TextButton").TextSize = va.Settings.TextSize
                Instance.new("TextButton").TextWrapped = true
                Instance.new("TextButton").MouseButton1Down:Connect(function()
                  va.TextSize = vb.Settings.TextSize - 1
                end)
                Instance.new("TextButton").MouseLeave:Connect(function()
                  va.TextSize = vb.Settings.TextSize
                end)
                Instance.new("TextButton").MouseButton1Up:Connect(function()
                  pcall(va.Function)
                  vb.TextSize = vc.Settings.TextSize
                  CreateWaveRipple(vb, 0,8, Color3.fromRGB(255, 255, 255))
                end)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("TextButton"), UDim.new(0, 5)
                return {
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = c,
                  Button = Instance.new("TextButton"),
                  Holder = Instance.new("Frame")
                }
              end,
              AddToggle = function(a, b, c, d)
                a = a
                vc.Toggles[b] = c
                Instance.new("Frame").Name = b
                Instance.new("Frame").BackgroundColor3 = Color3.fromRGB(20, 20, 20)
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 30)
                Instance.new("Frame").Parent = vd
                Instance.new("Frame").InputBegan:Connect(function(a, b)
                  a = a
                  if not b and a.UserInputType == Enum.UserInputType.MouseButton1 then
                    va.Size = UDim2.new(0, 24, 0, 24)
                    va.Position = UDim2.new(1, -27, 0, 3)
                  end
                end)
                Instance.new("Frame").InputEnded:Connect(function(a, b)
                  a = a
                  if not b and a.UserInputType == Enum.UserInputType.MouseButton1 then
                    va.Toggles[vb] = not va.Toggles[vb]
                    vc:Set(va.Toggles[vb])
                    vd.Size = UDim2.new(0, 26, 0, 26)
                    vd.Position = UDim2.new(1, -28, 0, 2)
                  end
                end)
                Instance.new("Frame").MouseLeave:Connect(function()
                  va.Size = UDim2.new(0, 26, 0, 26)
                  va.Position = UDim2.new(1, -28, 0, 2)
                end)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(0, 5, 0,5, -7)
                Instance.new("TextLabel").Size = UDim2.new(1, -38, 0, 14)
                Instance.new("TextLabel").Font = Enum.Font.SourceSans
                Instance.new("TextLabel").Text = b
                Instance.new("TextLabel").TextColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").TextSize = 14
                Instance.new("TextLabel").TextWrapped = true
                Instance.new("TextLabel").TextXAlignment = Enum.TextXAlignment.Left
                Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "Toggle_Indicator"
                Instance.new("Frame").BackgroundColor3 = vb.Settings.DefaultItemColor
                Instance.new("Frame").Position = UDim2.new(1, -28, 0, 2)
                Instance.new("Frame").Size = UDim2.new(0, 26, 0, 26)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                {
                  Set = function(a, b)
                    a = a
                    if b then
                    end
                    CreateCircularRipple(va, vb.ThemeColor or vc.Settings.DefaultItemColor, b)
                    if b then
                      vc.ColourObjects[va] = "BackgroundColor3"
                    elseif vc.ColourObjects[va] then
                      vc.ColourObjects[va] = nil
                    end
                    vd.Toggled = b
                    pcall(vd.Function, b)
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = d,
                  Toggled = c,
                  Holder = Instance.new("Frame")
                }:Set(c)
                return {
                  Set = function(a, b)
                    a = a
                    if b then
                    end
                    CreateCircularRipple(va, vb.ThemeColor or vc.Settings.DefaultItemColor, b)
                    if b then
                      vc.ColourObjects[va] = "BackgroundColor3"
                    elseif vc.ColourObjects[va] then
                      vc.ColourObjects[va] = nil
                    end
                    vd.Toggled = b
                    pcall(vd.Function, b)
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = d,
                  Toggled = c,
                  Holder = Instance.new("Frame")
                }
              end,
              AddBox = function(a, b, c)
                a = a
                Instance.new("Frame").Name = "Box_Holder"
                Instance.new("Frame").BackgroundColor3 = Color3.fromRGB(20, 20, 20)
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 30)
                Instance.new("Frame").Parent = va
                Instance.new("Frame").MouseEnter:Connect(function()
                  ve:Create(vg, TweenInfo.new(0,2), {
                    Size = UDim2.new(1, -(vc or vd), 1, -4),
                    Position = UDim2.new(0, vc or vd, 0, 2)
                  }):Play()
                end)
                Instance.new("Frame").MouseLeave:Connect(function()
                  if va:IsFocused() then
                    va.FocusLost:Wait()
                  end
                  vb:Create(va, TweenInfo.new(0,2), {
                    Size = UDim2.new(0, vc, 1, -4),
                    Position = UDim2.new(1, -vc - 2, 0, 2)
                  }):Play()
                end)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(0, 5, 0,5, -7)
                Instance.new("TextLabel").Size = UDim2.new(1, -112, 0, 14)
                Instance.new("TextLabel").Font = vc.Settings.Font
                Instance.new("TextLabel").Text = b
                Instance.new("TextLabel").TextColor3 = vc.Settings.TextColor
                Instance.new("TextLabel").TextSize = vc.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                Instance.new("TextLabel").TextXAlignment = Enum.TextXAlignment.Left
                Instance.new("TextLabel").Size = UDim2.new(0, Instance.new("TextLabel").TextBounds.X + 2, 0, 14)
                Instance.new("TextBox").Parent, Instance.new("TextBox").Name = Instance.new("Frame"), "Box"
                Instance.new("TextBox").BackgroundColor3 = vc.Settings.DefaultItemColor
                Instance.new("TextBox").Position = UDim2.new(1, -102, 0, 2)
                Instance.new("TextBox").Size = UDim2.new(0, 100, 1, -4)
                Instance.new("TextBox").Font = vc.Settings.Font
                Instance.new("TextBox").Text = ""
                Instance.new("TextBox").TextColor3 = vc.Settings.TextColor
                Instance.new("TextBox").TextSize = vc.Settings.TextSize
                Instance.new("TextBox").TextWrapped = true
                Instance.new("TextBox").FocusLost:Connect(function()
                  pcall(va.Function, vb.Text)
                end)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("TextBox"), UDim.new(0, 5)
                return {
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = c,
                  Box = Instance.new("TextBox"),
                  Holder = Instance.new("Frame")
                }
              end,
              AddLabel = function(a, b)
                a = a
                Instance.new("Frame").Name = "Label_Holder"
                Instance.new("Frame").BackgroundColor3 = va.Settings.ItemHolderColor
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 18)
                Instance.new("Frame").Parent = vb
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(0, 5, 0,5, -7)
                Instance.new("TextLabel").Size = UDim2.new(1, -10, 0, 14)
                Instance.new("TextLabel").Font = va.Settings.Font
                Instance.new("TextLabel").Text = b
                Instance.new("TextLabel").TextColor3 = va.Settings.TextColor
                Instance.new("TextLabel").TextSize = va.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                return {
                  Label = Instance.new("TextLabel"),
                  Holder = Instance.new("Frame")
                }
              end,
              AddDualLabel = function(a, b)
                a = a
                Instance.new("Frame").Name = "DualLabel_Holder"
                Instance.new("Frame").BackgroundColor3 = va.Settings.ItemHolderColor
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 18)
                Instance.new("Frame").Parent = vb
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label1"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(0, 5, 0,5, -7)
                Instance.new("TextLabel").Size = UDim2.new(0,5, -5, 0, 14)
                Instance.new("TextLabel").Font = va.Settings.Font
                Instance.new("TextLabel").Text = b[1]
                Instance.new("TextLabel").TextColor3 = va.Settings.TextColor
                Instance.new("TextLabel").TextSize = va.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                Instance.new("TextLabel").TextXAlignment = Enum.TextXAlignment.Left
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label2"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(0,5, 0, 0,5, -7)
                Instance.new("TextLabel").Size = UDim2.new(0,5, -5, 0, 14)
                Instance.new("TextLabel").Font = va.Settings.Font
                Instance.new("TextLabel").Text = b[2]
                Instance.new("TextLabel").TextColor3 = va.Settings.TextColor
                Instance.new("TextLabel").TextSize = va.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                Instance.new("TextLabel").TextXAlignment = Enum.TextXAlignment.Right
                return {
                  Label2 = Instance.new("TextLabel"),
                  Label1 = Instance.new("TextLabel"),
                  Holder = Instance.new("Frame")
                }
              end,
              AddSlider = function(a, b, c, d, e, g, h)
                a = a
                Instance.new("Frame").Name = "Slider_Holder"
                Instance.new("Frame").BackgroundColor3 = vb.Settings.ItemHolderColor
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 30)
                Instance.new("Frame").Parent = vc
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "Slider_Background"
                Instance.new("Frame").BackgroundColor3 = vb.Settings.DefaultItemColor
                Instance.new("Frame").ClipsDescendants = true
                Instance.new("Frame").Position = UDim2.new(0, 5, 0, 18)
                Instance.new("Frame").Size = UDim2.new(1, -10, 1, -20)
                Instance.new("Frame").InputBegan:Connect(function(a, b)
                  a = a
                  repeat
                    if not b and a.UserInputType == Enum.UserInputType.MouseButton1 then
                      wait()
                      vc:Set(math.floor((vd + math.clamp((va.X - vb.AbsolutePosition.X) / vb.AbsoluteSize.X, 0, 1) * (ve - vd)) * 10) / 10)
                    end
                  until not vg:IsMouseButtonPressed(Enum.UserInputType.MouseButton1)
                end)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "Slider"
                Instance.new("Frame").BackgroundColor3 = vg.ThemeColor
                Instance.new("Frame").Size = UDim2.new(0,75, 0, 1, 0)
                vb.ColourObjects[Instance.new("Frame")] = "BackgroundColor3"
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(0, 5, 0, 2)
                Instance.new("TextLabel").Size = UDim2.new(1, -10, 0, 14)
                Instance.new("TextLabel").Font = vb.Settings.Font
                Instance.new("TextLabel").Text = ""
                Instance.new("TextLabel").TextColor3 = vb.Settings.TextColor
                Instance.new("TextLabel").TextSize = vb.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                {
                  Set = function(a, b)
                    a = a
                    b = va or vb
                    b = vb or vb
                    vd.Text = ve .. " - " .. tostring(vg.Value)
                    vh:Create(vj, TweenInfo.new(0,2, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                      Size = UDim2.new(1 - (va - b) / (va - vb), 0, 1, 0)
                    }):Play()
                    vg.Value = b
                    pcall(vg.Function, b)
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = h,
                  Value = e,
                  Holder = Instance.new("Frame")
                }:Set(e)
                return {
                  Set = function(a, b)
                    a = a
                    b = va or vb
                    b = vb or vb
                    vd.Text = ve .. " - " .. tostring(vg.Value)
                    vh:Create(vj, TweenInfo.new(0,2, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                      Size = UDim2.new(1 - (va - b) / (va - vb), 0, 1, 0)
                    }):Play()
                    vg.Value = b
                    pcall(vg.Function, b)
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = h,
                  Value = e,
                  Holder = Instance.new("Frame")
                }
              end,
              AddToggleSlider = function(a, b, c, d, e, g, h, j)
                a = a
                Instance.new("Frame").Name = "ToggleSlider_Holder"
                Instance.new("Frame").BackgroundColor3 = vc.Settings.ItemHolderColor
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 30)
                Instance.new("Frame").Parent = vd
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "Slider_Background"
                Instance.new("Frame").BackgroundColor3 = vc.Settings.DefaultItemColor
                Instance.new("Frame").ClipsDescendants = true
                Instance.new("Frame").Position = UDim2.new(0, 30, 0, 18)
                Instance.new("Frame").Size = UDim2.new(1, -35, 1, -20)
                Instance.new("Frame").InputBegan:Connect(function(a, b)
                  a = a
                  repeat
                    if not b and a.UserInputType == Enum.UserInputType.MouseButton1 then
                      wait()
                      vc:Set(math.floor((vd + math.clamp((va.X - vb.AbsolutePosition.X) / vb.AbsoluteSize.X, 0, 1) * (ve - vd)) * 10) / 10)
                    end
                  until not vg:IsMouseButtonPressed(Enum.UserInputType.MouseButton1)
                end)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "Slider"
                Instance.new("Frame").BackgroundColor3 = vb.ThemeColor
                Instance.new("Frame").Size = UDim2.new(0,75, 0, 1, 0)
                vc.ColourObjects[Instance.new("Frame")] = "BackgroundColor3"
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(0, 30, 0, 2)
                Instance.new("TextLabel").Size = UDim2.new(1, -35, 0, 14)
                Instance.new("TextLabel").Font = vc.Settings.Font
                Instance.new("TextLabel").Text = ""
                Instance.new("TextLabel").TextColor3 = vc.Settings.TextColor
                Instance.new("TextLabel").TextSize = vc.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                Instance.new("TextButton").Parent, Instance.new("TextButton").Name = Instance.new("Frame"), "ToggleSlider_Indicator"
                Instance.new("TextButton").BackgroundColor3 = vc.Settings.DefaultItemColor
                Instance.new("TextButton").Position = UDim2.new(0, 2, 0, 2)
                Instance.new("TextButton").Size = UDim2.new(0, 26, 0, 26)
                Instance.new("TextButton").AutoButtonColor = false
                Instance.new("TextButton").Font = vc.Settings.Font
                Instance.new("TextButton").Text = ""
                Instance.new("TextButton").MouseButton1Down:Connect(function()
                  va.Size = UDim2.new(0, 24, 0, 24)
                  va.Position = UDim2.new(0, 3, 0, 3)
                end)
                Instance.new("TextButton").MouseButton1Up:Connect(function()
                  va.Toggled = not va.Toggled
                  va:Toggle(va.Toggled)
                  vb.Size = UDim2.new(0, 26, 0, 26)
                  vb.Position = UDim2.new(0, 2, 0, 2)
                end)
                Instance.new("Frame").MouseLeave:Connect(function()
                  va.Size = UDim2.new(0, 26, 0, 26)
                  va.Position = UDim2.new(0, 2, 0, 2)
                end)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("TextButton"), UDim.new(0, 5)
                {
                  Set = function(a, b)
                    a = a
                    b = va or vb
                    b = vb or vb
                    if b == ve then
                      vg.Text = vh .. " - " .. tostring(vd.Value)
                      vj:Create(vk, TweenInfo.new(0,2, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                        Size = UDim2.new(1 - (va - b) / (va - vb), 0, 1, 0)
                      }):Play()
                      vd.Value = b
                      pcall(vd.Function, b)
                    end
                  end,
                  Toggle = function(a, b)
                    a = a
                    if b then
                    end
                    CreateCircularRipple(va, vb.ThemeColor or vc.Settings.DefaultItemColor, b)
                    if b then
                      vc.ColourObjects[va] = "BackgroundColor3"
                    elseif vc.ColourObjects[va] then
                      vc.ColourObjects[va] = nil
                    end
                    vd.Toggled = b
                    vd:Set(vd.Value)
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = j,
                  Toggled = h,
                  Value = e,
                  Holder = Instance.new("Frame")
                }:Set(e)
                return {
                  Set = function(a, b)
                    a = a
                    b = va or vb
                    b = vb or vb
                    if b == ve then
                      vg.Text = vh .. " - " .. tostring(vd.Value)
                      vj:Create(vk, TweenInfo.new(0,2, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                        Size = UDim2.new(1 - (va - b) / (va - vb), 0, 1, 0)
                      }):Play()
                      vd.Value = b
                      pcall(vd.Function, b)
                    end
                  end,
                  Toggle = function(a, b)
                    a = a
                    if b then
                    end
                    CreateCircularRipple(va, vb.ThemeColor or vc.Settings.DefaultItemColor, b)
                    if b then
                      vc.ColourObjects[va] = "BackgroundColor3"
                    elseif vc.ColourObjects[va] then
                      vc.ColourObjects[va] = nil
                    end
                    vd.Toggled = b
                    vd:Set(vd.Value)
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = j,
                  Toggled = h,
                  Value = e,
                  Holder = Instance.new("Frame")
                }
              end,
              AddDropdown = function(a, b, c, d)
                a = a
                Instance.new("Frame").Name = "Dropdown_Holder"
                Instance.new("Frame").BackgroundColor3 = vd.Settings.ItemHolderColor
                Instance.new("Frame").ClipsDescendants = true
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 30)
                Instance.new("Frame").Parent = ve
                Instance.new("Frame").InputBegan:Connect(function(a, b)
                  a = a
                  if not b and a.UserInputType == Enum.UserInputType.MouseButton1 and not va then
                    vb = not vb
                    vc:Toggle(vb)
                  end
                end)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "Labels_Holder"
                Instance.new("Frame").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("Frame").BackgroundTransparency = 1
                Instance.new("Frame").Position = UDim2.new(0, 2, 0, 0)
                Instance.new("Frame").Size = UDim2.new(1, -30, 0, 30)
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").BorderColor3 = Color3.fromRGB(27, 42, 53)
                Instance.new("TextLabel").Position = UDim2.new(0, 5, 0,5, -7)
                Instance.new("TextLabel").Size = UDim2.new(0,5, -2, 0, 14)
                Instance.new("TextLabel").Font = vd.Settings.Font
                Instance.new("TextLabel").Text = b
                Instance.new("TextLabel").TextColor3 = vd.Settings.TextColor
                Instance.new("TextLabel").TextSize = vd.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                Instance.new("TextLabel").TextXAlignment = Enum.TextXAlignment.Left
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Selected_Display"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").BorderColor3 = Color3.fromRGB(27, 42, 53)
                Instance.new("TextLabel").Position = UDim2.new(0,5, 3, 0, 8)
                Instance.new("TextLabel").Size = UDim2.new(0,5, -5, 0, 14)
                Instance.new("TextLabel").Font = vd.Settings.Font
                Instance.new("TextLabel").Text = ""
                Instance.new("TextLabel").TextColor3 = vd.Settings.TextColor
                Instance.new("TextLabel").TextSize = vd.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                Instance.new("TextLabel").TextXAlignment = Enum.TextXAlignment.Right
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Dropdown_Indicator"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(1, -28, 0, 2)
                Instance.new("TextLabel").Rotation = -90
                Instance.new("TextLabel").Size = UDim2.new(0, 26, 0, 26)
                Instance.new("TextLabel").Font = vd.Settings.DropdownIndicatorFont
                Instance.new("TextLabel").Text = "<"
                Instance.new("TextLabel").TextColor3 = vd.Settings.TextColor
                Instance.new("TextLabel").TextSize = vd.Settings.DropdownIndicatorTextSize
                Instance.new("ScrollingFrame").Parent, Instance.new("ScrollingFrame").Name = Instance.new("Frame"), "Dropdown_List"
                Instance.new("ScrollingFrame").Active = true
                Instance.new("ScrollingFrame").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("ScrollingFrame").BackgroundTransparency = 1
                Instance.new("ScrollingFrame").BorderSizePixel = 0
                Instance.new("ScrollingFrame").Position = UDim2.new(0, 0, 0, 30)
                Instance.new("ScrollingFrame").Size = UDim2.new(1, 0, 1, -30)
                Instance.new("ScrollingFrame").CanvasSize = UDim2.new(0, 0, 0, 2)
                Instance.new("ScrollingFrame").ScrollBarImageColor3 = Color3.fromRGB(0, 0, 0)
                Instance.new("ScrollingFrame").ScrollBarThickness = 5
                Instance.new("ScrollingFrame").ChildAdded:Connect(function(a)
                  a = a
                  if not a.ClassName:find("UI") then
                    va(UDim2.new(0, 0, 0, a.AbsoluteSize.Y + 2))
                  end
                end)
                Instance.new("ScrollingFrame").ChildRemoved:Connect(function(a)
                  a = a
                  if not a.ClassName:find("UI") then
                    va(UDim2.new(0, 0, 0, -a.AbsoluteSize.Y - 2))
                  end
                end)
                Instance.new("UIPadding").Parent = Instance.new("ScrollingFrame")
                Instance.new("UIPadding").PaddingBottom = UDim.new(0, 2)
                Instance.new("UIPadding").PaddingLeft = UDim.new(0, 2)
                Instance.new("UIPadding").PaddingRight = UDim.new(0, 2)
                Instance.new("UIListLayout").Parent, Instance.new("UIPadding").PaddingTop = Instance.new("ScrollingFrame"), UDim.new(0, 2)
                Instance.new("UIListLayout").SortOrder = Enum.SortOrder.LayoutOrder
                Instance.new("UIListLayout").Padding = UDim.new(0, 2)
                for fQ, fW in next, c, nil do
                  {
                    Toggle = function(a, b)
                      a = a
                      if not va then
                        va = true
                        if b then
                        end
                        if b then
                        end
                        vc:Create(vd, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                          Rotation = 0 or -90
                        }):Play()
                        vc:Create(ve, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                          Size = ve.Size + UDim2.new(0, 0, 0, 2 + (vb.MaxVisibleItems or #vb.Items) * 22 or -(2 + (vb.MaxVisibleItems or #vb.Items) * 22))
                        }):Play()
                        vc:Create(vg, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                          Size = vg.Size + UDim2.new(0, 0, 0, 2 + (vb.MaxVisibleItems or #vb.Items) * 22 or -(2 + (vb.MaxVisibleItems or #vb.Items) * 22))
                        }):Play()
                        vc:Create(vh, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                          CanvasSize = vh.CanvasSize + UDim2.new(0, 0, 0, 2 + (vb.MaxVisibleItems or #vb.Items) * 22 or -(2 + (vb.MaxVisibleItems or #vb.Items) * 22))
                        }):Play()
                        wait(0,5)
                        va = false
                        vj()
                        vk()
                      end
                    end,
                    AddItem = function(a, b)
                      a = a
                      if va then
                        table.insert(vb.Add, {
                          Name = b,
                          Holder = Instance.new("TextButton")
                        })
                        return
                      end
                      Instance.new("TextButton").Name = "Dropdown_Item"
                      Instance.new("TextButton").BackgroundColor3 = Color3.fromRGB(25, 25, 25)
                      Instance.new("TextButton").Size = UDim2.new(1, 0, 0, 20)
                      Instance.new("TextButton").Font = vc.Settings.Font
                      Instance.new("TextButton").Text = b
                      Instance.new("TextButton").TextColor3 = vc.Settings.TextColor
                      Instance.new("TextButton").TextSize = vc.Settings.TextSize
                      Instance.new("TextButton").TextWrapped = true
                      Instance.new("TextButton").Parent = vd
                      Instance.new("TextButton").MouseButton1Click:Connect(function()
                        va.Text = vb
                        vc.Selected = vb
                        pcall(vc.Function, vb)
                      end)
                      Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("TextButton"), UDim.new(0, 5)
                      table.insert(vg.Items, {
                        Name = b,
                        Holder = Instance.new("TextButton")
                      })
                    end,
                    RemoveItem = function(a, b)
                      a = a
                      if va then
                        for fg, fh in next, vb.Items, nil do
                          if fh.Name == b then
                            table.insert(vc.Remove, fh)
                          else
                          end
                        end
                        return
                      end
                      for fg, fh in next, vb.Items, nil do
                        if fh.Name == b then
                          table.remove(vb.Items, fg)
                          fh.Holder:Destroy()
                        else
                        end
                      end
                    end,
                    AddToolTip = function(a, b)
                      a = a
                      AddToolTip(va, vb, b)
                    end,
                    Function = d,
                    MaxVisibleItems = 10,
                    Selected = nil,
                    Items = {},
                    Holder = Instance.new("Frame")
                  }:AddItem(fW)
                end
                return {
                  Toggle = function(a, b)
                    a = a
                    if not va then
                      va = true
                      if b then
                      end
                      if b then
                      end
                      vc:Create(vd, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                        Rotation = 0 or -90
                      }):Play()
                      vc:Create(ve, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                        Size = ve.Size + UDim2.new(0, 0, 0, 2 + (vb.MaxVisibleItems or #vb.Items) * 22 or -(2 + (vb.MaxVisibleItems or #vb.Items) * 22))
                      }):Play()
                      vc:Create(vg, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                        Size = vg.Size + UDim2.new(0, 0, 0, 2 + (vb.MaxVisibleItems or #vb.Items) * 22 or -(2 + (vb.MaxVisibleItems or #vb.Items) * 22))
                      }):Play()
                      vc:Create(vh, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                        CanvasSize = vh.CanvasSize + UDim2.new(0, 0, 0, 2 + (vb.MaxVisibleItems or #vb.Items) * 22 or -(2 + (vb.MaxVisibleItems or #vb.Items) * 22))
                      }):Play()
                      wait(0,5)
                      va = false
                      vj()
                      vk()
                    end
                  end,
                  AddItem = function(a, b)
                    a = a
                    if va then
                      table.insert(vb.Add, {
                        Name = b,
                        Holder = Instance.new("TextButton")
                      })
                      return
                    end
                    Instance.new("TextButton").Name = "Dropdown_Item"
                    Instance.new("TextButton").BackgroundColor3 = Color3.fromRGB(25, 25, 25)
                    Instance.new("TextButton").Size = UDim2.new(1, 0, 0, 20)
                    Instance.new("TextButton").Font = vc.Settings.Font
                    Instance.new("TextButton").Text = b
                    Instance.new("TextButton").TextColor3 = vc.Settings.TextColor
                    Instance.new("TextButton").TextSize = vc.Settings.TextSize
                    Instance.new("TextButton").TextWrapped = true
                    Instance.new("TextButton").Parent = vd
                    Instance.new("TextButton").MouseButton1Click:Connect(function()
                      va.Text = vb
                      vc.Selected = vb
                      pcall(vc.Function, vb)
                    end)
                    Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("TextButton"), UDim.new(0, 5)
                    table.insert(vg.Items, {
                      Name = b,
                      Holder = Instance.new("TextButton")
                    })
                  end,
                  RemoveItem = function(a, b)
                    a = a
                    if va then
                      for fg, fh in next, vb.Items, nil do
                        if fh.Name == b then
                          table.insert(vc.Remove, fh)
                        else
                        end
                      end
                      return
                    end
                    for fg, fh in next, vb.Items, nil do
                      if fh.Name == b then
                        table.remove(vb.Items, fg)
                        fh.Holder:Destroy()
                      else
                      end
                    end
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = d,
                  MaxVisibleItems = 10,
                  Selected = nil,
                  Items = {},
                  Holder = Instance.new("Frame")
                }
              end,
              AddBind = function(a, b, c, d)
                a = a
                Instance.new("Frame").Name = "Bind_Holder"
                Instance.new("Frame").BackgroundColor3 = va.Settings.ItemHolderColor
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 30)
                Instance.new("Frame").Parent = vb
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(0, 5, 0,5, -7)
                Instance.new("TextLabel").Size = UDim2.new(1, -112, 0, 14)
                Instance.new("TextLabel").Font = va.Settings.Font
                Instance.new("TextLabel").Text = b
                Instance.new("TextLabel").TextColor3 = va.Settings.TextColor
                Instance.new("TextLabel").TextSize = va.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                Instance.new("TextLabel").TextXAlignment = Enum.TextXAlignment.Left
                Instance.new("TextBox").Parent, Instance.new("TextBox").Name = Instance.new("Frame"), "Box"
                Instance.new("TextBox").BackgroundColor3 = Color3.fromRGB(25, 25, 25)
                Instance.new("TextBox").Position = UDim2.new(1, -62, 0, 2)
                Instance.new("TextBox").Size = UDim2.new(0, 60, 1, -4)
                Instance.new("TextBox").ClearTextOnFocus = false
                Instance.new("TextBox").Font = va.Settings.Font
                Instance.new("TextBox").Text = ""
                Instance.new("TextBox").TextColor3 = va.Settings.TextColor
                Instance.new("TextBox").TextEditable = false
                Instance.new("TextBox").TextSize = va.Settings.TextSize
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("TextBox"), UDim.new(0, 5)
                vc.InputBegan:Connect(function(a, b)
                  a = a
                  if not b and a.KeyCode == va.Bind then
                    pcall(va.Function)
                  end
                end)
                {
                  Set = function(a, b)
                    a = a
                    va.Bind = b
                    vb.Text = b.Name
                    vb.Size = UDim2.new(0, vb.TextBounds.X + 10, 1, -4)
                    vb.Position = UDim2.new(1, -vb.AbsoluteSize.X - 2, 0, 2)
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = d,
                  Bind = c,
                  Holder = Instance.new("Frame")
                }:Set(c)
                return {
                  Set = function(a, b)
                    a = a
                    va.Bind = b
                    vb.Text = b.Name
                    vb.Size = UDim2.new(0, vb.TextBounds.X + 10, 1, -4)
                    vb.Position = UDim2.new(1, -vb.AbsoluteSize.X - 2, 0, 2)
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = d,
                  Bind = c,
                  Holder = Instance.new("Frame")
                }
              end,
              AddToggleBind = function(a, b, c, d, e)
                a = a
                vc.BindToggles[b] = d
                Instance.new("Frame").Name = "ToggleBind_Holder"
                Instance.new("Frame").BackgroundColor3 = vb.Settings.ItemHolderColor
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 30)
                Instance.new("Frame").Parent = vd
                Instance.new("Frame").InputBegan:Connect(function(a, b)
                  a = a
                  if not b and a.UserInputType == Enum.UserInputType.MouseButton1 then
                    va.Size = UDim2.new(0, 24, 0, 24)
                    va.Position = UDim2.new(1, -vb.AbsoluteSize.X - 29, 0, 3)
                  end
                end)
                Instance.new("Frame").InputEnded:Connect(function(a, b)
                  a = a
                  if not b and a.UserInputType == Enum.UserInputType.MouseButton1 then
                    va.BindToggles[vb] = not va.BindToggles[vb]
                    vc:Toggle(va.BindToggles[vb])
                    vd.Size = UDim2.new(0, 26, 0, 26)
                    vd.Position = UDim2.new(1, -ve.AbsoluteSize.X - 30, 0, 2)
                  end
                end)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(0, 5, 0,5, -7)
                Instance.new("TextLabel").Size = UDim2.new(1, -112, 0, 14)
                Instance.new("TextLabel").Font = vb.Settings.Font
                Instance.new("TextLabel").Text = b
                Instance.new("TextLabel").TextColor3 = vb.Settings.TextColor
                Instance.new("TextLabel").TextSize = vb.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                Instance.new("TextLabel").TextXAlignment = Enum.TextXAlignment.Left
                Instance.new("TextBox").Parent, Instance.new("TextBox").Name = Instance.new("Frame"), "Box"
                Instance.new("TextBox").BackgroundColor3 = vb.Settings.DefaultItemColor
                Instance.new("TextBox").Position = UDim2.new(1, -62, 0, 2)
                Instance.new("TextBox").Size = UDim2.new(0, 60, 1, -4)
                Instance.new("TextBox").ClearTextOnFocus = false
                Instance.new("TextBox").Font = vb.Settings.Font
                Instance.new("TextBox").Text = ""
                Instance.new("TextBox").TextColor3 = vb.Settings.TextColor
                Instance.new("TextBox").TextEditable = false
                Instance.new("TextBox").TextSize = vb.Settings.TextSize
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("TextBox"), UDim.new(0, 5)
                Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "ToggleBind_Indicator"
                Instance.new("Frame").BackgroundColor3 = vb.Settings.DefaultItemColor
                Instance.new("Frame").Position = UDim2.new(1, -90, 0, 2)
                Instance.new("Frame").Size = UDim2.new(0, 26, 0, 26)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                ve.InputBegan:Connect(function(a, b)
                  a = a
                  if not b and a.KeyCode == va.Bind and va.Toggled then
                    pcall(va.Function)
                  end
                end)
                {
                  Set = function(a, b)
                    a = a
                    va.Bind = b
                    vb.Text = b.Name
                    vb.Size = UDim2.new(0, vb.TextBounds.X + 10, 1, -4)
                    vb.Position = UDim2.new(1, -vb.AbsoluteSize.X - 2, 0, 2)
                    vc.Position = UDim2.new(1, -vb.AbsoluteSize.X - 30, 0, 2)
                  end,
                  Toggle = function(a, b)
                    a = a
                    if b then
                    end
                    CreateCircularRipple(va, vb.ThemeColor or vc.Settings.DefaultItemColor, b)
                    if b then
                      vc.ColourObjects[va] = "BackgroundColor3"
                    elseif vc.ColourObjects[va] then
                      vc.ColourObjects[va] = nil
                    end
                    vd.Toggled = b
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = e,
                  Toggled = d,
                  Bind = c,
                  Holder = Instance.new("Frame")
                }:Set(c)
                {
                  Set = function(a, b)
                    a = a
                    va.Bind = b
                    vb.Text = b.Name
                    vb.Size = UDim2.new(0, vb.TextBounds.X + 10, 1, -4)
                    vb.Position = UDim2.new(1, -vb.AbsoluteSize.X - 2, 0, 2)
                    vc.Position = UDim2.new(1, -vb.AbsoluteSize.X - 30, 0, 2)
                  end,
                  Toggle = function(a, b)
                    a = a
                    if b then
                    end
                    CreateCircularRipple(va, vb.ThemeColor or vc.Settings.DefaultItemColor, b)
                    if b then
                      vc.ColourObjects[va] = "BackgroundColor3"
                    elseif vc.ColourObjects[va] then
                      vc.ColourObjects[va] = nil
                    end
                    vd.Toggled = b
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = e,
                  Toggled = d,
                  Bind = c,
                  Holder = Instance.new("Frame")
                }:Toggle(d)
                return {
                  Set = function(a, b)
                    a = a
                    va.Bind = b
                    vb.Text = b.Name
                    vb.Size = UDim2.new(0, vb.TextBounds.X + 10, 1, -4)
                    vb.Position = UDim2.new(1, -vb.AbsoluteSize.X - 2, 0, 2)
                    vc.Position = UDim2.new(1, -vb.AbsoluteSize.X - 30, 0, 2)
                  end,
                  Toggle = function(a, b)
                    a = a
                    if b then
                    end
                    CreateCircularRipple(va, vb.ThemeColor or vc.Settings.DefaultItemColor, b)
                    if b then
                      vc.ColourObjects[va] = "BackgroundColor3"
                    elseif vc.ColourObjects[va] then
                      vc.ColourObjects[va] = nil
                    end
                    vd.Toggled = b
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = e,
                  Toggled = d,
                  Bind = c,
                  Holder = Instance.new("Frame")
                }
              end
            }
          end
        })
        return {
          Toggles = {},
          BindToggles = {},
          SliderToggles = {},
          Show = function(a)
            a = a
            for fe, fg in next, va.Tabs, nil do
              fg.Tab.Visible = fg.Tab == vb
              vc:Create(fg.Indicator, TweenInfo.new(0,2), {
                BackgroundColor3 = vd.Settings.TabButtonIndicatorColors["Enabled" or "Disabled"]
              }):Play()
            end
          end,
          Hide = function(a)
            a = a
            va.Visible = false
          end,
          IsShown = function(a)
            a = a
            return va.Visible
          end,
          Indicator = Instance.new("Frame"),
          Tab = Instance.new("ScrollingFrame"),
          Holder = vd,
          AddCategory = function(a, b)
            a = a
            Instance.new("Frame").Name = "Category_Frame"
            Instance.new("Frame").BackgroundColor3 = vb.Settings.CategoryColor
            Instance.new("Frame").Position = UDim2.new(0, 5, 0, 5)
            Instance.new("Frame").Size = UDim2.new(1, 0, 0, 35)
            Instance.new("Frame").Parent = va
            Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
            Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Category_Title"
            Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            Instance.new("TextLabel").BackgroundTransparency = 1
            Instance.new("TextLabel").Position = UDim2.new(0, 2, 0, 8)
            Instance.new("TextLabel").Size = UDim2.new(1, -4, 0, 14)
            Instance.new("TextLabel").Font = vb.Settings.CategoryFont
            Instance.new("TextLabel").Text = b
            Instance.new("TextLabel").TextColor3 = vb.Settings.TextColor
            Instance.new("TextLabel").TextSize = vb.Settings.TextSize
            Instance.new("TextLabel").TextWrapped = true
            Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "Category_List"
            Instance.new("Frame").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            Instance.new("Frame").BackgroundTransparency = 1
            Instance.new("Frame").Position = UDim2.new(0, 0, 0, 30)
            Instance.new("Frame").Size = UDim2.new(1, 0, 1, -30)
            Instance.new("Frame").ChildAdded:Connect(function(a)
              a = a
              if not a.ClassName:find("UI") then
                va.Size = va.Size + UDim2.new(0, 0, 0, a.AbsoluteSize.Y + 5)
                vb.CanvasSize = vb.CanvasSize + UDim2.new(0, 0, 0, a.AbsoluteSize.Y + 5)
              end
            end)
            Instance.new("UIListLayout").Parent = Instance.new("Frame")
            Instance.new("UIListLayout").SortOrder = Enum.SortOrder.LayoutOrder
            Instance.new("UIPadding").Parent, Instance.new("UIListLayout").Padding = Instance.new("Frame"), UDim.new(0, 5)
            Instance.new("UIPadding").PaddingBottom = UDim.new(0, 5)
            Instance.new("UIPadding").PaddingLeft = UDim.new(0, 5)
            Instance.new("UIPadding").PaddingRight = UDim.new(0, 5)
            Instance.new("UIPadding").PaddingTop = UDim.new(0, 5)
            return {
              Frame = Instance.new("Frame"),
              Holder = va,
              AddButton = function(a, b, c)
                a = a
                Instance.new("Frame").Name = "Button_Holder"
                Instance.new("Frame").BackgroundColor3 = va.Settings.ItemHolderColor
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 30)
                Instance.new("Frame").Parent = vb
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("TextButton").Parent, Instance.new("TextButton").Name = Instance.new("Frame"), "Button"
                Instance.new("TextButton").AutoButtonColor = false
                Instance.new("TextButton").BackgroundColor3 = va.Settings.DefaultItemColor
                Instance.new("TextButton").Position = UDim2.new(0, 2, 0, 2)
                Instance.new("TextButton").Size = UDim2.new(1, -4, 1, -4)
                Instance.new("TextButton").Font = va.Settings.Font
                Instance.new("TextButton").Text = b
                Instance.new("TextButton").TextColor3 = va.Settings.TextColor
                Instance.new("TextButton").TextSize = va.Settings.TextSize
                Instance.new("TextButton").TextWrapped = true
                Instance.new("TextButton").MouseButton1Down:Connect(function()
                  va.TextSize = vb.Settings.TextSize - 1
                end)
                Instance.new("TextButton").MouseLeave:Connect(function()
                  va.TextSize = vb.Settings.TextSize
                end)
                Instance.new("TextButton").MouseButton1Up:Connect(function()
                  pcall(va.Function)
                  vb.TextSize = vc.Settings.TextSize
                  CreateWaveRipple(vb, 0,8, Color3.fromRGB(255, 255, 255))
                end)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("TextButton"), UDim.new(0, 5)
                return {
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = c,
                  Button = Instance.new("TextButton"),
                  Holder = Instance.new("Frame")
                }
              end,
              AddToggle = function(a, b, c, d)
                a = a
                vc.Toggles[b] = c
                Instance.new("Frame").Name = b
                Instance.new("Frame").BackgroundColor3 = Color3.fromRGB(20, 20, 20)
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 30)
                Instance.new("Frame").Parent = vd
                Instance.new("Frame").InputBegan:Connect(function(a, b)
                  a = a
                  if not b and a.UserInputType == Enum.UserInputType.MouseButton1 then
                    va.Size = UDim2.new(0, 24, 0, 24)
                    va.Position = UDim2.new(1, -27, 0, 3)
                  end
                end)
                Instance.new("Frame").InputEnded:Connect(function(a, b)
                  a = a
                  if not b and a.UserInputType == Enum.UserInputType.MouseButton1 then
                    va.Toggles[vb] = not va.Toggles[vb]
                    vc:Set(va.Toggles[vb])
                    vd.Size = UDim2.new(0, 26, 0, 26)
                    vd.Position = UDim2.new(1, -28, 0, 2)
                  end
                end)
                Instance.new("Frame").MouseLeave:Connect(function()
                  va.Size = UDim2.new(0, 26, 0, 26)
                  va.Position = UDim2.new(1, -28, 0, 2)
                end)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(0, 5, 0,5, -7)
                Instance.new("TextLabel").Size = UDim2.new(1, -38, 0, 14)
                Instance.new("TextLabel").Font = Enum.Font.SourceSans
                Instance.new("TextLabel").Text = b
                Instance.new("TextLabel").TextColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").TextSize = 14
                Instance.new("TextLabel").TextWrapped = true
                Instance.new("TextLabel").TextXAlignment = Enum.TextXAlignment.Left
                Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "Toggle_Indicator"
                Instance.new("Frame").BackgroundColor3 = vb.Settings.DefaultItemColor
                Instance.new("Frame").Position = UDim2.new(1, -28, 0, 2)
                Instance.new("Frame").Size = UDim2.new(0, 26, 0, 26)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                {
                  Set = function(a, b)
                    a = a
                    if b then
                    end
                    CreateCircularRipple(va, vb.ThemeColor or vc.Settings.DefaultItemColor, b)
                    if b then
                      vc.ColourObjects[va] = "BackgroundColor3"
                    elseif vc.ColourObjects[va] then
                      vc.ColourObjects[va] = nil
                    end
                    vd.Toggled = b
                    pcall(vd.Function, b)
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = d,
                  Toggled = c,
                  Holder = Instance.new("Frame")
                }:Set(c)
                return {
                  Set = function(a, b)
                    a = a
                    if b then
                    end
                    CreateCircularRipple(va, vb.ThemeColor or vc.Settings.DefaultItemColor, b)
                    if b then
                      vc.ColourObjects[va] = "BackgroundColor3"
                    elseif vc.ColourObjects[va] then
                      vc.ColourObjects[va] = nil
                    end
                    vd.Toggled = b
                    pcall(vd.Function, b)
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = d,
                  Toggled = c,
                  Holder = Instance.new("Frame")
                }
              end,
              AddBox = function(a, b, c)
                a = a
                Instance.new("Frame").Name = "Box_Holder"
                Instance.new("Frame").BackgroundColor3 = Color3.fromRGB(20, 20, 20)
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 30)
                Instance.new("Frame").Parent = va
                Instance.new("Frame").MouseEnter:Connect(function()
                  ve:Create(vg, TweenInfo.new(0,2), {
                    Size = UDim2.new(1, -(vc or vd), 1, -4),
                    Position = UDim2.new(0, vc or vd, 0, 2)
                  }):Play()
                end)
                Instance.new("Frame").MouseLeave:Connect(function()
                  if va:IsFocused() then
                    va.FocusLost:Wait()
                  end
                  vb:Create(va, TweenInfo.new(0,2), {
                    Size = UDim2.new(0, vc, 1, -4),
                    Position = UDim2.new(1, -vc - 2, 0, 2)
                  }):Play()
                end)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(0, 5, 0,5, -7)
                Instance.new("TextLabel").Size = UDim2.new(1, -112, 0, 14)
                Instance.new("TextLabel").Font = vc.Settings.Font
                Instance.new("TextLabel").Text = b
                Instance.new("TextLabel").TextColor3 = vc.Settings.TextColor
                Instance.new("TextLabel").TextSize = vc.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                Instance.new("TextLabel").TextXAlignment = Enum.TextXAlignment.Left
                Instance.new("TextLabel").Size = UDim2.new(0, Instance.new("TextLabel").TextBounds.X + 2, 0, 14)
                Instance.new("TextBox").Parent, Instance.new("TextBox").Name = Instance.new("Frame"), "Box"
                Instance.new("TextBox").BackgroundColor3 = vc.Settings.DefaultItemColor
                Instance.new("TextBox").Position = UDim2.new(1, -102, 0, 2)
                Instance.new("TextBox").Size = UDim2.new(0, 100, 1, -4)
                Instance.new("TextBox").Font = vc.Settings.Font
                Instance.new("TextBox").Text = ""
                Instance.new("TextBox").TextColor3 = vc.Settings.TextColor
                Instance.new("TextBox").TextSize = vc.Settings.TextSize
                Instance.new("TextBox").TextWrapped = true
                Instance.new("TextBox").FocusLost:Connect(function()
                  pcall(va.Function, vb.Text)
                end)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("TextBox"), UDim.new(0, 5)
                return {
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = c,
                  Box = Instance.new("TextBox"),
                  Holder = Instance.new("Frame")
                }
              end,
              AddLabel = function(a, b)
                a = a
                Instance.new("Frame").Name = "Label_Holder"
                Instance.new("Frame").BackgroundColor3 = va.Settings.ItemHolderColor
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 18)
                Instance.new("Frame").Parent = vb
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(0, 5, 0,5, -7)
                Instance.new("TextLabel").Size = UDim2.new(1, -10, 0, 14)
                Instance.new("TextLabel").Font = va.Settings.Font
                Instance.new("TextLabel").Text = b
                Instance.new("TextLabel").TextColor3 = va.Settings.TextColor
                Instance.new("TextLabel").TextSize = va.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                return {
                  Label = Instance.new("TextLabel"),
                  Holder = Instance.new("Frame")
                }
              end,
              AddDualLabel = function(a, b)
                a = a
                Instance.new("Frame").Name = "DualLabel_Holder"
                Instance.new("Frame").BackgroundColor3 = va.Settings.ItemHolderColor
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 18)
                Instance.new("Frame").Parent = vb
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label1"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(0, 5, 0,5, -7)
                Instance.new("TextLabel").Size = UDim2.new(0,5, -5, 0, 14)
                Instance.new("TextLabel").Font = va.Settings.Font
                Instance.new("TextLabel").Text = b[1]
                Instance.new("TextLabel").TextColor3 = va.Settings.TextColor
                Instance.new("TextLabel").TextSize = va.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                Instance.new("TextLabel").TextXAlignment = Enum.TextXAlignment.Left
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label2"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(0,5, 0, 0,5, -7)
                Instance.new("TextLabel").Size = UDim2.new(0,5, -5, 0, 14)
                Instance.new("TextLabel").Font = va.Settings.Font
                Instance.new("TextLabel").Text = b[2]
                Instance.new("TextLabel").TextColor3 = va.Settings.TextColor
                Instance.new("TextLabel").TextSize = va.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                Instance.new("TextLabel").TextXAlignment = Enum.TextXAlignment.Right
                return {
                  Label2 = Instance.new("TextLabel"),
                  Label1 = Instance.new("TextLabel"),
                  Holder = Instance.new("Frame")
                }
              end,
              AddSlider = function(a, b, c, d, e, g, h)
                a = a
                Instance.new("Frame").Name = "Slider_Holder"
                Instance.new("Frame").BackgroundColor3 = vb.Settings.ItemHolderColor
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 30)
                Instance.new("Frame").Parent = vc
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "Slider_Background"
                Instance.new("Frame").BackgroundColor3 = vb.Settings.DefaultItemColor
                Instance.new("Frame").ClipsDescendants = true
                Instance.new("Frame").Position = UDim2.new(0, 5, 0, 18)
                Instance.new("Frame").Size = UDim2.new(1, -10, 1, -20)
                Instance.new("Frame").InputBegan:Connect(function(a, b)
                  a = a
                  repeat
                    if not b and a.UserInputType == Enum.UserInputType.MouseButton1 then
                      wait()
                      vc:Set(math.floor((vd + math.clamp((va.X - vb.AbsolutePosition.X) / vb.AbsoluteSize.X, 0, 1) * (ve - vd)) * 10) / 10)
                    end
                  until not vg:IsMouseButtonPressed(Enum.UserInputType.MouseButton1)
                end)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "Slider"
                Instance.new("Frame").BackgroundColor3 = vg.ThemeColor
                Instance.new("Frame").Size = UDim2.new(0,75, 0, 1, 0)
                vb.ColourObjects[Instance.new("Frame")] = "BackgroundColor3"
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(0, 5, 0, 2)
                Instance.new("TextLabel").Size = UDim2.new(1, -10, 0, 14)
                Instance.new("TextLabel").Font = vb.Settings.Font
                Instance.new("TextLabel").Text = ""
                Instance.new("TextLabel").TextColor3 = vb.Settings.TextColor
                Instance.new("TextLabel").TextSize = vb.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                {
                  Set = function(a, b)
                    a = a
                    b = va or vb
                    b = vb or vb
                    vd.Text = ve .. " - " .. tostring(vg.Value)
                    vh:Create(vj, TweenInfo.new(0,2, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                      Size = UDim2.new(1 - (va - b) / (va - vb), 0, 1, 0)
                    }):Play()
                    vg.Value = b
                    pcall(vg.Function, b)
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = h,
                  Value = e,
                  Holder = Instance.new("Frame")
                }:Set(e)
                return {
                  Set = function(a, b)
                    a = a
                    b = va or vb
                    b = vb or vb
                    vd.Text = ve .. " - " .. tostring(vg.Value)
                    vh:Create(vj, TweenInfo.new(0,2, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                      Size = UDim2.new(1 - (va - b) / (va - vb), 0, 1, 0)
                    }):Play()
                    vg.Value = b
                    pcall(vg.Function, b)
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = h,
                  Value = e,
                  Holder = Instance.new("Frame")
                }
              end,
              AddToggleSlider = function(a, b, c, d, e, g, h, j)
                a = a
                Instance.new("Frame").Name = "ToggleSlider_Holder"
                Instance.new("Frame").BackgroundColor3 = vc.Settings.ItemHolderColor
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 30)
                Instance.new("Frame").Parent = vd
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "Slider_Background"
                Instance.new("Frame").BackgroundColor3 = vc.Settings.DefaultItemColor
                Instance.new("Frame").ClipsDescendants = true
                Instance.new("Frame").Position = UDim2.new(0, 30, 0, 18)
                Instance.new("Frame").Size = UDim2.new(1, -35, 1, -20)
                Instance.new("Frame").InputBegan:Connect(function(a, b)
                  a = a
                  repeat
                    if not b and a.UserInputType == Enum.UserInputType.MouseButton1 then
                      wait()
                      vc:Set(math.floor((vd + math.clamp((va.X - vb.AbsolutePosition.X) / vb.AbsoluteSize.X, 0, 1) * (ve - vd)) * 10) / 10)
                    end
                  until not vg:IsMouseButtonPressed(Enum.UserInputType.MouseButton1)
                end)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "Slider"
                Instance.new("Frame").BackgroundColor3 = vb.ThemeColor
                Instance.new("Frame").Size = UDim2.new(0,75, 0, 1, 0)
                vc.ColourObjects[Instance.new("Frame")] = "BackgroundColor3"
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(0, 30, 0, 2)
                Instance.new("TextLabel").Size = UDim2.new(1, -35, 0, 14)
                Instance.new("TextLabel").Font = vc.Settings.Font
                Instance.new("TextLabel").Text = ""
                Instance.new("TextLabel").TextColor3 = vc.Settings.TextColor
                Instance.new("TextLabel").TextSize = vc.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                Instance.new("TextButton").Parent, Instance.new("TextButton").Name = Instance.new("Frame"), "ToggleSlider_Indicator"
                Instance.new("TextButton").BackgroundColor3 = vc.Settings.DefaultItemColor
                Instance.new("TextButton").Position = UDim2.new(0, 2, 0, 2)
                Instance.new("TextButton").Size = UDim2.new(0, 26, 0, 26)
                Instance.new("TextButton").AutoButtonColor = false
                Instance.new("TextButton").Font = vc.Settings.Font
                Instance.new("TextButton").Text = ""
                Instance.new("TextButton").MouseButton1Down:Connect(function()
                  va.Size = UDim2.new(0, 24, 0, 24)
                  va.Position = UDim2.new(0, 3, 0, 3)
                end)
                Instance.new("TextButton").MouseButton1Up:Connect(function()
                  va.Toggled = not va.Toggled
                  va:Toggle(va.Toggled)
                  vb.Size = UDim2.new(0, 26, 0, 26)
                  vb.Position = UDim2.new(0, 2, 0, 2)
                end)
                Instance.new("Frame").MouseLeave:Connect(function()
                  va.Size = UDim2.new(0, 26, 0, 26)
                  va.Position = UDim2.new(0, 2, 0, 2)
                end)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("TextButton"), UDim.new(0, 5)
                {
                  Set = function(a, b)
                    a = a
                    b = va or vb
                    b = vb or vb
                    if b == ve then
                      vg.Text = vh .. " - " .. tostring(vd.Value)
                      vj:Create(vk, TweenInfo.new(0,2, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                        Size = UDim2.new(1 - (va - b) / (va - vb), 0, 1, 0)
                      }):Play()
                      vd.Value = b
                      pcall(vd.Function, b)
                    end
                  end,
                  Toggle = function(a, b)
                    a = a
                    if b then
                    end
                    CreateCircularRipple(va, vb.ThemeColor or vc.Settings.DefaultItemColor, b)
                    if b then
                      vc.ColourObjects[va] = "BackgroundColor3"
                    elseif vc.ColourObjects[va] then
                      vc.ColourObjects[va] = nil
                    end
                    vd.Toggled = b
                    vd:Set(vd.Value)
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = j,
                  Toggled = h,
                  Value = e,
                  Holder = Instance.new("Frame")
                }:Set(e)
                return {
                  Set = function(a, b)
                    a = a
                    b = va or vb
                    b = vb or vb
                    if b == ve then
                      vg.Text = vh .. " - " .. tostring(vd.Value)
                      vj:Create(vk, TweenInfo.new(0,2, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                        Size = UDim2.new(1 - (va - b) / (va - vb), 0, 1, 0)
                      }):Play()
                      vd.Value = b
                      pcall(vd.Function, b)
                    end
                  end,
                  Toggle = function(a, b)
                    a = a
                    if b then
                    end
                    CreateCircularRipple(va, vb.ThemeColor or vc.Settings.DefaultItemColor, b)
                    if b then
                      vc.ColourObjects[va] = "BackgroundColor3"
                    elseif vc.ColourObjects[va] then
                      vc.ColourObjects[va] = nil
                    end
                    vd.Toggled = b
                    vd:Set(vd.Value)
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = j,
                  Toggled = h,
                  Value = e,
                  Holder = Instance.new("Frame")
                }
              end,
              AddDropdown = function(a, b, c, d)
                a = a
                Instance.new("Frame").Name = "Dropdown_Holder"
                Instance.new("Frame").BackgroundColor3 = vd.Settings.ItemHolderColor
                Instance.new("Frame").ClipsDescendants = true
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 30)
                Instance.new("Frame").Parent = ve
                Instance.new("Frame").InputBegan:Connect(function(a, b)
                  a = a
                  if not b and a.UserInputType == Enum.UserInputType.MouseButton1 and not va then
                    vb = not vb
                    vc:Toggle(vb)
                  end
                end)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "Labels_Holder"
                Instance.new("Frame").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("Frame").BackgroundTransparency = 1
                Instance.new("Frame").Position = UDim2.new(0, 2, 0, 0)
                Instance.new("Frame").Size = UDim2.new(1, -30, 0, 30)
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").BorderColor3 = Color3.fromRGB(27, 42, 53)
                Instance.new("TextLabel").Position = UDim2.new(0, 5, 0,5, -7)
                Instance.new("TextLabel").Size = UDim2.new(0,5, -2, 0, 14)
                Instance.new("TextLabel").Font = vd.Settings.Font
                Instance.new("TextLabel").Text = b
                Instance.new("TextLabel").TextColor3 = vd.Settings.TextColor
                Instance.new("TextLabel").TextSize = vd.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                Instance.new("TextLabel").TextXAlignment = Enum.TextXAlignment.Left
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Selected_Display"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").BorderColor3 = Color3.fromRGB(27, 42, 53)
                Instance.new("TextLabel").Position = UDim2.new(0,5, 3, 0, 8)
                Instance.new("TextLabel").Size = UDim2.new(0,5, -5, 0, 14)
                Instance.new("TextLabel").Font = vd.Settings.Font
                Instance.new("TextLabel").Text = ""
                Instance.new("TextLabel").TextColor3 = vd.Settings.TextColor
                Instance.new("TextLabel").TextSize = vd.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                Instance.new("TextLabel").TextXAlignment = Enum.TextXAlignment.Right
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Dropdown_Indicator"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(1, -28, 0, 2)
                Instance.new("TextLabel").Rotation = -90
                Instance.new("TextLabel").Size = UDim2.new(0, 26, 0, 26)
                Instance.new("TextLabel").Font = vd.Settings.DropdownIndicatorFont
                Instance.new("TextLabel").Text = "<"
                Instance.new("TextLabel").TextColor3 = vd.Settings.TextColor
                Instance.new("TextLabel").TextSize = vd.Settings.DropdownIndicatorTextSize
                Instance.new("ScrollingFrame").Parent, Instance.new("ScrollingFrame").Name = Instance.new("Frame"), "Dropdown_List"
                Instance.new("ScrollingFrame").Active = true
                Instance.new("ScrollingFrame").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("ScrollingFrame").BackgroundTransparency = 1
                Instance.new("ScrollingFrame").BorderSizePixel = 0
                Instance.new("ScrollingFrame").Position = UDim2.new(0, 0, 0, 30)
                Instance.new("ScrollingFrame").Size = UDim2.new(1, 0, 1, -30)
                Instance.new("ScrollingFrame").CanvasSize = UDim2.new(0, 0, 0, 2)
                Instance.new("ScrollingFrame").ScrollBarImageColor3 = Color3.fromRGB(0, 0, 0)
                Instance.new("ScrollingFrame").ScrollBarThickness = 5
                Instance.new("ScrollingFrame").ChildAdded:Connect(function(a)
                  a = a
                  if not a.ClassName:find("UI") then
                    va(UDim2.new(0, 0, 0, a.AbsoluteSize.Y + 2))
                  end
                end)
                Instance.new("ScrollingFrame").ChildRemoved:Connect(function(a)
                  a = a
                  if not a.ClassName:find("UI") then
                    va(UDim2.new(0, 0, 0, -a.AbsoluteSize.Y - 2))
                  end
                end)
                Instance.new("UIPadding").Parent = Instance.new("ScrollingFrame")
                Instance.new("UIPadding").PaddingBottom = UDim.new(0, 2)
                Instance.new("UIPadding").PaddingLeft = UDim.new(0, 2)
                Instance.new("UIPadding").PaddingRight = UDim.new(0, 2)
                Instance.new("UIListLayout").Parent, Instance.new("UIPadding").PaddingTop = Instance.new("ScrollingFrame"), UDim.new(0, 2)
                Instance.new("UIListLayout").SortOrder = Enum.SortOrder.LayoutOrder
                Instance.new("UIListLayout").Padding = UDim.new(0, 2)
                for fQ, fW in next, c, nil do
                  {
                    Toggle = function(a, b)
                      a = a
                      if not va then
                        va = true
                        if b then
                        end
                        if b then
                        end
                        vc:Create(vd, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                          Rotation = 0 or -90
                        }):Play()
                        vc:Create(ve, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                          Size = ve.Size + UDim2.new(0, 0, 0, 2 + (vb.MaxVisibleItems or #vb.Items) * 22 or -(2 + (vb.MaxVisibleItems or #vb.Items) * 22))
                        }):Play()
                        vc:Create(vg, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                          Size = vg.Size + UDim2.new(0, 0, 0, 2 + (vb.MaxVisibleItems or #vb.Items) * 22 or -(2 + (vb.MaxVisibleItems or #vb.Items) * 22))
                        }):Play()
                        vc:Create(vh, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                          CanvasSize = vh.CanvasSize + UDim2.new(0, 0, 0, 2 + (vb.MaxVisibleItems or #vb.Items) * 22 or -(2 + (vb.MaxVisibleItems or #vb.Items) * 22))
                        }):Play()
                        wait(0,5)
                        va = false
                        vj()
                        vk()
                      end
                    end,
                    AddItem = function(a, b)
                      a = a
                      if va then
                        table.insert(vb.Add, {
                          Name = b,
                          Holder = Instance.new("TextButton")
                        })
                        return
                      end
                      Instance.new("TextButton").Name = "Dropdown_Item"
                      Instance.new("TextButton").BackgroundColor3 = Color3.fromRGB(25, 25, 25)
                      Instance.new("TextButton").Size = UDim2.new(1, 0, 0, 20)
                      Instance.new("TextButton").Font = vc.Settings.Font
                      Instance.new("TextButton").Text = b
                      Instance.new("TextButton").TextColor3 = vc.Settings.TextColor
                      Instance.new("TextButton").TextSize = vc.Settings.TextSize
                      Instance.new("TextButton").TextWrapped = true
                      Instance.new("TextButton").Parent = vd
                      Instance.new("TextButton").MouseButton1Click:Connect(function()
                        va.Text = vb
                        vc.Selected = vb
                        pcall(vc.Function, vb)
                      end)
                      Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("TextButton"), UDim.new(0, 5)
                      table.insert(vg.Items, {
                        Name = b,
                        Holder = Instance.new("TextButton")
                      })
                    end,
                    RemoveItem = function(a, b)
                      a = a
                      if va then
                        for fg, fh in next, vb.Items, nil do
                          if fh.Name == b then
                            table.insert(vc.Remove, fh)
                          else
                          end
                        end
                        return
                      end
                      for fg, fh in next, vb.Items, nil do
                        if fh.Name == b then
                          table.remove(vb.Items, fg)
                          fh.Holder:Destroy()
                        else
                        end
                      end
                    end,
                    AddToolTip = function(a, b)
                      a = a
                      AddToolTip(va, vb, b)
                    end,
                    Function = d,
                    MaxVisibleItems = 10,
                    Selected = nil,
                    Items = {},
                    Holder = Instance.new("Frame")
                  }:AddItem(fW)
                end
                return {
                  Toggle = function(a, b)
                    a = a
                    if not va then
                      va = true
                      if b then
                      end
                      if b then
                      end
                      vc:Create(vd, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                        Rotation = 0 or -90
                      }):Play()
                      vc:Create(ve, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                        Size = ve.Size + UDim2.new(0, 0, 0, 2 + (vb.MaxVisibleItems or #vb.Items) * 22 or -(2 + (vb.MaxVisibleItems or #vb.Items) * 22))
                      }):Play()
                      vc:Create(vg, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                        Size = vg.Size + UDim2.new(0, 0, 0, 2 + (vb.MaxVisibleItems or #vb.Items) * 22 or -(2 + (vb.MaxVisibleItems or #vb.Items) * 22))
                      }):Play()
                      vc:Create(vh, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                        CanvasSize = vh.CanvasSize + UDim2.new(0, 0, 0, 2 + (vb.MaxVisibleItems or #vb.Items) * 22 or -(2 + (vb.MaxVisibleItems or #vb.Items) * 22))
                      }):Play()
                      wait(0,5)
                      va = false
                      vj()
                      vk()
                    end
                  end,
                  AddItem = function(a, b)
                    a = a
                    if va then
                      table.insert(vb.Add, {
                        Name = b,
                        Holder = Instance.new("TextButton")
                      })
                      return
                    end
                    Instance.new("TextButton").Name = "Dropdown_Item"
                    Instance.new("TextButton").BackgroundColor3 = Color3.fromRGB(25, 25, 25)
                    Instance.new("TextButton").Size = UDim2.new(1, 0, 0, 20)
                    Instance.new("TextButton").Font = vc.Settings.Font
                    Instance.new("TextButton").Text = b
                    Instance.new("TextButton").TextColor3 = vc.Settings.TextColor
                    Instance.new("TextButton").TextSize = vc.Settings.TextSize
                    Instance.new("TextButton").TextWrapped = true
                    Instance.new("TextButton").Parent = vd
                    Instance.new("TextButton").MouseButton1Click:Connect(function()
                      va.Text = vb
                      vc.Selected = vb
                      pcall(vc.Function, vb)
                    end)
                    Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("TextButton"), UDim.new(0, 5)
                    table.insert(vg.Items, {
                      Name = b,
                      Holder = Instance.new("TextButton")
                    })
                  end,
                  RemoveItem = function(a, b)
                    a = a
                    if va then
                      for fg, fh in next, vb.Items, nil do
                        if fh.Name == b then
                          table.insert(vc.Remove, fh)
                        else
                        end
                      end
                      return
                    end
                    for fg, fh in next, vb.Items, nil do
                      if fh.Name == b then
                        table.remove(vb.Items, fg)
                        fh.Holder:Destroy()
                      else
                      end
                    end
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = d,
                  MaxVisibleItems = 10,
                  Selected = nil,
                  Items = {},
                  Holder = Instance.new("Frame")
                }
              end,
              AddBind = function(a, b, c, d)
                a = a
                Instance.new("Frame").Name = "Bind_Holder"
                Instance.new("Frame").BackgroundColor3 = va.Settings.ItemHolderColor
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 30)
                Instance.new("Frame").Parent = vb
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(0, 5, 0,5, -7)
                Instance.new("TextLabel").Size = UDim2.new(1, -112, 0, 14)
                Instance.new("TextLabel").Font = va.Settings.Font
                Instance.new("TextLabel").Text = b
                Instance.new("TextLabel").TextColor3 = va.Settings.TextColor
                Instance.new("TextLabel").TextSize = va.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                Instance.new("TextLabel").TextXAlignment = Enum.TextXAlignment.Left
                Instance.new("TextBox").Parent, Instance.new("TextBox").Name = Instance.new("Frame"), "Box"
                Instance.new("TextBox").BackgroundColor3 = Color3.fromRGB(25, 25, 25)
                Instance.new("TextBox").Position = UDim2.new(1, -62, 0, 2)
                Instance.new("TextBox").Size = UDim2.new(0, 60, 1, -4)
                Instance.new("TextBox").ClearTextOnFocus = false
                Instance.new("TextBox").Font = va.Settings.Font
                Instance.new("TextBox").Text = ""
                Instance.new("TextBox").TextColor3 = va.Settings.TextColor
                Instance.new("TextBox").TextEditable = false
                Instance.new("TextBox").TextSize = va.Settings.TextSize
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("TextBox"), UDim.new(0, 5)
                vc.InputBegan:Connect(function(a, b)
                  a = a
                  if not b and a.KeyCode == va.Bind then
                    pcall(va.Function)
                  end
                end)
                {
                  Set = function(a, b)
                    a = a
                    va.Bind = b
                    vb.Text = b.Name
                    vb.Size = UDim2.new(0, vb.TextBounds.X + 10, 1, -4)
                    vb.Position = UDim2.new(1, -vb.AbsoluteSize.X - 2, 0, 2)
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = d,
                  Bind = c,
                  Holder = Instance.new("Frame")
                }:Set(c)
                return {
                  Set = function(a, b)
                    a = a
                    va.Bind = b
                    vb.Text = b.Name
                    vb.Size = UDim2.new(0, vb.TextBounds.X + 10, 1, -4)
                    vb.Position = UDim2.new(1, -vb.AbsoluteSize.X - 2, 0, 2)
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = d,
                  Bind = c,
                  Holder = Instance.new("Frame")
                }
              end,
              AddToggleBind = function(a, b, c, d, e)
                a = a
                vc.BindToggles[b] = d
                Instance.new("Frame").Name = "ToggleBind_Holder"
                Instance.new("Frame").BackgroundColor3 = vb.Settings.ItemHolderColor
                Instance.new("Frame").Size = UDim2.new(1, 0, 0, 30)
                Instance.new("Frame").Parent = vd
                Instance.new("Frame").InputBegan:Connect(function(a, b)
                  a = a
                  if not b and a.UserInputType == Enum.UserInputType.MouseButton1 then
                    va.Size = UDim2.new(0, 24, 0, 24)
                    va.Position = UDim2.new(1, -vb.AbsoluteSize.X - 29, 0, 3)
                  end
                end)
                Instance.new("Frame").InputEnded:Connect(function(a, b)
                  a = a
                  if not b and a.UserInputType == Enum.UserInputType.MouseButton1 then
                    va.BindToggles[vb] = not va.BindToggles[vb]
                    vc:Toggle(va.BindToggles[vb])
                    vd.Size = UDim2.new(0, 26, 0, 26)
                    vd.Position = UDim2.new(1, -ve.AbsoluteSize.X - 30, 0, 2)
                  end
                end)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Label"
                Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Instance.new("TextLabel").BackgroundTransparency = 1
                Instance.new("TextLabel").Position = UDim2.new(0, 5, 0,5, -7)
                Instance.new("TextLabel").Size = UDim2.new(1, -112, 0, 14)
                Instance.new("TextLabel").Font = vb.Settings.Font
                Instance.new("TextLabel").Text = b
                Instance.new("TextLabel").TextColor3 = vb.Settings.TextColor
                Instance.new("TextLabel").TextSize = vb.Settings.TextSize
                Instance.new("TextLabel").TextWrapped = true
                Instance.new("TextLabel").TextXAlignment = Enum.TextXAlignment.Left
                Instance.new("TextBox").Parent, Instance.new("TextBox").Name = Instance.new("Frame"), "Box"
                Instance.new("TextBox").BackgroundColor3 = vb.Settings.DefaultItemColor
                Instance.new("TextBox").Position = UDim2.new(1, -62, 0, 2)
                Instance.new("TextBox").Size = UDim2.new(0, 60, 1, -4)
                Instance.new("TextBox").ClearTextOnFocus = false
                Instance.new("TextBox").Font = vb.Settings.Font
                Instance.new("TextBox").Text = ""
                Instance.new("TextBox").TextColor3 = vb.Settings.TextColor
                Instance.new("TextBox").TextEditable = false
                Instance.new("TextBox").TextSize = vb.Settings.TextSize
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("TextBox"), UDim.new(0, 5)
                Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "ToggleBind_Indicator"
                Instance.new("Frame").BackgroundColor3 = vb.Settings.DefaultItemColor
                Instance.new("Frame").Position = UDim2.new(1, -90, 0, 2)
                Instance.new("Frame").Size = UDim2.new(0, 26, 0, 26)
                Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
                ve.InputBegan:Connect(function(a, b)
                  a = a
                  if not b and a.KeyCode == va.Bind and va.Toggled then
                    pcall(va.Function)
                  end
                end)
                {
                  Set = function(a, b)
                    a = a
                    va.Bind = b
                    vb.Text = b.Name
                    vb.Size = UDim2.new(0, vb.TextBounds.X + 10, 1, -4)
                    vb.Position = UDim2.new(1, -vb.AbsoluteSize.X - 2, 0, 2)
                    vc.Position = UDim2.new(1, -vb.AbsoluteSize.X - 30, 0, 2)
                  end,
                  Toggle = function(a, b)
                    a = a
                    if b then
                    end
                    CreateCircularRipple(va, vb.ThemeColor or vc.Settings.DefaultItemColor, b)
                    if b then
                      vc.ColourObjects[va] = "BackgroundColor3"
                    elseif vc.ColourObjects[va] then
                      vc.ColourObjects[va] = nil
                    end
                    vd.Toggled = b
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = e,
                  Toggled = d,
                  Bind = c,
                  Holder = Instance.new("Frame")
                }:Set(c)
                {
                  Set = function(a, b)
                    a = a
                    va.Bind = b
                    vb.Text = b.Name
                    vb.Size = UDim2.new(0, vb.TextBounds.X + 10, 1, -4)
                    vb.Position = UDim2.new(1, -vb.AbsoluteSize.X - 2, 0, 2)
                    vc.Position = UDim2.new(1, -vb.AbsoluteSize.X - 30, 0, 2)
                  end,
                  Toggle = function(a, b)
                    a = a
                    if b then
                    end
                    CreateCircularRipple(va, vb.ThemeColor or vc.Settings.DefaultItemColor, b)
                    if b then
                      vc.ColourObjects[va] = "BackgroundColor3"
                    elseif vc.ColourObjects[va] then
                      vc.ColourObjects[va] = nil
                    end
                    vd.Toggled = b
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = e,
                  Toggled = d,
                  Bind = c,
                  Holder = Instance.new("Frame")
                }:Toggle(d)
                return {
                  Set = function(a, b)
                    a = a
                    va.Bind = b
                    vb.Text = b.Name
                    vb.Size = UDim2.new(0, vb.TextBounds.X + 10, 1, -4)
                    vb.Position = UDim2.new(1, -vb.AbsoluteSize.X - 2, 0, 2)
                    vc.Position = UDim2.new(1, -vb.AbsoluteSize.X - 30, 0, 2)
                  end,
                  Toggle = function(a, b)
                    a = a
                    if b then
                    end
                    CreateCircularRipple(va, vb.ThemeColor or vc.Settings.DefaultItemColor, b)
                    if b then
                      vc.ColourObjects[va] = "BackgroundColor3"
                    elseif vc.ColourObjects[va] then
                      vc.ColourObjects[va] = nil
                    end
                    vd.Toggled = b
                  end,
                  AddToolTip = function(a, b)
                    a = a
                    AddToolTip(va, vb, b)
                  end,
                  Function = e,
                  Toggled = d,
                  Bind = c,
                  Holder = Instance.new("Frame")
                }
              end
            }
          end
        }
      end
    }
  end,
  Notify = function(a, b, c)
    a = a
    if va then
      table.insert(vb.NotifsQueue, {b, c})
      return
    end
    Instance.new("ScreenGui").Name = "Notification Gui"
    Instance.new("ScreenGui").Parent = game.CoreGui
    Instance.new("ScreenGui").ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    Instance.new("Frame").Name = "Notification_Holder"
    Instance.new("Frame").BackgroundColor3 = vb.Settings.NotificationHolderColor
    Instance.new("Frame").BorderSizePixel = 0
    Instance.new("Frame").Position = UDim2.new(-1, 0, 0, 0)
    Instance.new("Frame").Parent, Instance.new("Frame").Size = Instance.new("ScreenGui"), UDim2.new(0, 300, 0, 96)
    Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "Main_Holder"
    Instance.new("Frame").BackgroundColor3 = vb.Settings.NotificationMainColor
    Instance.new("Frame").BorderSizePixel = 0
    Instance.new("Frame").Position = UDim2.new(0, 2, 0, 2)
    Instance.new("Frame").Size = UDim2.new(1, -4, 1, -4)
    Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
    Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "TopBar"
    Instance.new("Frame").BackgroundColor3 = vb.Settings.NotificationTopColor
    Instance.new("Frame").Size = UDim2.new(1, 0, 0, 18)
    Instance.new("Frame").Parent, Instance.new("Frame").Name = Instance.new("Frame"), "Top_Filling"
    Instance.new("Frame").BackgroundColor3 = vb.Settings.NotificationTopColor
    Instance.new("Frame").BorderSizePixel = 0
    Instance.new("Frame").Position = UDim2.new(0, 0, 0,5, 0)
    Instance.new("Frame").Size = UDim2.new(1, 0, 0,5, 0)
    Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
    Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Title"
    Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    Instance.new("TextLabel").BackgroundTransparency = 1
    Instance.new("TextLabel").Position = UDim2.new(0, 2, 0, 2)
    Instance.new("TextLabel").Size = UDim2.new(1, -4, 0, 14)
    Instance.new("TextLabel").Font = vb.Settings.NotificationFont
    Instance.new("TextLabel").Text = "Notification"
    Instance.new("TextLabel").TextColor3 = vb.Settings.TextColor
    Instance.new("TextLabel").TextSize = vb.Settings.TextSize
    Instance.new("TextLabel").TextWrapped = true
    Instance.new("TextLabel").TextXAlignment = Enum.TextXAlignment.Left
    Instance.new("TextButton").Parent, Instance.new("TextButton").Name = Instance.new("Frame"), "Yes"
    Instance.new("TextButton").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    Instance.new("TextButton").BackgroundTransparency = 1
    Instance.new("TextButton").Position = UDim2.new(1, -36, 0, 0)
    Instance.new("TextButton").Size = UDim2.new(0, 18, 0, 18)
    Instance.new("TextButton").Font = vb.Settings.Font
    Instance.new("TextButton").Text = "?"
    Instance.new("TextButton").TextColor3 = vb.Settings.TextColor
    Instance.new("TextButton").TextSize = 16
    Instance.new("TextButton").TextWrapped = true
    Instance.new("TextButton").MouseButton1Click:Connect(function()
      va(true)
    end)
    Instance.new("TextButton").Parent, Instance.new("TextButton").Name = Instance.new("Frame"), "No"
    Instance.new("TextButton").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    Instance.new("TextButton").BackgroundTransparency = 1
    Instance.new("TextButton").Position = UDim2.new(1, -18, 0, 0)
    Instance.new("TextButton").Size = UDim2.new(0, 18, 0, 16)
    Instance.new("TextButton").Font = vb.Settings.Font
    Instance.new("TextButton").Text = "x"
    Instance.new("TextButton").TextColor3 = vb.Settings.TextColor
    Instance.new("TextButton").TextSize = 20
    Instance.new("TextButton").TextWrapped = true
    Instance.new("TextButton").MouseButton1Click:Connect(function()
      va(false)
    end)
    Instance.new("TextLabel").Parent, Instance.new("TextLabel").Name = Instance.new("Frame"), "Description"
    Instance.new("TextLabel").BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    Instance.new("TextLabel").BackgroundTransparency = 1
    Instance.new("TextLabel").Position = UDim2.new(0, 2, 0, 20)
    Instance.new("TextLabel").Size = UDim2.new(1, -4, 1, -20)
    Instance.new("TextLabel").Font = vb.Settings.Font
    Instance.new("TextLabel").Text = b
    Instance.new("TextLabel").TextColor3 = vb.Settings.TextColor
    Instance.new("TextLabel").TextSize = vb.Settings.TextSize
    Instance.new("TextLabel").TextWrapped = true
    Instance.new("TextLabel").TextXAlignment = Enum.TextXAlignment.Left
    Instance.new("TextLabel").TextYAlignment = Enum.TextYAlignment.Top
    Instance.new("UICorner").Parent, Instance.new("UICorner").CornerRadius = Instance.new("Frame"), UDim.new(0, 5)
    coroutine.wrap(function()
      if 26 + va.MaxMultilineCount * 14 < 26 + vb.TextBounds.Y then
      end
      vc.Position = UDim2.new(-1, 0, 1, -(26 + vb.TextBounds.Y) - 20)
      vc.Size = UDim2.new(0, 300, 0, 26 + vb.TextBounds.Y)
      Instance.new("Sound", game).SoundId, Instance.new("Sound", game).PlayOnRemove = "rbxassetid://700153902", true
      Instance.new("Sound", game):Destroy()
      coroutine.wrap(function()
        wait(10)
        if va == nil then
          vb(false)
        end
      end)()
      vg = true
      vh:Create(vc, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
        Position = UDim2.new(0, 20, 1, -(26 + vb.TextBounds.Y) - 20)
      }):Play()
      for fh, fj in next, vj.Notifications, nil do
        if #vj.Notifications > vj.MaxNotificationStacking - 1 and fh == 1 then
          table.remove(vj.Notifications, 1)
          fj.Holder:Destroy()
        end
      end
      for fh, fj in next, vj.Notifications, nil do
        if fj ~= va then
          vh:Create(fj.Holder, TweenInfo.new(0,5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
            Position = fj.Holder.Position - UDim2.new(0, 0, 0, 26 + vb.TextBounds.Y + 10)
          }):Play()
        end
      end
      table.insert(vj.Notifications, va)
      wait(0,5)
      vg = false
    end)()
    return {
      Select = function(a, b)
        a = a
        va(b)
      end,
      Function = c,
      Description = b,
      MaxMultilineCount = 5,
      Holder = Instance.new("Frame")
    }
  end
}
